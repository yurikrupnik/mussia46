"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema BackendService:
    r"""
    BackendService is the Schema for the BackendServices API. A Backend Service defines a group of virtual machines that will serve traffic for load balancing.

    Attributes
    ----------
    apiVersion : str, default is "compute.gcp.upbound.io/v1beta2", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "BackendService", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : ComputeGcpUpboundIoV1beta2BackendServiceSpec, default is Undefined, required
        spec
    status : ComputeGcpUpboundIoV1beta2BackendServiceStatus, default is Undefined, optional
        status
    """


    apiVersion: "compute.gcp.upbound.io/v1beta2" = "compute.gcp.upbound.io/v1beta2"

    kind: "BackendService" = "BackendService"

    metadata?: v1.ObjectMeta

    spec: ComputeGcpUpboundIoV1beta2BackendServiceSpec

    status?: ComputeGcpUpboundIoV1beta2BackendServiceStatus


schema ComputeGcpUpboundIoV1beta2BackendServiceSpec:
    r"""
    BackendServiceSpec defines the desired state of BackendService

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : ComputeGcpUpboundIoV1beta2BackendServiceSpecForProvider, default is Undefined, required
        for provider
    initProvider : ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : ComputeGcpUpboundIoV1beta2BackendServiceSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : ComputeGcpUpboundIoV1beta2BackendServiceSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : ComputeGcpUpboundIoV1beta2BackendServiceSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: ComputeGcpUpboundIoV1beta2BackendServiceSpecForProvider

    initProvider?: ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: ComputeGcpUpboundIoV1beta2BackendServiceSpecProviderConfigRef

    publishConnectionDetailsTo?: ComputeGcpUpboundIoV1beta2BackendServiceSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: ComputeGcpUpboundIoV1beta2BackendServiceSpecWriteConnectionSecretToRef


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecForProvider:
    r"""
    compute gcp upbound io v1beta2 backend service spec for provider

    Attributes
    ----------
    affinityCookieTtlSec : float, default is Undefined, optional
        Lifetime of cookies in seconds if session_affinity is
        GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts
        only until the end of the browser session (or equivalent). The
        maximum allowed value for TTL is one day.
        When the load balancing scheme is INTERNAL, this field is not used.
    backend : [ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderBackendItems0], default is Undefined, optional
        The set of backends that serve this BackendService.
        Structure is documented below.
    cdnPolicy : ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderCdnPolicy, default is Undefined, optional
        cdn policy
    circuitBreakers : ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderCircuitBreakers, default is Undefined, optional
        circuit breakers
    compressionMode : str, default is Undefined, optional
        Compress text responses using Brotli or gzip compression, based on the client's Accept-Encoding header.
        Possible values are: AUTOMATIC, DISABLED.
    connectionDrainingTimeoutSec : float, default is Undefined, optional
        Time for which instance will be drained (not accept new
        connections, but still work to finish started).
    consistentHash : ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderConsistentHash, default is Undefined, optional
        consistent hash
    customRequestHeaders : [str], default is Undefined, optional
        Headers that the HTTP/S load balancer should add to proxied
        requests.
    customResponseHeaders : [str], default is Undefined, optional
        Headers that the HTTP/S load balancer should add to proxied
        responses.
    description : str, default is Undefined, optional
        An optional description of this resource.
    edgeSecurityPolicy : str, default is Undefined, optional
        The resource URL for the edge security policy associated with this backend service.
    enableCdn : bool, default is Undefined, optional
        If true, enable Cloud CDN for this BackendService.
    healthChecks : [str], default is Undefined, optional
        The set of URLs to the HttpHealthCheck or HttpsHealthCheck resource
        for health checking this BackendService. Currently at most one health
        check can be specified.
        A health check must be specified unless the backend service uses an internet
        or serverless NEG as a backend.
        For internal load balancing, a URL to a HealthCheck resource must be specified instead.
    healthChecksRefs : [ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderHealthChecksRefsItems0], default is Undefined, optional
        References to HealthCheck in compute to populate healthChecks.
    healthChecksSelector : ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderHealthChecksSelector, default is Undefined, optional
        health checks selector
    iap : ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderIap, default is Undefined, optional
        iap
    loadBalancingScheme : str, default is Undefined, optional
        Indicates whether the backend service will be used with internal or
        external load balancing. A backend service created for one type of
        load balancing cannot be used with the other. For more information, refer to
        Choosing a load balancer.
        Default value is EXTERNAL.
        Possible values are: EXTERNAL, INTERNAL_SELF_MANAGED, INTERNAL_MANAGED, EXTERNAL_MANAGED.
    localityLbPolicies : [ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderLocalityLbPoliciesItems0], default is Undefined, optional
        A list of locality load balancing policies to be used in order of
        preference. Either the policy or the customPolicy field should be set.
        Overrides any value set in the localityLbPolicy field.
        localityLbPolicies is only supported when the BackendService is referenced
        by a URL Map that is referenced by a target gRPC proxy that has the
        validateForProxyless field set to true.
        Structure is documented below.
    localityLbPolicy : str, default is Undefined, optional
        The load balancing algorithm used within the scope of the locality.
        The possible values are:
    logConfig : ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderLogConfig, default is Undefined, optional
        log config
    outlierDetection : ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderOutlierDetection, default is Undefined, optional
        outlier detection
    portName : str, default is Undefined, optional
        Name of backend port. The same name should appear in the instance
        groups referenced by this service. Required when the load balancing
        scheme is EXTERNAL.
    project : str, default is Undefined, optional
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
    $protocol : str, default is Undefined, optional
        The protocol this BackendService uses to communicate with backends.
        The default is HTTP. NOTE: HTTP2 is only valid for beta HTTP/2 load balancer
        types and may result in errors if used with the GA API. NOTE: With protocol “UNSPECIFIED”,
        the backend service can be used by Layer 4 Internal Load Balancing or Network Load Balancing
        with TCP/UDP/L3_DEFAULT Forwarding Rule protocol.
        Possible values are: HTTP, HTTPS, HTTP2, TCP, SSL, GRPC, UNSPECIFIED.
    securityPolicy : str, default is Undefined, optional
        The security policy associated with this backend service.
    securitySettings : ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderSecuritySettings, default is Undefined, optional
        security settings
    serviceLbPolicy : str, default is Undefined, optional
        URL to networkservices.ServiceLbPolicy resource.
        Can only be set if load balancing scheme is EXTERNAL, EXTERNAL_MANAGED, INTERNAL_MANAGED or INTERNAL_SELF_MANAGED and the scope is global.
    sessionAffinity : str, default is Undefined, optional
        Type of session affinity to use. The default is NONE. Session affinity is
        not applicable if the protocol is UDP.
        Possible values are: NONE, CLIENT_IP, CLIENT_IP_PORT_PROTO, CLIENT_IP_PROTO, GENERATED_COOKIE, HEADER_FIELD, HTTP_COOKIE.
    timeoutSec : float, default is Undefined, optional
        The backend service timeout has a different meaning depending on the type of load balancer.
        For more information see, Backend service settings.
        The default is 30 seconds.
        The full range of timeout values allowed goes from 1 through 2,147,483,647 seconds.
    """


    affinityCookieTtlSec?: float

    backend?: [ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderBackendItems0]

    cdnPolicy?: ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderCdnPolicy

    circuitBreakers?: ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderCircuitBreakers

    compressionMode?: str

    connectionDrainingTimeoutSec?: float

    consistentHash?: ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderConsistentHash

    customRequestHeaders?: [str]

    customResponseHeaders?: [str]

    description?: str

    edgeSecurityPolicy?: str

    enableCdn?: bool

    healthChecks?: [str]

    healthChecksRefs?: [ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderHealthChecksRefsItems0]

    healthChecksSelector?: ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderHealthChecksSelector

    iap?: ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderIap

    loadBalancingScheme?: str

    localityLbPolicies?: [ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderLocalityLbPoliciesItems0]

    localityLbPolicy?: str

    logConfig?: ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderLogConfig

    outlierDetection?: ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderOutlierDetection

    portName?: str

    project?: str

    $protocol?: str

    securityPolicy?: str

    securitySettings?: ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderSecuritySettings

    serviceLbPolicy?: str

    sessionAffinity?: str

    timeoutSec?: float


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderBackendItems0:
    r"""
    compute gcp upbound io v1beta2 backend service spec for provider backend items0

    Attributes
    ----------
    balancingMode : str, default is Undefined, optional
        Specifies the balancing mode for this backend.
        For global HTTP(S) or TCP/SSL load balancing, the default is
        UTILIZATION. Valid values are UTILIZATION, RATE (for HTTP(S))
        and CONNECTION (for TCP/SSL).
        See the Backend Services Overview
        for an explanation of load balancing modes.
        From version 6.0.0 default value will be UTILIZATION to match default GCP value.
        Default value is UTILIZATION.
        Possible values are: UTILIZATION, RATE, CONNECTION.
    capacityScaler : float, default is Undefined, optional
        A multiplier applied to the group's maximum servicing capacity
        (based on UTILIZATION, RATE or CONNECTION).
        Default value is 1, which means the group will serve up to 100%
        of its configured capacity (depending on balancingMode). A
        setting of 0 means the group is completely drained, offering
        0% of its available Capacity. Valid range is [0.0,1.0].
    description : str, default is Undefined, optional
        An optional description of this resource.
        Provide this property when you create the resource.
    group : str, default is Undefined, optional
        The fully-qualified URL of an Instance Group or Network Endpoint
        Group resource. In case of instance group this defines the list
        of instances that serve traffic. Member virtual machine
        instances from each instance group must live in the same zone as
        the instance group itself. No two backends in a backend service
        are allowed to use same Instance Group resource.
        For Network Endpoint Groups this defines list of endpoints. All
        endpoints of Network Endpoint Group must be hosted on instances
        located in the same zone as the Network Endpoint Group.
        Backend services cannot mix Instance Group and
        Network Endpoint Group backends.
        Note that you must specify an Instance Group or Network Endpoint
        Group resource using the fully-qualified URL, rather than a
        partial URL.
    groupRef : ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderBackendItems0GroupRef, default is Undefined, optional
        group ref
    groupSelector : ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderBackendItems0GroupSelector, default is Undefined, optional
        group selector
    maxConnections : float, default is Undefined, optional
        The max number of simultaneous connections for the group. Can
        be used with either CONNECTION or UTILIZATION balancing modes.
        For CONNECTION mode, either maxConnections or one
        of maxConnectionsPerInstance or maxConnectionsPerEndpoint,
        as appropriate for group type, must be set.
    maxConnectionsPerEndpoint : float, default is Undefined, optional
        The max number of simultaneous connections that a single backend
        network endpoint can handle. This is used to calculate the
        capacity of the group. Can be used in either CONNECTION or
        UTILIZATION balancing modes.
        For CONNECTION mode, either
        maxConnections or maxConnectionsPerEndpoint must be set.
    maxConnectionsPerInstance : float, default is Undefined, optional
        The max number of simultaneous connections that a single
        backend instance can handle. This is used to calculate the
        capacity of the group. Can be used in either CONNECTION or
        UTILIZATION balancing modes.
        For CONNECTION mode, either maxConnections or
        maxConnectionsPerInstance must be set.
    maxRate : float, default is Undefined, optional
        The max requests per second (RPS) of the group.
        Can be used with either RATE or UTILIZATION balancing modes,
        but required if RATE mode. For RATE mode, either maxRate or one
        of maxRatePerInstance or maxRatePerEndpoint, as appropriate for
        group type, must be set.
    maxRatePerEndpoint : float, default is Undefined, optional
        The max requests per second (RPS) that a single backend network
        endpoint can handle. This is used to calculate the capacity of
        the group. Can be used in either balancing mode. For RATE mode,
        either maxRate or maxRatePerEndpoint must be set.
    maxRatePerInstance : float, default is Undefined, optional
        The max requests per second (RPS) that a single backend
        instance can handle. This is used to calculate the capacity of
        the group. Can be used in either balancing mode. For RATE mode,
        either maxRate or maxRatePerInstance must be set.
    maxUtilization : float, default is Undefined, optional
        Used when balancingMode is UTILIZATION. This ratio defines the
        CPU utilization target for the group. Valid range is [0.0, 1.0].
    """


    balancingMode?: str

    capacityScaler?: float

    description?: str

    group?: str

    groupRef?: ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderBackendItems0GroupRef

    groupSelector?: ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderBackendItems0GroupSelector

    maxConnections?: float

    maxConnectionsPerEndpoint?: float

    maxConnectionsPerInstance?: float

    maxRate?: float

    maxRatePerEndpoint?: float

    maxRatePerInstance?: float

    maxUtilization?: float


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderBackendItems0GroupRef:
    r"""
    Reference to a InstanceGroupManager in compute to populate group.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderBackendItems0GroupRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderBackendItems0GroupRefPolicy


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderBackendItems0GroupRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderBackendItems0GroupSelector:
    r"""
    Selector for a InstanceGroupManager in compute to populate group.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderBackendItems0GroupSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderBackendItems0GroupSelectorPolicy


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderBackendItems0GroupSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderCdnPolicy:
    r"""
    Cloud CDN configuration for this BackendService.
    Structure is documented below.

    Attributes
    ----------
    bypassCacheOnRequestHeaders : [ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderCdnPolicyBypassCacheOnRequestHeadersItems0], default is Undefined, optional
        Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified.
        The cache is bypassed for all cdnPolicy.cacheMode settings.
        Structure is documented below.
    cacheKeyPolicy : ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderCdnPolicyCacheKeyPolicy, default is Undefined, optional
        cache key policy
    cacheMode : str, default is Undefined, optional
        Specifies the cache setting for all responses from this backend.
        The possible values are: USE_ORIGIN_HEADERS, FORCE_CACHE_ALL and CACHE_ALL_STATIC
        Possible values are: USE_ORIGIN_HEADERS, FORCE_CACHE_ALL, CACHE_ALL_STATIC.
    clientTtl : float, default is Undefined, optional
        Specifies the maximum allowed TTL for cached content served by this origin.
    defaultTtl : float, default is Undefined, optional
        Specifies the default TTL for cached content served by this origin for responses
        that do not have an existing valid TTL (max-age or s-max-age).
    maxTtl : float, default is Undefined, optional
        Specifies the maximum allowed TTL for cached content served by this origin.
    negativeCaching : bool, default is Undefined, optional
        Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects.
    negativeCachingPolicy : [ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderCdnPolicyNegativeCachingPolicyItems0], default is Undefined, optional
        Sets a cache TTL for the specified HTTP status code. negativeCaching must be enabled to configure negativeCachingPolicy.
        Omitting the policy and leaving negativeCaching enabled will use Cloud CDN's default cache TTLs.
        Structure is documented below.
    serveWhileStale : float, default is Undefined, optional
        Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache.
    signedUrlCacheMaxAgeSec : float, default is Undefined, optional
        Maximum number of seconds the response to a signed URL request
        will be considered fresh, defaults to 1hr (3600s). After this
        time period, the response will be revalidated before
        being served.
        When serving responses to signed URL requests, Cloud CDN will
        internally behave as though all responses from this backend had a
        "Cache-Control: public, max-age=[TTL]" header, regardless of any
        existing Cache-Control header. The actual headers served in
        responses will not be altered.
    """


    bypassCacheOnRequestHeaders?: [ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderCdnPolicyBypassCacheOnRequestHeadersItems0]

    cacheKeyPolicy?: ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderCdnPolicyCacheKeyPolicy

    cacheMode?: str

    clientTtl?: float

    defaultTtl?: float

    maxTtl?: float

    negativeCaching?: bool

    negativeCachingPolicy?: [ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderCdnPolicyNegativeCachingPolicyItems0]

    serveWhileStale?: float

    signedUrlCacheMaxAgeSec?: float


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderCdnPolicyBypassCacheOnRequestHeadersItems0:
    r"""
    compute gcp upbound io v1beta2 backend service spec for provider cdn policy bypass cache on request headers items0

    Attributes
    ----------
    headerName : str, default is Undefined, optional
        The header field name to match on when bypassing cache. Values are case-insensitive.
    """


    headerName?: str


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderCdnPolicyCacheKeyPolicy:
    r"""
    The CacheKeyPolicy for this CdnPolicy.
    Structure is documented below.

    Attributes
    ----------
    includeHost : bool, default is Undefined, optional
        If true requests to different hosts will be cached separately.
    includeHttpHeaders : [str], default is Undefined, optional
        Allows HTTP request headers (by name) to be used in the
        cache key.
    includeNamedCookies : [str], default is Undefined, optional
        Names of cookies to include in cache keys.
    includeProtocol : bool, default is Undefined, optional
        If true, http and https requests will be cached separately.
    includeQueryString : bool, default is Undefined, optional
        If true, include query string parameters in the cache key
        according to query_string_whitelist and
        query_string_blacklist. If neither is set, the entire query
        string will be included.
        If false, the query string will be excluded from the cache
        key entirely.
    queryStringBlacklist : [str], default is Undefined, optional
        Names of query string parameters to exclude in cache keys.
        All other parameters will be included. Either specify
        query_string_whitelist or query_string_blacklist, not both.
        '&' and '=' will be percent encoded and not treated as
        delimiters.
    queryStringWhitelist : [str], default is Undefined, optional
        Names of query string parameters to include in cache keys.
        All other parameters will be excluded. Either specify
        query_string_whitelist or query_string_blacklist, not both.
        '&' and '=' will be percent encoded and not treated as
        delimiters.
    """


    includeHost?: bool

    includeHttpHeaders?: [str]

    includeNamedCookies?: [str]

    includeProtocol?: bool

    includeQueryString?: bool

    queryStringBlacklist?: [str]

    queryStringWhitelist?: [str]


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderCdnPolicyNegativeCachingPolicyItems0:
    r"""
    compute gcp upbound io v1beta2 backend service spec for provider cdn policy negative caching policy items0

    Attributes
    ----------
    code : float, default is Undefined, optional
        The HTTP status code to define a TTL against. Only HTTP status codes 300, 301, 308, 404, 405, 410, 421, 451 and 501
        can be specified as values, and you cannot specify a status code more than once.
    ttl : float, default is Undefined, optional
        The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s
        (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
    """


    code?: float

    ttl?: float


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderCircuitBreakers:
    r"""
    Settings controlling the volume of connections to a backend service. This field
    is applicable only when the load_balancing_scheme is set to INTERNAL_SELF_MANAGED.
    Structure is documented below.

    Attributes
    ----------
    maxConnections : float, default is Undefined, optional
        The maximum number of connections to the backend cluster.
        Defaults to 1024.
    maxPendingRequests : float, default is Undefined, optional
        The maximum number of pending requests to the backend cluster.
        Defaults to 1024.
    maxRequests : float, default is Undefined, optional
        The maximum number of parallel requests to the backend cluster.
        Defaults to 1024.
    maxRequestsPerConnection : float, default is Undefined, optional
        Maximum requests for a single backend connection. This parameter
        is respected by both the HTTP/1.1 and HTTP/2 implementations. If
        not specified, there is no limit. Setting this parameter to 1
        will effectively disable keep alive.
    maxRetries : float, default is Undefined, optional
        The maximum number of parallel retries to the backend cluster.
        Defaults to 3.
    """


    maxConnections?: float

    maxPendingRequests?: float

    maxRequests?: float

    maxRequestsPerConnection?: float

    maxRetries?: float


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderConsistentHash:
    r"""
    Consistent Hash-based load balancing can be used to provide soft session
    affinity based on HTTP headers, cookies or other properties. This load balancing
    policy is applicable only for HTTP connections. The affinity to a particular
    destination host will be lost when one or more hosts are added/removed from the
    destination service. This field specifies parameters that control consistent
    hashing. This field only applies if the load_balancing_scheme is set to
    INTERNAL_SELF_MANAGED. This field is only applicable when locality_lb_policy is
    set to MAGLEV or RING_HASH.
    Structure is documented below.

    Attributes
    ----------
    httpCookie : ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderConsistentHashHTTPCookie, default is Undefined, optional
        http cookie
    httpHeaderName : str, default is Undefined, optional
        The hash based on the value of the specified header field.
        This field is applicable if the sessionAffinity is set to HEADER_FIELD.
    minimumRingSize : float, default is Undefined, optional
        The minimum number of virtual nodes to use for the hash ring.
        Larger ring sizes result in more granular load
        distributions. If the number of hosts in the load balancing pool
        is larger than the ring size, each host will be assigned a single
        virtual node.
        Defaults to 1024.
    """


    httpCookie?: ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderConsistentHashHTTPCookie

    httpHeaderName?: str

    minimumRingSize?: float


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderConsistentHashHTTPCookie:
    r"""
    Hash is based on HTTP Cookie. This field describes a HTTP cookie
    that will be used as the hash key for the consistent hash load
    balancer. If the cookie is not present, it will be generated.
    This field is applicable if the sessionAffinity is set to HTTP_COOKIE.
    Structure is documented below.

    Attributes
    ----------
    name : str, default is Undefined, optional
        The name of a locality load balancer policy to be used. The value
        should be one of the predefined ones as supported by localityLbPolicy,
        although at the moment only ROUND_ROBIN is supported.
        This field should only be populated when the customPolicy field is not
        used.
        Note that specifying the same policy more than once for a backend is
        not a valid configuration and will be rejected.
        The possible values are:
    path : str, default is Undefined, optional
        Path to set for the cookie.
    ttl : ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderConsistentHashHTTPCookieTTL, default is Undefined, optional
        ttl
    """


    name?: str

    path?: str

    ttl?: ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderConsistentHashHTTPCookieTTL


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderConsistentHashHTTPCookieTTL:
    r"""
    The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s
    (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.

    Attributes
    ----------
    nanos : float, default is Undefined, optional
        Span of time that's a fraction of a second at nanosecond
        resolution. Durations less than one second are represented
        with a 0 seconds field and a positive nanos field. Must
        be from 0 to 999,999,999 inclusive.
    seconds : float, default is Undefined, optional
        Span of time at a resolution of a second.
        Must be from 0 to 315,576,000,000 inclusive.
    """


    nanos?: float

    seconds?: float


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderHealthChecksRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderHealthChecksRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderHealthChecksRefsItems0Policy


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderHealthChecksRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderHealthChecksSelector:
    r"""
    Selector for a list of HealthCheck in compute to populate healthChecks.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderHealthChecksSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderHealthChecksSelectorPolicy


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderHealthChecksSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderIap:
    r"""
    Settings for enabling Cloud Identity Aware Proxy
    Structure is documented below.

    Attributes
    ----------
    oauth2ClientId : str, default is Undefined, optional
        OAuth2 Client ID for IAP
    oauth2ClientSecretSecretRef : ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderIapOauth2ClientSecretSecretRef, default is Undefined, optional
        oauth2 client secret secret ref
    """


    oauth2ClientId?: str

    oauth2ClientSecretSecretRef?: ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderIapOauth2ClientSecretSecretRef


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderIapOauth2ClientSecretSecretRef:
    r"""
    OAuth2 Client Secret for IAP
    Note: This property is sensitive and will not be displayed in the plan.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    key: str

    name: str

    namespace: str


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderLocalityLbPoliciesItems0:
    r"""
    compute gcp upbound io v1beta2 backend service spec for provider locality lb policies items0

    Attributes
    ----------
    customPolicy : ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderLocalityLbPoliciesItems0CustomPolicy, default is Undefined, optional
        custom policy
    policy : ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderLocalityLbPoliciesItems0Policy, default is Undefined, optional
        policy
    """


    customPolicy?: ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderLocalityLbPoliciesItems0CustomPolicy

    policy?: ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderLocalityLbPoliciesItems0Policy


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderLocalityLbPoliciesItems0CustomPolicy:
    r"""
    The configuration for a custom policy implemented by the user and
    deployed with the client.
    Structure is documented below.

    Attributes
    ----------
    data : str, default is Undefined, optional
        An optional, arbitrary JSON object with configuration data, understood
        by a locally installed custom policy implementation.
    name : str, default is Undefined, optional
        The name of a locality load balancer policy to be used. The value
        should be one of the predefined ones as supported by localityLbPolicy,
        although at the moment only ROUND_ROBIN is supported.
        This field should only be populated when the customPolicy field is not
        used.
        Note that specifying the same policy more than once for a backend is
        not a valid configuration and will be rejected.
        The possible values are:
    """


    data?: str

    name?: str


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderLocalityLbPoliciesItems0Policy:
    r"""
    The configuration for a built-in load balancing policy.
    Structure is documented below.

    Attributes
    ----------
    name : str, default is Undefined, optional
        The name of a locality load balancer policy to be used. The value
        should be one of the predefined ones as supported by localityLbPolicy,
        although at the moment only ROUND_ROBIN is supported.
        This field should only be populated when the customPolicy field is not
        used.
        Note that specifying the same policy more than once for a backend is
        not a valid configuration and will be rejected.
        The possible values are:
    """


    name?: str


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderLogConfig:
    r"""
    This field denotes the logging options for the load balancer traffic served by this backend service.
    If logging is enabled, logs will be exported to Stackdriver.
    Structure is documented below.

    Attributes
    ----------
    enable : bool, default is Undefined, optional
        Whether to enable logging for the load balancer traffic served by this backend service.
    sampleRate : float, default is Undefined, optional
        This field can only be specified if logging is enabled for this backend service. The value of
        the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer
        where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported.
        The default value is 1.0.
    """


    enable?: bool

    sampleRate?: float


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderOutlierDetection:
    r"""
    Settings controlling eviction of unhealthy hosts from the load balancing pool.
    Applicable backend service types can be a global backend service with the
    loadBalancingScheme set to INTERNAL_SELF_MANAGED or EXTERNAL_MANAGED.
    From version 6.0.
    Default values are enforce by GCP without providing them.
    Structure is documented below.

    Attributes
    ----------
    baseEjectionTime : ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderOutlierDetectionBaseEjectionTime, default is Undefined, optional
        base ejection time
    consecutiveErrors : float, default is Undefined, optional
        Number of errors before a host is ejected from the connection pool. When the
        backend host is accessed over HTTP, a 5xx return code qualifies as an error.
        Defaults to 5.
    consecutiveGatewayFailure : float, default is Undefined, optional
        The number of consecutive gateway failures (502, 503, 504 status or connection
        errors that are mapped to one of those status codes) before a consecutive
        gateway failure ejection occurs. Defaults to 5.
    enforcingConsecutiveErrors : float, default is Undefined, optional
        The percentage chance that a host will be actually ejected when an outlier
        status is detected through consecutive 5xx. This setting can be used to disable
        ejection or to ramp it up slowly. Defaults to 100.
    enforcingConsecutiveGatewayFailure : float, default is Undefined, optional
        The percentage chance that a host will be actually ejected when an outlier
        status is detected through consecutive gateway failures. This setting can be
        used to disable ejection or to ramp it up slowly. Defaults to 0.
    enforcingSuccessRate : float, default is Undefined, optional
        The percentage chance that a host will be actually ejected when an outlier
        status is detected through success rate statistics. This setting can be used to
        disable ejection or to ramp it up slowly. Defaults to 100.
    interval : ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderOutlierDetectionInterval, default is Undefined, optional
        interval
    maxEjectionPercent : float, default is Undefined, optional
        Maximum percentage of hosts in the load balancing pool for the backend service
        that can be ejected. Defaults to 10%.
    successRateMinimumHosts : float, default is Undefined, optional
        The number of hosts in a cluster that must have enough request volume to detect
        success rate outliers. If the number of hosts is less than this setting, outlier
        detection via success rate statistics is not performed for any host in the
        cluster. Defaults to 5.
    successRateRequestVolume : float, default is Undefined, optional
        The minimum number of total requests that must be collected in one interval (as
        defined by the interval duration above) to include this host in success rate
        based outlier detection. If the volume is lower than this setting, outlier
        detection via success rate statistics is not performed for that host. Defaults
        to 100.
    successRateStdevFactor : float, default is Undefined, optional
        This factor is used to determine the ejection threshold for success rate outlier
        ejection. The ejection threshold is the difference between the mean success
        rate, and the product of this factor and the standard deviation of the mean
        success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided
        by a thousand to get a double. That is, if the desired factor is 1.9, the
        runtime value should be 1900. Defaults to 1900.
    """


    baseEjectionTime?: ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderOutlierDetectionBaseEjectionTime

    consecutiveErrors?: float

    consecutiveGatewayFailure?: float

    enforcingConsecutiveErrors?: float

    enforcingConsecutiveGatewayFailure?: float

    enforcingSuccessRate?: float

    interval?: ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderOutlierDetectionInterval

    maxEjectionPercent?: float

    successRateMinimumHosts?: float

    successRateRequestVolume?: float

    successRateStdevFactor?: float


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderOutlierDetectionBaseEjectionTime:
    r"""
    The base time that a host is ejected for. The real time is equal to the base
    time multiplied by the number of times the host has been ejected. Defaults to
    30000ms or 30s.
    Structure is documented below.

    Attributes
    ----------
    nanos : float, default is Undefined, optional
        Span of time that's a fraction of a second at nanosecond
        resolution. Durations less than one second are represented
        with a 0 seconds field and a positive nanos field. Must
        be from 0 to 999,999,999 inclusive.
    seconds : float, default is Undefined, optional
        Span of time at a resolution of a second.
        Must be from 0 to 315,576,000,000 inclusive.
    """


    nanos?: float

    seconds?: float


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderOutlierDetectionInterval:
    r"""
    Time interval between ejection sweep analysis. This can result in both new
    ejections as well as hosts being returned to service. Defaults to 10 seconds.
    Structure is documented below.

    Attributes
    ----------
    nanos : float, default is Undefined, optional
        Span of time that's a fraction of a second at nanosecond
        resolution. Durations less than one second are represented
        with a 0 seconds field and a positive nanos field. Must
        be from 0 to 999,999,999 inclusive.
    seconds : float, default is Undefined, optional
        Span of time at a resolution of a second.
        Must be from 0 to 315,576,000,000 inclusive.
    """


    nanos?: float

    seconds?: float


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderSecuritySettings:
    r"""
    The security settings that apply to this backend service. This field is applicable to either
    a regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and
    load_balancing_scheme set to INTERNAL_MANAGED; or a global backend service with the
    load_balancing_scheme set to INTERNAL_SELF_MANAGED.
    Structure is documented below.

    Attributes
    ----------
    awsV4Authentication : ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderSecuritySettingsAwsV4Authentication, default is Undefined, optional
        aws v4 authentication
    clientTlsPolicy : str, default is Undefined, optional
        ClientTlsPolicy is a resource that specifies how a client should authenticate
        connections to backends of a service. This resource itself does not affect
        configuration unless it is attached to a backend service resource.
    subjectAltNames : [str], default is Undefined, optional
        A list of alternate names to verify the subject identity in the certificate.
        If specified, the client will verify that the server certificate's subject
        alt name matches one of the specified values.
    """


    awsV4Authentication?: ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderSecuritySettingsAwsV4Authentication

    clientTlsPolicy?: str

    subjectAltNames?: [str]


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderSecuritySettingsAwsV4Authentication:
    r"""
    The configuration needed to generate a signature for access to private storage buckets that support AWS's Signature Version 4 for authentication.
    Allowed only for INTERNET_IP_PORT and INTERNET_FQDN_PORT NEG backends.
    Structure is documented below.

    Attributes
    ----------
    accessKeyId : str, default is Undefined, optional
        The identifier of an access key used for s3 bucket authentication.
    accessKeySecretRef : ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderSecuritySettingsAwsV4AuthenticationAccessKeySecretRef, default is Undefined, optional
        access key secret ref
    accessKeyVersion : str, default is Undefined, optional
        The optional version identifier for the access key. You can use this to keep track of different iterations of your access key.
    originRegion : str, default is Undefined, optional
        The name of the cloud region of your origin. This is a free-form field with the name of the region your cloud uses to host your origin.
        For example, "us-east-1" for AWS or "us-ashburn-1" for OCI.
    """


    accessKeyId?: str

    accessKeySecretRef?: ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderSecuritySettingsAwsV4AuthenticationAccessKeySecretRef

    accessKeyVersion?: str

    originRegion?: str


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecForProviderSecuritySettingsAwsV4AuthenticationAccessKeySecretRef:
    r"""
    The access key used for s3 bucket authentication.
    Required for updating or creating a backend that uses AWS v4 signature authentication, but will not be returned as part of the configuration when queried with a REST API GET request.
    Note: This property is sensitive and will not be displayed in the plan.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    key: str

    name: str

    namespace: str


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    affinityCookieTtlSec : float, default is Undefined, optional
        Lifetime of cookies in seconds if session_affinity is
        GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts
        only until the end of the browser session (or equivalent). The
        maximum allowed value for TTL is one day.
        When the load balancing scheme is INTERNAL, this field is not used.
    backend : [ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderBackendItems0], default is Undefined, optional
        The set of backends that serve this BackendService.
        Structure is documented below.
    cdnPolicy : ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderCdnPolicy, default is Undefined, optional
        cdn policy
    circuitBreakers : ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderCircuitBreakers, default is Undefined, optional
        circuit breakers
    compressionMode : str, default is Undefined, optional
        Compress text responses using Brotli or gzip compression, based on the client's Accept-Encoding header.
        Possible values are: AUTOMATIC, DISABLED.
    connectionDrainingTimeoutSec : float, default is Undefined, optional
        Time for which instance will be drained (not accept new
        connections, but still work to finish started).
    consistentHash : ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderConsistentHash, default is Undefined, optional
        consistent hash
    customRequestHeaders : [str], default is Undefined, optional
        Headers that the HTTP/S load balancer should add to proxied
        requests.
    customResponseHeaders : [str], default is Undefined, optional
        Headers that the HTTP/S load balancer should add to proxied
        responses.
    description : str, default is Undefined, optional
        An optional description of this resource.
    edgeSecurityPolicy : str, default is Undefined, optional
        The resource URL for the edge security policy associated with this backend service.
    enableCdn : bool, default is Undefined, optional
        If true, enable Cloud CDN for this BackendService.
    healthChecks : [str], default is Undefined, optional
        The set of URLs to the HttpHealthCheck or HttpsHealthCheck resource
        for health checking this BackendService. Currently at most one health
        check can be specified.
        A health check must be specified unless the backend service uses an internet
        or serverless NEG as a backend.
        For internal load balancing, a URL to a HealthCheck resource must be specified instead.
    healthChecksRefs : [ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderHealthChecksRefsItems0], default is Undefined, optional
        References to HealthCheck in compute to populate healthChecks.
    healthChecksSelector : ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderHealthChecksSelector, default is Undefined, optional
        health checks selector
    iap : ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderIap, default is Undefined, optional
        iap
    loadBalancingScheme : str, default is Undefined, optional
        Indicates whether the backend service will be used with internal or
        external load balancing. A backend service created for one type of
        load balancing cannot be used with the other. For more information, refer to
        Choosing a load balancer.
        Default value is EXTERNAL.
        Possible values are: EXTERNAL, INTERNAL_SELF_MANAGED, INTERNAL_MANAGED, EXTERNAL_MANAGED.
    localityLbPolicies : [ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderLocalityLbPoliciesItems0], default is Undefined, optional
        A list of locality load balancing policies to be used in order of
        preference. Either the policy or the customPolicy field should be set.
        Overrides any value set in the localityLbPolicy field.
        localityLbPolicies is only supported when the BackendService is referenced
        by a URL Map that is referenced by a target gRPC proxy that has the
        validateForProxyless field set to true.
        Structure is documented below.
    localityLbPolicy : str, default is Undefined, optional
        The load balancing algorithm used within the scope of the locality.
        The possible values are:
    logConfig : ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderLogConfig, default is Undefined, optional
        log config
    outlierDetection : ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderOutlierDetection, default is Undefined, optional
        outlier detection
    portName : str, default is Undefined, optional
        Name of backend port. The same name should appear in the instance
        groups referenced by this service. Required when the load balancing
        scheme is EXTERNAL.
    project : str, default is Undefined, optional
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
    $protocol : str, default is Undefined, optional
        The protocol this BackendService uses to communicate with backends.
        The default is HTTP. NOTE: HTTP2 is only valid for beta HTTP/2 load balancer
        types and may result in errors if used with the GA API. NOTE: With protocol “UNSPECIFIED”,
        the backend service can be used by Layer 4 Internal Load Balancing or Network Load Balancing
        with TCP/UDP/L3_DEFAULT Forwarding Rule protocol.
        Possible values are: HTTP, HTTPS, HTTP2, TCP, SSL, GRPC, UNSPECIFIED.
    securityPolicy : str, default is Undefined, optional
        The security policy associated with this backend service.
    securitySettings : ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderSecuritySettings, default is Undefined, optional
        security settings
    serviceLbPolicy : str, default is Undefined, optional
        URL to networkservices.ServiceLbPolicy resource.
        Can only be set if load balancing scheme is EXTERNAL, EXTERNAL_MANAGED, INTERNAL_MANAGED or INTERNAL_SELF_MANAGED and the scope is global.
    sessionAffinity : str, default is Undefined, optional
        Type of session affinity to use. The default is NONE. Session affinity is
        not applicable if the protocol is UDP.
        Possible values are: NONE, CLIENT_IP, CLIENT_IP_PORT_PROTO, CLIENT_IP_PROTO, GENERATED_COOKIE, HEADER_FIELD, HTTP_COOKIE.
    timeoutSec : float, default is Undefined, optional
        The backend service timeout has a different meaning depending on the type of load balancer.
        For more information see, Backend service settings.
        The default is 30 seconds.
        The full range of timeout values allowed goes from 1 through 2,147,483,647 seconds.
    """


    affinityCookieTtlSec?: float

    backend?: [ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderBackendItems0]

    cdnPolicy?: ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderCdnPolicy

    circuitBreakers?: ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderCircuitBreakers

    compressionMode?: str

    connectionDrainingTimeoutSec?: float

    consistentHash?: ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderConsistentHash

    customRequestHeaders?: [str]

    customResponseHeaders?: [str]

    description?: str

    edgeSecurityPolicy?: str

    enableCdn?: bool

    healthChecks?: [str]

    healthChecksRefs?: [ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderHealthChecksRefsItems0]

    healthChecksSelector?: ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderHealthChecksSelector

    iap?: ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderIap

    loadBalancingScheme?: str

    localityLbPolicies?: [ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderLocalityLbPoliciesItems0]

    localityLbPolicy?: str

    logConfig?: ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderLogConfig

    outlierDetection?: ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderOutlierDetection

    portName?: str

    project?: str

    $protocol?: str

    securityPolicy?: str

    securitySettings?: ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderSecuritySettings

    serviceLbPolicy?: str

    sessionAffinity?: str

    timeoutSec?: float


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderBackendItems0:
    r"""
    compute gcp upbound io v1beta2 backend service spec init provider backend items0

    Attributes
    ----------
    balancingMode : str, default is Undefined, optional
        Specifies the balancing mode for this backend.
        For global HTTP(S) or TCP/SSL load balancing, the default is
        UTILIZATION. Valid values are UTILIZATION, RATE (for HTTP(S))
        and CONNECTION (for TCP/SSL).
        See the Backend Services Overview
        for an explanation of load balancing modes.
        From version 6.0.0 default value will be UTILIZATION to match default GCP value.
        Default value is UTILIZATION.
        Possible values are: UTILIZATION, RATE, CONNECTION.
    capacityScaler : float, default is Undefined, optional
        A multiplier applied to the group's maximum servicing capacity
        (based on UTILIZATION, RATE or CONNECTION).
        Default value is 1, which means the group will serve up to 100%
        of its configured capacity (depending on balancingMode). A
        setting of 0 means the group is completely drained, offering
        0% of its available Capacity. Valid range is [0.0,1.0].
    description : str, default is Undefined, optional
        An optional description of this resource.
        Provide this property when you create the resource.
    group : str, default is Undefined, optional
        The fully-qualified URL of an Instance Group or Network Endpoint
        Group resource. In case of instance group this defines the list
        of instances that serve traffic. Member virtual machine
        instances from each instance group must live in the same zone as
        the instance group itself. No two backends in a backend service
        are allowed to use same Instance Group resource.
        For Network Endpoint Groups this defines list of endpoints. All
        endpoints of Network Endpoint Group must be hosted on instances
        located in the same zone as the Network Endpoint Group.
        Backend services cannot mix Instance Group and
        Network Endpoint Group backends.
        Note that you must specify an Instance Group or Network Endpoint
        Group resource using the fully-qualified URL, rather than a
        partial URL.
    groupRef : ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderBackendItems0GroupRef, default is Undefined, optional
        group ref
    groupSelector : ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderBackendItems0GroupSelector, default is Undefined, optional
        group selector
    maxConnections : float, default is Undefined, optional
        The max number of simultaneous connections for the group. Can
        be used with either CONNECTION or UTILIZATION balancing modes.
        For CONNECTION mode, either maxConnections or one
        of maxConnectionsPerInstance or maxConnectionsPerEndpoint,
        as appropriate for group type, must be set.
    maxConnectionsPerEndpoint : float, default is Undefined, optional
        The max number of simultaneous connections that a single backend
        network endpoint can handle. This is used to calculate the
        capacity of the group. Can be used in either CONNECTION or
        UTILIZATION balancing modes.
        For CONNECTION mode, either
        maxConnections or maxConnectionsPerEndpoint must be set.
    maxConnectionsPerInstance : float, default is Undefined, optional
        The max number of simultaneous connections that a single
        backend instance can handle. This is used to calculate the
        capacity of the group. Can be used in either CONNECTION or
        UTILIZATION balancing modes.
        For CONNECTION mode, either maxConnections or
        maxConnectionsPerInstance must be set.
    maxRate : float, default is Undefined, optional
        The max requests per second (RPS) of the group.
        Can be used with either RATE or UTILIZATION balancing modes,
        but required if RATE mode. For RATE mode, either maxRate or one
        of maxRatePerInstance or maxRatePerEndpoint, as appropriate for
        group type, must be set.
    maxRatePerEndpoint : float, default is Undefined, optional
        The max requests per second (RPS) that a single backend network
        endpoint can handle. This is used to calculate the capacity of
        the group. Can be used in either balancing mode. For RATE mode,
        either maxRate or maxRatePerEndpoint must be set.
    maxRatePerInstance : float, default is Undefined, optional
        The max requests per second (RPS) that a single backend
        instance can handle. This is used to calculate the capacity of
        the group. Can be used in either balancing mode. For RATE mode,
        either maxRate or maxRatePerInstance must be set.
    maxUtilization : float, default is Undefined, optional
        Used when balancingMode is UTILIZATION. This ratio defines the
        CPU utilization target for the group. Valid range is [0.0, 1.0].
    """


    balancingMode?: str

    capacityScaler?: float

    description?: str

    group?: str

    groupRef?: ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderBackendItems0GroupRef

    groupSelector?: ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderBackendItems0GroupSelector

    maxConnections?: float

    maxConnectionsPerEndpoint?: float

    maxConnectionsPerInstance?: float

    maxRate?: float

    maxRatePerEndpoint?: float

    maxRatePerInstance?: float

    maxUtilization?: float


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderBackendItems0GroupRef:
    r"""
    Reference to a InstanceGroupManager in compute to populate group.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderBackendItems0GroupRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderBackendItems0GroupRefPolicy


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderBackendItems0GroupRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderBackendItems0GroupSelector:
    r"""
    Selector for a InstanceGroupManager in compute to populate group.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderBackendItems0GroupSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderBackendItems0GroupSelectorPolicy


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderBackendItems0GroupSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderCdnPolicy:
    r"""
    Cloud CDN configuration for this BackendService.
    Structure is documented below.

    Attributes
    ----------
    bypassCacheOnRequestHeaders : [ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderCdnPolicyBypassCacheOnRequestHeadersItems0], default is Undefined, optional
        Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified.
        The cache is bypassed for all cdnPolicy.cacheMode settings.
        Structure is documented below.
    cacheKeyPolicy : ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderCdnPolicyCacheKeyPolicy, default is Undefined, optional
        cache key policy
    cacheMode : str, default is Undefined, optional
        Specifies the cache setting for all responses from this backend.
        The possible values are: USE_ORIGIN_HEADERS, FORCE_CACHE_ALL and CACHE_ALL_STATIC
        Possible values are: USE_ORIGIN_HEADERS, FORCE_CACHE_ALL, CACHE_ALL_STATIC.
    clientTtl : float, default is Undefined, optional
        Specifies the maximum allowed TTL for cached content served by this origin.
    defaultTtl : float, default is Undefined, optional
        Specifies the default TTL for cached content served by this origin for responses
        that do not have an existing valid TTL (max-age or s-max-age).
    maxTtl : float, default is Undefined, optional
        Specifies the maximum allowed TTL for cached content served by this origin.
    negativeCaching : bool, default is Undefined, optional
        Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects.
    negativeCachingPolicy : [ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderCdnPolicyNegativeCachingPolicyItems0], default is Undefined, optional
        Sets a cache TTL for the specified HTTP status code. negativeCaching must be enabled to configure negativeCachingPolicy.
        Omitting the policy and leaving negativeCaching enabled will use Cloud CDN's default cache TTLs.
        Structure is documented below.
    serveWhileStale : float, default is Undefined, optional
        Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache.
    signedUrlCacheMaxAgeSec : float, default is Undefined, optional
        Maximum number of seconds the response to a signed URL request
        will be considered fresh, defaults to 1hr (3600s). After this
        time period, the response will be revalidated before
        being served.
        When serving responses to signed URL requests, Cloud CDN will
        internally behave as though all responses from this backend had a
        "Cache-Control: public, max-age=[TTL]" header, regardless of any
        existing Cache-Control header. The actual headers served in
        responses will not be altered.
    """


    bypassCacheOnRequestHeaders?: [ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderCdnPolicyBypassCacheOnRequestHeadersItems0]

    cacheKeyPolicy?: ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderCdnPolicyCacheKeyPolicy

    cacheMode?: str

    clientTtl?: float

    defaultTtl?: float

    maxTtl?: float

    negativeCaching?: bool

    negativeCachingPolicy?: [ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderCdnPolicyNegativeCachingPolicyItems0]

    serveWhileStale?: float

    signedUrlCacheMaxAgeSec?: float


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderCdnPolicyBypassCacheOnRequestHeadersItems0:
    r"""
    compute gcp upbound io v1beta2 backend service spec init provider cdn policy bypass cache on request headers items0

    Attributes
    ----------
    headerName : str, default is Undefined, optional
        The header field name to match on when bypassing cache. Values are case-insensitive.
    """


    headerName?: str


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderCdnPolicyCacheKeyPolicy:
    r"""
    The CacheKeyPolicy for this CdnPolicy.
    Structure is documented below.

    Attributes
    ----------
    includeHost : bool, default is Undefined, optional
        If true requests to different hosts will be cached separately.
    includeHttpHeaders : [str], default is Undefined, optional
        Allows HTTP request headers (by name) to be used in the
        cache key.
    includeNamedCookies : [str], default is Undefined, optional
        Names of cookies to include in cache keys.
    includeProtocol : bool, default is Undefined, optional
        If true, http and https requests will be cached separately.
    includeQueryString : bool, default is Undefined, optional
        If true, include query string parameters in the cache key
        according to query_string_whitelist and
        query_string_blacklist. If neither is set, the entire query
        string will be included.
        If false, the query string will be excluded from the cache
        key entirely.
    queryStringBlacklist : [str], default is Undefined, optional
        Names of query string parameters to exclude in cache keys.
        All other parameters will be included. Either specify
        query_string_whitelist or query_string_blacklist, not both.
        '&' and '=' will be percent encoded and not treated as
        delimiters.
    queryStringWhitelist : [str], default is Undefined, optional
        Names of query string parameters to include in cache keys.
        All other parameters will be excluded. Either specify
        query_string_whitelist or query_string_blacklist, not both.
        '&' and '=' will be percent encoded and not treated as
        delimiters.
    """


    includeHost?: bool

    includeHttpHeaders?: [str]

    includeNamedCookies?: [str]

    includeProtocol?: bool

    includeQueryString?: bool

    queryStringBlacklist?: [str]

    queryStringWhitelist?: [str]


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderCdnPolicyNegativeCachingPolicyItems0:
    r"""
    compute gcp upbound io v1beta2 backend service spec init provider cdn policy negative caching policy items0

    Attributes
    ----------
    code : float, default is Undefined, optional
        The HTTP status code to define a TTL against. Only HTTP status codes 300, 301, 308, 404, 405, 410, 421, 451 and 501
        can be specified as values, and you cannot specify a status code more than once.
    ttl : float, default is Undefined, optional
        The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s
        (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
    """


    code?: float

    ttl?: float


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderCircuitBreakers:
    r"""
    Settings controlling the volume of connections to a backend service. This field
    is applicable only when the load_balancing_scheme is set to INTERNAL_SELF_MANAGED.
    Structure is documented below.

    Attributes
    ----------
    maxConnections : float, default is Undefined, optional
        The maximum number of connections to the backend cluster.
        Defaults to 1024.
    maxPendingRequests : float, default is Undefined, optional
        The maximum number of pending requests to the backend cluster.
        Defaults to 1024.
    maxRequests : float, default is Undefined, optional
        The maximum number of parallel requests to the backend cluster.
        Defaults to 1024.
    maxRequestsPerConnection : float, default is Undefined, optional
        Maximum requests for a single backend connection. This parameter
        is respected by both the HTTP/1.1 and HTTP/2 implementations. If
        not specified, there is no limit. Setting this parameter to 1
        will effectively disable keep alive.
    maxRetries : float, default is Undefined, optional
        The maximum number of parallel retries to the backend cluster.
        Defaults to 3.
    """


    maxConnections?: float

    maxPendingRequests?: float

    maxRequests?: float

    maxRequestsPerConnection?: float

    maxRetries?: float


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderConsistentHash:
    r"""
    Consistent Hash-based load balancing can be used to provide soft session
    affinity based on HTTP headers, cookies or other properties. This load balancing
    policy is applicable only for HTTP connections. The affinity to a particular
    destination host will be lost when one or more hosts are added/removed from the
    destination service. This field specifies parameters that control consistent
    hashing. This field only applies if the load_balancing_scheme is set to
    INTERNAL_SELF_MANAGED. This field is only applicable when locality_lb_policy is
    set to MAGLEV or RING_HASH.
    Structure is documented below.

    Attributes
    ----------
    httpCookie : ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderConsistentHashHTTPCookie, default is Undefined, optional
        http cookie
    httpHeaderName : str, default is Undefined, optional
        The hash based on the value of the specified header field.
        This field is applicable if the sessionAffinity is set to HEADER_FIELD.
    minimumRingSize : float, default is Undefined, optional
        The minimum number of virtual nodes to use for the hash ring.
        Larger ring sizes result in more granular load
        distributions. If the number of hosts in the load balancing pool
        is larger than the ring size, each host will be assigned a single
        virtual node.
        Defaults to 1024.
    """


    httpCookie?: ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderConsistentHashHTTPCookie

    httpHeaderName?: str

    minimumRingSize?: float


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderConsistentHashHTTPCookie:
    r"""
    Hash is based on HTTP Cookie. This field describes a HTTP cookie
    that will be used as the hash key for the consistent hash load
    balancer. If the cookie is not present, it will be generated.
    This field is applicable if the sessionAffinity is set to HTTP_COOKIE.
    Structure is documented below.

    Attributes
    ----------
    name : str, default is Undefined, optional
        The name of a locality load balancer policy to be used. The value
        should be one of the predefined ones as supported by localityLbPolicy,
        although at the moment only ROUND_ROBIN is supported.
        This field should only be populated when the customPolicy field is not
        used.
        Note that specifying the same policy more than once for a backend is
        not a valid configuration and will be rejected.
        The possible values are:
    path : str, default is Undefined, optional
        Path to set for the cookie.
    ttl : ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderConsistentHashHTTPCookieTTL, default is Undefined, optional
        ttl
    """


    name?: str

    path?: str

    ttl?: ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderConsistentHashHTTPCookieTTL


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderConsistentHashHTTPCookieTTL:
    r"""
    The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s
    (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.

    Attributes
    ----------
    nanos : float, default is Undefined, optional
        Span of time that's a fraction of a second at nanosecond
        resolution. Durations less than one second are represented
        with a 0 seconds field and a positive nanos field. Must
        be from 0 to 999,999,999 inclusive.
    seconds : float, default is Undefined, optional
        Span of time at a resolution of a second.
        Must be from 0 to 315,576,000,000 inclusive.
    """


    nanos?: float

    seconds?: float


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderHealthChecksRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderHealthChecksRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderHealthChecksRefsItems0Policy


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderHealthChecksRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderHealthChecksSelector:
    r"""
    Selector for a list of HealthCheck in compute to populate healthChecks.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderHealthChecksSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderHealthChecksSelectorPolicy


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderHealthChecksSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderIap:
    r"""
    Settings for enabling Cloud Identity Aware Proxy
    Structure is documented below.

    Attributes
    ----------
    oauth2ClientId : str, default is Undefined, optional
        OAuth2 Client ID for IAP
    oauth2ClientSecretSecretRef : ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderIapOauth2ClientSecretSecretRef, default is Undefined, required
        oauth2 client secret secret ref
    """


    oauth2ClientId?: str

    oauth2ClientSecretSecretRef: ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderIapOauth2ClientSecretSecretRef


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderIapOauth2ClientSecretSecretRef:
    r"""
    OAuth2 Client Secret for IAP
    Note: This property is sensitive and will not be displayed in the plan.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    key: str

    name: str

    namespace: str


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderLocalityLbPoliciesItems0:
    r"""
    compute gcp upbound io v1beta2 backend service spec init provider locality lb policies items0

    Attributes
    ----------
    customPolicy : ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderLocalityLbPoliciesItems0CustomPolicy, default is Undefined, optional
        custom policy
    policy : ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderLocalityLbPoliciesItems0Policy, default is Undefined, optional
        policy
    """


    customPolicy?: ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderLocalityLbPoliciesItems0CustomPolicy

    policy?: ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderLocalityLbPoliciesItems0Policy


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderLocalityLbPoliciesItems0CustomPolicy:
    r"""
    The configuration for a custom policy implemented by the user and
    deployed with the client.
    Structure is documented below.

    Attributes
    ----------
    data : str, default is Undefined, optional
        An optional, arbitrary JSON object with configuration data, understood
        by a locally installed custom policy implementation.
    name : str, default is Undefined, optional
        The name of a locality load balancer policy to be used. The value
        should be one of the predefined ones as supported by localityLbPolicy,
        although at the moment only ROUND_ROBIN is supported.
        This field should only be populated when the customPolicy field is not
        used.
        Note that specifying the same policy more than once for a backend is
        not a valid configuration and will be rejected.
        The possible values are:
    """


    data?: str

    name?: str


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderLocalityLbPoliciesItems0Policy:
    r"""
    The configuration for a built-in load balancing policy.
    Structure is documented below.

    Attributes
    ----------
    name : str, default is Undefined, optional
        The name of a locality load balancer policy to be used. The value
        should be one of the predefined ones as supported by localityLbPolicy,
        although at the moment only ROUND_ROBIN is supported.
        This field should only be populated when the customPolicy field is not
        used.
        Note that specifying the same policy more than once for a backend is
        not a valid configuration and will be rejected.
        The possible values are:
    """


    name?: str


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderLogConfig:
    r"""
    This field denotes the logging options for the load balancer traffic served by this backend service.
    If logging is enabled, logs will be exported to Stackdriver.
    Structure is documented below.

    Attributes
    ----------
    enable : bool, default is Undefined, optional
        Whether to enable logging for the load balancer traffic served by this backend service.
    sampleRate : float, default is Undefined, optional
        This field can only be specified if logging is enabled for this backend service. The value of
        the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer
        where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported.
        The default value is 1.0.
    """


    enable?: bool

    sampleRate?: float


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderOutlierDetection:
    r"""
    Settings controlling eviction of unhealthy hosts from the load balancing pool.
    Applicable backend service types can be a global backend service with the
    loadBalancingScheme set to INTERNAL_SELF_MANAGED or EXTERNAL_MANAGED.
    From version 6.0.
    Default values are enforce by GCP without providing them.
    Structure is documented below.

    Attributes
    ----------
    baseEjectionTime : ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderOutlierDetectionBaseEjectionTime, default is Undefined, optional
        base ejection time
    consecutiveErrors : float, default is Undefined, optional
        Number of errors before a host is ejected from the connection pool. When the
        backend host is accessed over HTTP, a 5xx return code qualifies as an error.
        Defaults to 5.
    consecutiveGatewayFailure : float, default is Undefined, optional
        The number of consecutive gateway failures (502, 503, 504 status or connection
        errors that are mapped to one of those status codes) before a consecutive
        gateway failure ejection occurs. Defaults to 5.
    enforcingConsecutiveErrors : float, default is Undefined, optional
        The percentage chance that a host will be actually ejected when an outlier
        status is detected through consecutive 5xx. This setting can be used to disable
        ejection or to ramp it up slowly. Defaults to 100.
    enforcingConsecutiveGatewayFailure : float, default is Undefined, optional
        The percentage chance that a host will be actually ejected when an outlier
        status is detected through consecutive gateway failures. This setting can be
        used to disable ejection or to ramp it up slowly. Defaults to 0.
    enforcingSuccessRate : float, default is Undefined, optional
        The percentage chance that a host will be actually ejected when an outlier
        status is detected through success rate statistics. This setting can be used to
        disable ejection or to ramp it up slowly. Defaults to 100.
    interval : ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderOutlierDetectionInterval, default is Undefined, optional
        interval
    maxEjectionPercent : float, default is Undefined, optional
        Maximum percentage of hosts in the load balancing pool for the backend service
        that can be ejected. Defaults to 10%.
    successRateMinimumHosts : float, default is Undefined, optional
        The number of hosts in a cluster that must have enough request volume to detect
        success rate outliers. If the number of hosts is less than this setting, outlier
        detection via success rate statistics is not performed for any host in the
        cluster. Defaults to 5.
    successRateRequestVolume : float, default is Undefined, optional
        The minimum number of total requests that must be collected in one interval (as
        defined by the interval duration above) to include this host in success rate
        based outlier detection. If the volume is lower than this setting, outlier
        detection via success rate statistics is not performed for that host. Defaults
        to 100.
    successRateStdevFactor : float, default is Undefined, optional
        This factor is used to determine the ejection threshold for success rate outlier
        ejection. The ejection threshold is the difference between the mean success
        rate, and the product of this factor and the standard deviation of the mean
        success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided
        by a thousand to get a double. That is, if the desired factor is 1.9, the
        runtime value should be 1900. Defaults to 1900.
    """


    baseEjectionTime?: ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderOutlierDetectionBaseEjectionTime

    consecutiveErrors?: float

    consecutiveGatewayFailure?: float

    enforcingConsecutiveErrors?: float

    enforcingConsecutiveGatewayFailure?: float

    enforcingSuccessRate?: float

    interval?: ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderOutlierDetectionInterval

    maxEjectionPercent?: float

    successRateMinimumHosts?: float

    successRateRequestVolume?: float

    successRateStdevFactor?: float


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderOutlierDetectionBaseEjectionTime:
    r"""
    The base time that a host is ejected for. The real time is equal to the base
    time multiplied by the number of times the host has been ejected. Defaults to
    30000ms or 30s.
    Structure is documented below.

    Attributes
    ----------
    nanos : float, default is Undefined, optional
        Span of time that's a fraction of a second at nanosecond
        resolution. Durations less than one second are represented
        with a 0 seconds field and a positive nanos field. Must
        be from 0 to 999,999,999 inclusive.
    seconds : float, default is Undefined, optional
        Span of time at a resolution of a second.
        Must be from 0 to 315,576,000,000 inclusive.
    """


    nanos?: float

    seconds?: float


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderOutlierDetectionInterval:
    r"""
    Time interval between ejection sweep analysis. This can result in both new
    ejections as well as hosts being returned to service. Defaults to 10 seconds.
    Structure is documented below.

    Attributes
    ----------
    nanos : float, default is Undefined, optional
        Span of time that's a fraction of a second at nanosecond
        resolution. Durations less than one second are represented
        with a 0 seconds field and a positive nanos field. Must
        be from 0 to 999,999,999 inclusive.
    seconds : float, default is Undefined, optional
        Span of time at a resolution of a second.
        Must be from 0 to 315,576,000,000 inclusive.
    """


    nanos?: float

    seconds?: float


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderSecuritySettings:
    r"""
    The security settings that apply to this backend service. This field is applicable to either
    a regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and
    load_balancing_scheme set to INTERNAL_MANAGED; or a global backend service with the
    load_balancing_scheme set to INTERNAL_SELF_MANAGED.
    Structure is documented below.

    Attributes
    ----------
    awsV4Authentication : ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderSecuritySettingsAwsV4Authentication, default is Undefined, optional
        aws v4 authentication
    clientTlsPolicy : str, default is Undefined, optional
        ClientTlsPolicy is a resource that specifies how a client should authenticate
        connections to backends of a service. This resource itself does not affect
        configuration unless it is attached to a backend service resource.
    subjectAltNames : [str], default is Undefined, optional
        A list of alternate names to verify the subject identity in the certificate.
        If specified, the client will verify that the server certificate's subject
        alt name matches one of the specified values.
    """


    awsV4Authentication?: ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderSecuritySettingsAwsV4Authentication

    clientTlsPolicy?: str

    subjectAltNames?: [str]


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderSecuritySettingsAwsV4Authentication:
    r"""
    The configuration needed to generate a signature for access to private storage buckets that support AWS's Signature Version 4 for authentication.
    Allowed only for INTERNET_IP_PORT and INTERNET_FQDN_PORT NEG backends.
    Structure is documented below.

    Attributes
    ----------
    accessKeyId : str, default is Undefined, optional
        The identifier of an access key used for s3 bucket authentication.
    accessKeySecretRef : ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderSecuritySettingsAwsV4AuthenticationAccessKeySecretRef, default is Undefined, optional
        access key secret ref
    accessKeyVersion : str, default is Undefined, optional
        The optional version identifier for the access key. You can use this to keep track of different iterations of your access key.
    originRegion : str, default is Undefined, optional
        The name of the cloud region of your origin. This is a free-form field with the name of the region your cloud uses to host your origin.
        For example, "us-east-1" for AWS or "us-ashburn-1" for OCI.
    """


    accessKeyId?: str

    accessKeySecretRef?: ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderSecuritySettingsAwsV4AuthenticationAccessKeySecretRef

    accessKeyVersion?: str

    originRegion?: str


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecInitProviderSecuritySettingsAwsV4AuthenticationAccessKeySecretRef:
    r"""
    The access key used for s3 bucket authentication.
    Required for updating or creating a backend that uses AWS v4 signature authentication, but will not be returned as part of the configuration when queried with a REST API GET request.
    Note: This property is sensitive and will not be displayed in the plan.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    key: str

    name: str

    namespace: str


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ComputeGcpUpboundIoV1beta2BackendServiceSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ComputeGcpUpboundIoV1beta2BackendServiceSpecProviderConfigRefPolicy


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : ComputeGcpUpboundIoV1beta2BackendServiceSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : ComputeGcpUpboundIoV1beta2BackendServiceSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: ComputeGcpUpboundIoV1beta2BackendServiceSpecPublishConnectionDetailsToConfigRef

    metadata?: ComputeGcpUpboundIoV1beta2BackendServiceSpecPublishConnectionDetailsToMetadata

    name: str


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ComputeGcpUpboundIoV1beta2BackendServiceSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ComputeGcpUpboundIoV1beta2BackendServiceSpecPublishConnectionDetailsToConfigRefPolicy


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema ComputeGcpUpboundIoV1beta2BackendServiceSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema ComputeGcpUpboundIoV1beta2BackendServiceStatus:
    r"""
    BackendServiceStatus defines the observed state of BackendService.

    Attributes
    ----------
    atProvider : ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [ComputeGcpUpboundIoV1beta2BackendServiceStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProvider

    conditions?: [ComputeGcpUpboundIoV1beta2BackendServiceStatusConditionsItems0]

    observedGeneration?: int


schema ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProvider:
    r"""
    compute gcp upbound io v1beta2 backend service status at provider

    Attributes
    ----------
    affinityCookieTtlSec : float, default is Undefined, optional
        Lifetime of cookies in seconds if session_affinity is
        GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts
        only until the end of the browser session (or equivalent). The
        maximum allowed value for TTL is one day.
        When the load balancing scheme is INTERNAL, this field is not used.
    backend : [ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderBackendItems0], default is Undefined, optional
        The set of backends that serve this BackendService.
        Structure is documented below.
    cdnPolicy : ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderCdnPolicy, default is Undefined, optional
        cdn policy
    circuitBreakers : ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderCircuitBreakers, default is Undefined, optional
        circuit breakers
    compressionMode : str, default is Undefined, optional
        Compress text responses using Brotli or gzip compression, based on the client's Accept-Encoding header.
        Possible values are: AUTOMATIC, DISABLED.
    connectionDrainingTimeoutSec : float, default is Undefined, optional
        Time for which instance will be drained (not accept new
        connections, but still work to finish started).
    consistentHash : ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderConsistentHash, default is Undefined, optional
        consistent hash
    creationTimestamp : str, default is Undefined, optional
        Creation timestamp in RFC3339 text format.
    customRequestHeaders : [str], default is Undefined, optional
        Headers that the HTTP/S load balancer should add to proxied
        requests.
    customResponseHeaders : [str], default is Undefined, optional
        Headers that the HTTP/S load balancer should add to proxied
        responses.
    description : str, default is Undefined, optional
        An optional description of this resource.
    edgeSecurityPolicy : str, default is Undefined, optional
        The resource URL for the edge security policy associated with this backend service.
    enableCdn : bool, default is Undefined, optional
        If true, enable Cloud CDN for this BackendService.
    fingerprint : str, default is Undefined, optional
        Fingerprint of this resource. A hash of the contents stored in this
        object. This field is used in optimistic locking.
    generatedId : float, default is Undefined, optional
        The unique identifier for the resource. This identifier is defined by the server.
    healthChecks : [str], default is Undefined, optional
        The set of URLs to the HttpHealthCheck or HttpsHealthCheck resource
        for health checking this BackendService. Currently at most one health
        check can be specified.
        A health check must be specified unless the backend service uses an internet
        or serverless NEG as a backend.
        For internal load balancing, a URL to a HealthCheck resource must be specified instead.
    iap : ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderIap, default is Undefined, optional
        iap
    id : str, default is Undefined, optional
        an identifier for the resource with format projects/{{project}}/global/backendServices/{{name}}
    loadBalancingScheme : str, default is Undefined, optional
        Indicates whether the backend service will be used with internal or
        external load balancing. A backend service created for one type of
        load balancing cannot be used with the other. For more information, refer to
        Choosing a load balancer.
        Default value is EXTERNAL.
        Possible values are: EXTERNAL, INTERNAL_SELF_MANAGED, INTERNAL_MANAGED, EXTERNAL_MANAGED.
    localityLbPolicies : [ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderLocalityLbPoliciesItems0], default is Undefined, optional
        A list of locality load balancing policies to be used in order of
        preference. Either the policy or the customPolicy field should be set.
        Overrides any value set in the localityLbPolicy field.
        localityLbPolicies is only supported when the BackendService is referenced
        by a URL Map that is referenced by a target gRPC proxy that has the
        validateForProxyless field set to true.
        Structure is documented below.
    localityLbPolicy : str, default is Undefined, optional
        The load balancing algorithm used within the scope of the locality.
        The possible values are:
    logConfig : ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderLogConfig, default is Undefined, optional
        log config
    outlierDetection : ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderOutlierDetection, default is Undefined, optional
        outlier detection
    portName : str, default is Undefined, optional
        Name of backend port. The same name should appear in the instance
        groups referenced by this service. Required when the load balancing
        scheme is EXTERNAL.
    project : str, default is Undefined, optional
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
    $protocol : str, default is Undefined, optional
        The protocol this BackendService uses to communicate with backends.
        The default is HTTP. NOTE: HTTP2 is only valid for beta HTTP/2 load balancer
        types and may result in errors if used with the GA API. NOTE: With protocol “UNSPECIFIED”,
        the backend service can be used by Layer 4 Internal Load Balancing or Network Load Balancing
        with TCP/UDP/L3_DEFAULT Forwarding Rule protocol.
        Possible values are: HTTP, HTTPS, HTTP2, TCP, SSL, GRPC, UNSPECIFIED.
    securityPolicy : str, default is Undefined, optional
        The security policy associated with this backend service.
    securitySettings : ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderSecuritySettings, default is Undefined, optional
        security settings
    selfLink : str, default is Undefined, optional
        The URI of the created resource.
    serviceLbPolicy : str, default is Undefined, optional
        URL to networkservices.ServiceLbPolicy resource.
        Can only be set if load balancing scheme is EXTERNAL, EXTERNAL_MANAGED, INTERNAL_MANAGED or INTERNAL_SELF_MANAGED and the scope is global.
    sessionAffinity : str, default is Undefined, optional
        Type of session affinity to use. The default is NONE. Session affinity is
        not applicable if the protocol is UDP.
        Possible values are: NONE, CLIENT_IP, CLIENT_IP_PORT_PROTO, CLIENT_IP_PROTO, GENERATED_COOKIE, HEADER_FIELD, HTTP_COOKIE.
    timeoutSec : float, default is Undefined, optional
        The backend service timeout has a different meaning depending on the type of load balancer.
        For more information see, Backend service settings.
        The default is 30 seconds.
        The full range of timeout values allowed goes from 1 through 2,147,483,647 seconds.
    """


    affinityCookieTtlSec?: float

    backend?: [ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderBackendItems0]

    cdnPolicy?: ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderCdnPolicy

    circuitBreakers?: ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderCircuitBreakers

    compressionMode?: str

    connectionDrainingTimeoutSec?: float

    consistentHash?: ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderConsistentHash

    creationTimestamp?: str

    customRequestHeaders?: [str]

    customResponseHeaders?: [str]

    description?: str

    edgeSecurityPolicy?: str

    enableCdn?: bool

    fingerprint?: str

    generatedId?: float

    healthChecks?: [str]

    iap?: ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderIap

    id?: str

    loadBalancingScheme?: str

    localityLbPolicies?: [ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderLocalityLbPoliciesItems0]

    localityLbPolicy?: str

    logConfig?: ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderLogConfig

    outlierDetection?: ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderOutlierDetection

    portName?: str

    project?: str

    $protocol?: str

    securityPolicy?: str

    securitySettings?: ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderSecuritySettings

    selfLink?: str

    serviceLbPolicy?: str

    sessionAffinity?: str

    timeoutSec?: float


schema ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderBackendItems0:
    r"""
    compute gcp upbound io v1beta2 backend service status at provider backend items0

    Attributes
    ----------
    balancingMode : str, default is Undefined, optional
        Specifies the balancing mode for this backend.
        For global HTTP(S) or TCP/SSL load balancing, the default is
        UTILIZATION. Valid values are UTILIZATION, RATE (for HTTP(S))
        and CONNECTION (for TCP/SSL).
        See the Backend Services Overview
        for an explanation of load balancing modes.
        From version 6.0.0 default value will be UTILIZATION to match default GCP value.
        Default value is UTILIZATION.
        Possible values are: UTILIZATION, RATE, CONNECTION.
    capacityScaler : float, default is Undefined, optional
        A multiplier applied to the group's maximum servicing capacity
        (based on UTILIZATION, RATE or CONNECTION).
        Default value is 1, which means the group will serve up to 100%
        of its configured capacity (depending on balancingMode). A
        setting of 0 means the group is completely drained, offering
        0% of its available Capacity. Valid range is [0.0,1.0].
    description : str, default is Undefined, optional
        An optional description of this resource.
        Provide this property when you create the resource.
    group : str, default is Undefined, optional
        The fully-qualified URL of an Instance Group or Network Endpoint
        Group resource. In case of instance group this defines the list
        of instances that serve traffic. Member virtual machine
        instances from each instance group must live in the same zone as
        the instance group itself. No two backends in a backend service
        are allowed to use same Instance Group resource.
        For Network Endpoint Groups this defines list of endpoints. All
        endpoints of Network Endpoint Group must be hosted on instances
        located in the same zone as the Network Endpoint Group.
        Backend services cannot mix Instance Group and
        Network Endpoint Group backends.
        Note that you must specify an Instance Group or Network Endpoint
        Group resource using the fully-qualified URL, rather than a
        partial URL.
    maxConnections : float, default is Undefined, optional
        The max number of simultaneous connections for the group. Can
        be used with either CONNECTION or UTILIZATION balancing modes.
        For CONNECTION mode, either maxConnections or one
        of maxConnectionsPerInstance or maxConnectionsPerEndpoint,
        as appropriate for group type, must be set.
    maxConnectionsPerEndpoint : float, default is Undefined, optional
        The max number of simultaneous connections that a single backend
        network endpoint can handle. This is used to calculate the
        capacity of the group. Can be used in either CONNECTION or
        UTILIZATION balancing modes.
        For CONNECTION mode, either
        maxConnections or maxConnectionsPerEndpoint must be set.
    maxConnectionsPerInstance : float, default is Undefined, optional
        The max number of simultaneous connections that a single
        backend instance can handle. This is used to calculate the
        capacity of the group. Can be used in either CONNECTION or
        UTILIZATION balancing modes.
        For CONNECTION mode, either maxConnections or
        maxConnectionsPerInstance must be set.
    maxRate : float, default is Undefined, optional
        The max requests per second (RPS) of the group.
        Can be used with either RATE or UTILIZATION balancing modes,
        but required if RATE mode. For RATE mode, either maxRate or one
        of maxRatePerInstance or maxRatePerEndpoint, as appropriate for
        group type, must be set.
    maxRatePerEndpoint : float, default is Undefined, optional
        The max requests per second (RPS) that a single backend network
        endpoint can handle. This is used to calculate the capacity of
        the group. Can be used in either balancing mode. For RATE mode,
        either maxRate or maxRatePerEndpoint must be set.
    maxRatePerInstance : float, default is Undefined, optional
        The max requests per second (RPS) that a single backend
        instance can handle. This is used to calculate the capacity of
        the group. Can be used in either balancing mode. For RATE mode,
        either maxRate or maxRatePerInstance must be set.
    maxUtilization : float, default is Undefined, optional
        Used when balancingMode is UTILIZATION. This ratio defines the
        CPU utilization target for the group. Valid range is [0.0, 1.0].
    """


    balancingMode?: str

    capacityScaler?: float

    description?: str

    group?: str

    maxConnections?: float

    maxConnectionsPerEndpoint?: float

    maxConnectionsPerInstance?: float

    maxRate?: float

    maxRatePerEndpoint?: float

    maxRatePerInstance?: float

    maxUtilization?: float


schema ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderCdnPolicy:
    r"""
    Cloud CDN configuration for this BackendService.
    Structure is documented below.

    Attributes
    ----------
    bypassCacheOnRequestHeaders : [ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderCdnPolicyBypassCacheOnRequestHeadersItems0], default is Undefined, optional
        Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified.
        The cache is bypassed for all cdnPolicy.cacheMode settings.
        Structure is documented below.
    cacheKeyPolicy : ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderCdnPolicyCacheKeyPolicy, default is Undefined, optional
        cache key policy
    cacheMode : str, default is Undefined, optional
        Specifies the cache setting for all responses from this backend.
        The possible values are: USE_ORIGIN_HEADERS, FORCE_CACHE_ALL and CACHE_ALL_STATIC
        Possible values are: USE_ORIGIN_HEADERS, FORCE_CACHE_ALL, CACHE_ALL_STATIC.
    clientTtl : float, default is Undefined, optional
        Specifies the maximum allowed TTL for cached content served by this origin.
    defaultTtl : float, default is Undefined, optional
        Specifies the default TTL for cached content served by this origin for responses
        that do not have an existing valid TTL (max-age or s-max-age).
    maxTtl : float, default is Undefined, optional
        Specifies the maximum allowed TTL for cached content served by this origin.
    negativeCaching : bool, default is Undefined, optional
        Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects.
    negativeCachingPolicy : [ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderCdnPolicyNegativeCachingPolicyItems0], default is Undefined, optional
        Sets a cache TTL for the specified HTTP status code. negativeCaching must be enabled to configure negativeCachingPolicy.
        Omitting the policy and leaving negativeCaching enabled will use Cloud CDN's default cache TTLs.
        Structure is documented below.
    serveWhileStale : float, default is Undefined, optional
        Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache.
    signedUrlCacheMaxAgeSec : float, default is Undefined, optional
        Maximum number of seconds the response to a signed URL request
        will be considered fresh, defaults to 1hr (3600s). After this
        time period, the response will be revalidated before
        being served.
        When serving responses to signed URL requests, Cloud CDN will
        internally behave as though all responses from this backend had a
        "Cache-Control: public, max-age=[TTL]" header, regardless of any
        existing Cache-Control header. The actual headers served in
        responses will not be altered.
    """


    bypassCacheOnRequestHeaders?: [ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderCdnPolicyBypassCacheOnRequestHeadersItems0]

    cacheKeyPolicy?: ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderCdnPolicyCacheKeyPolicy

    cacheMode?: str

    clientTtl?: float

    defaultTtl?: float

    maxTtl?: float

    negativeCaching?: bool

    negativeCachingPolicy?: [ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderCdnPolicyNegativeCachingPolicyItems0]

    serveWhileStale?: float

    signedUrlCacheMaxAgeSec?: float


schema ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderCdnPolicyBypassCacheOnRequestHeadersItems0:
    r"""
    compute gcp upbound io v1beta2 backend service status at provider cdn policy bypass cache on request headers items0

    Attributes
    ----------
    headerName : str, default is Undefined, optional
        The header field name to match on when bypassing cache. Values are case-insensitive.
    """


    headerName?: str


schema ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderCdnPolicyCacheKeyPolicy:
    r"""
    The CacheKeyPolicy for this CdnPolicy.
    Structure is documented below.

    Attributes
    ----------
    includeHost : bool, default is Undefined, optional
        If true requests to different hosts will be cached separately.
    includeHttpHeaders : [str], default is Undefined, optional
        Allows HTTP request headers (by name) to be used in the
        cache key.
    includeNamedCookies : [str], default is Undefined, optional
        Names of cookies to include in cache keys.
    includeProtocol : bool, default is Undefined, optional
        If true, http and https requests will be cached separately.
    includeQueryString : bool, default is Undefined, optional
        If true, include query string parameters in the cache key
        according to query_string_whitelist and
        query_string_blacklist. If neither is set, the entire query
        string will be included.
        If false, the query string will be excluded from the cache
        key entirely.
    queryStringBlacklist : [str], default is Undefined, optional
        Names of query string parameters to exclude in cache keys.
        All other parameters will be included. Either specify
        query_string_whitelist or query_string_blacklist, not both.
        '&' and '=' will be percent encoded and not treated as
        delimiters.
    queryStringWhitelist : [str], default is Undefined, optional
        Names of query string parameters to include in cache keys.
        All other parameters will be excluded. Either specify
        query_string_whitelist or query_string_blacklist, not both.
        '&' and '=' will be percent encoded and not treated as
        delimiters.
    """


    includeHost?: bool

    includeHttpHeaders?: [str]

    includeNamedCookies?: [str]

    includeProtocol?: bool

    includeQueryString?: bool

    queryStringBlacklist?: [str]

    queryStringWhitelist?: [str]


schema ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderCdnPolicyNegativeCachingPolicyItems0:
    r"""
    compute gcp upbound io v1beta2 backend service status at provider cdn policy negative caching policy items0

    Attributes
    ----------
    code : float, default is Undefined, optional
        The HTTP status code to define a TTL against. Only HTTP status codes 300, 301, 308, 404, 405, 410, 421, 451 and 501
        can be specified as values, and you cannot specify a status code more than once.
    ttl : float, default is Undefined, optional
        The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s
        (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
    """


    code?: float

    ttl?: float


schema ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderCircuitBreakers:
    r"""
    Settings controlling the volume of connections to a backend service. This field
    is applicable only when the load_balancing_scheme is set to INTERNAL_SELF_MANAGED.
    Structure is documented below.

    Attributes
    ----------
    maxConnections : float, default is Undefined, optional
        The maximum number of connections to the backend cluster.
        Defaults to 1024.
    maxPendingRequests : float, default is Undefined, optional
        The maximum number of pending requests to the backend cluster.
        Defaults to 1024.
    maxRequests : float, default is Undefined, optional
        The maximum number of parallel requests to the backend cluster.
        Defaults to 1024.
    maxRequestsPerConnection : float, default is Undefined, optional
        Maximum requests for a single backend connection. This parameter
        is respected by both the HTTP/1.1 and HTTP/2 implementations. If
        not specified, there is no limit. Setting this parameter to 1
        will effectively disable keep alive.
    maxRetries : float, default is Undefined, optional
        The maximum number of parallel retries to the backend cluster.
        Defaults to 3.
    """


    maxConnections?: float

    maxPendingRequests?: float

    maxRequests?: float

    maxRequestsPerConnection?: float

    maxRetries?: float


schema ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderConsistentHash:
    r"""
    Consistent Hash-based load balancing can be used to provide soft session
    affinity based on HTTP headers, cookies or other properties. This load balancing
    policy is applicable only for HTTP connections. The affinity to a particular
    destination host will be lost when one or more hosts are added/removed from the
    destination service. This field specifies parameters that control consistent
    hashing. This field only applies if the load_balancing_scheme is set to
    INTERNAL_SELF_MANAGED. This field is only applicable when locality_lb_policy is
    set to MAGLEV or RING_HASH.
    Structure is documented below.

    Attributes
    ----------
    httpCookie : ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderConsistentHashHTTPCookie, default is Undefined, optional
        http cookie
    httpHeaderName : str, default is Undefined, optional
        The hash based on the value of the specified header field.
        This field is applicable if the sessionAffinity is set to HEADER_FIELD.
    minimumRingSize : float, default is Undefined, optional
        The minimum number of virtual nodes to use for the hash ring.
        Larger ring sizes result in more granular load
        distributions. If the number of hosts in the load balancing pool
        is larger than the ring size, each host will be assigned a single
        virtual node.
        Defaults to 1024.
    """


    httpCookie?: ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderConsistentHashHTTPCookie

    httpHeaderName?: str

    minimumRingSize?: float


schema ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderConsistentHashHTTPCookie:
    r"""
    Hash is based on HTTP Cookie. This field describes a HTTP cookie
    that will be used as the hash key for the consistent hash load
    balancer. If the cookie is not present, it will be generated.
    This field is applicable if the sessionAffinity is set to HTTP_COOKIE.
    Structure is documented below.

    Attributes
    ----------
    name : str, default is Undefined, optional
        The name of a locality load balancer policy to be used. The value
        should be one of the predefined ones as supported by localityLbPolicy,
        although at the moment only ROUND_ROBIN is supported.
        This field should only be populated when the customPolicy field is not
        used.
        Note that specifying the same policy more than once for a backend is
        not a valid configuration and will be rejected.
        The possible values are:
    path : str, default is Undefined, optional
        Path to set for the cookie.
    ttl : ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderConsistentHashHTTPCookieTTL, default is Undefined, optional
        ttl
    """


    name?: str

    path?: str

    ttl?: ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderConsistentHashHTTPCookieTTL


schema ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderConsistentHashHTTPCookieTTL:
    r"""
    The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s
    (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.

    Attributes
    ----------
    nanos : float, default is Undefined, optional
        Span of time that's a fraction of a second at nanosecond
        resolution. Durations less than one second are represented
        with a 0 seconds field and a positive nanos field. Must
        be from 0 to 999,999,999 inclusive.
    seconds : float, default is Undefined, optional
        Span of time at a resolution of a second.
        Must be from 0 to 315,576,000,000 inclusive.
    """


    nanos?: float

    seconds?: float


schema ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderIap:
    r"""
    Settings for enabling Cloud Identity Aware Proxy
    Structure is documented below.

    Attributes
    ----------
    oauth2ClientId : str, default is Undefined, optional
        OAuth2 Client ID for IAP
    """


    oauth2ClientId?: str


schema ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderLocalityLbPoliciesItems0:
    r"""
    compute gcp upbound io v1beta2 backend service status at provider locality lb policies items0

    Attributes
    ----------
    customPolicy : ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderLocalityLbPoliciesItems0CustomPolicy, default is Undefined, optional
        custom policy
    policy : ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderLocalityLbPoliciesItems0Policy, default is Undefined, optional
        policy
    """


    customPolicy?: ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderLocalityLbPoliciesItems0CustomPolicy

    policy?: ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderLocalityLbPoliciesItems0Policy


schema ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderLocalityLbPoliciesItems0CustomPolicy:
    r"""
    The configuration for a custom policy implemented by the user and
    deployed with the client.
    Structure is documented below.

    Attributes
    ----------
    data : str, default is Undefined, optional
        An optional, arbitrary JSON object with configuration data, understood
        by a locally installed custom policy implementation.
    name : str, default is Undefined, optional
        The name of a locality load balancer policy to be used. The value
        should be one of the predefined ones as supported by localityLbPolicy,
        although at the moment only ROUND_ROBIN is supported.
        This field should only be populated when the customPolicy field is not
        used.
        Note that specifying the same policy more than once for a backend is
        not a valid configuration and will be rejected.
        The possible values are:
    """


    data?: str

    name?: str


schema ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderLocalityLbPoliciesItems0Policy:
    r"""
    The configuration for a built-in load balancing policy.
    Structure is documented below.

    Attributes
    ----------
    name : str, default is Undefined, optional
        The name of a locality load balancer policy to be used. The value
        should be one of the predefined ones as supported by localityLbPolicy,
        although at the moment only ROUND_ROBIN is supported.
        This field should only be populated when the customPolicy field is not
        used.
        Note that specifying the same policy more than once for a backend is
        not a valid configuration and will be rejected.
        The possible values are:
    """


    name?: str


schema ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderLogConfig:
    r"""
    This field denotes the logging options for the load balancer traffic served by this backend service.
    If logging is enabled, logs will be exported to Stackdriver.
    Structure is documented below.

    Attributes
    ----------
    enable : bool, default is Undefined, optional
        Whether to enable logging for the load balancer traffic served by this backend service.
    sampleRate : float, default is Undefined, optional
        This field can only be specified if logging is enabled for this backend service. The value of
        the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer
        where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported.
        The default value is 1.0.
    """


    enable?: bool

    sampleRate?: float


schema ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderOutlierDetection:
    r"""
    Settings controlling eviction of unhealthy hosts from the load balancing pool.
    Applicable backend service types can be a global backend service with the
    loadBalancingScheme set to INTERNAL_SELF_MANAGED or EXTERNAL_MANAGED.
    From version 6.0.
    Default values are enforce by GCP without providing them.
    Structure is documented below.

    Attributes
    ----------
    baseEjectionTime : ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderOutlierDetectionBaseEjectionTime, default is Undefined, optional
        base ejection time
    consecutiveErrors : float, default is Undefined, optional
        Number of errors before a host is ejected from the connection pool. When the
        backend host is accessed over HTTP, a 5xx return code qualifies as an error.
        Defaults to 5.
    consecutiveGatewayFailure : float, default is Undefined, optional
        The number of consecutive gateway failures (502, 503, 504 status or connection
        errors that are mapped to one of those status codes) before a consecutive
        gateway failure ejection occurs. Defaults to 5.
    enforcingConsecutiveErrors : float, default is Undefined, optional
        The percentage chance that a host will be actually ejected when an outlier
        status is detected through consecutive 5xx. This setting can be used to disable
        ejection or to ramp it up slowly. Defaults to 100.
    enforcingConsecutiveGatewayFailure : float, default is Undefined, optional
        The percentage chance that a host will be actually ejected when an outlier
        status is detected through consecutive gateway failures. This setting can be
        used to disable ejection or to ramp it up slowly. Defaults to 0.
    enforcingSuccessRate : float, default is Undefined, optional
        The percentage chance that a host will be actually ejected when an outlier
        status is detected through success rate statistics. This setting can be used to
        disable ejection or to ramp it up slowly. Defaults to 100.
    interval : ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderOutlierDetectionInterval, default is Undefined, optional
        interval
    maxEjectionPercent : float, default is Undefined, optional
        Maximum percentage of hosts in the load balancing pool for the backend service
        that can be ejected. Defaults to 10%.
    successRateMinimumHosts : float, default is Undefined, optional
        The number of hosts in a cluster that must have enough request volume to detect
        success rate outliers. If the number of hosts is less than this setting, outlier
        detection via success rate statistics is not performed for any host in the
        cluster. Defaults to 5.
    successRateRequestVolume : float, default is Undefined, optional
        The minimum number of total requests that must be collected in one interval (as
        defined by the interval duration above) to include this host in success rate
        based outlier detection. If the volume is lower than this setting, outlier
        detection via success rate statistics is not performed for that host. Defaults
        to 100.
    successRateStdevFactor : float, default is Undefined, optional
        This factor is used to determine the ejection threshold for success rate outlier
        ejection. The ejection threshold is the difference between the mean success
        rate, and the product of this factor and the standard deviation of the mean
        success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided
        by a thousand to get a double. That is, if the desired factor is 1.9, the
        runtime value should be 1900. Defaults to 1900.
    """


    baseEjectionTime?: ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderOutlierDetectionBaseEjectionTime

    consecutiveErrors?: float

    consecutiveGatewayFailure?: float

    enforcingConsecutiveErrors?: float

    enforcingConsecutiveGatewayFailure?: float

    enforcingSuccessRate?: float

    interval?: ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderOutlierDetectionInterval

    maxEjectionPercent?: float

    successRateMinimumHosts?: float

    successRateRequestVolume?: float

    successRateStdevFactor?: float


schema ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderOutlierDetectionBaseEjectionTime:
    r"""
    The base time that a host is ejected for. The real time is equal to the base
    time multiplied by the number of times the host has been ejected. Defaults to
    30000ms or 30s.
    Structure is documented below.

    Attributes
    ----------
    nanos : float, default is Undefined, optional
        Span of time that's a fraction of a second at nanosecond
        resolution. Durations less than one second are represented
        with a 0 seconds field and a positive nanos field. Must
        be from 0 to 999,999,999 inclusive.
    seconds : float, default is Undefined, optional
        Span of time at a resolution of a second.
        Must be from 0 to 315,576,000,000 inclusive.
    """


    nanos?: float

    seconds?: float


schema ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderOutlierDetectionInterval:
    r"""
    Time interval between ejection sweep analysis. This can result in both new
    ejections as well as hosts being returned to service. Defaults to 10 seconds.
    Structure is documented below.

    Attributes
    ----------
    nanos : float, default is Undefined, optional
        Span of time that's a fraction of a second at nanosecond
        resolution. Durations less than one second are represented
        with a 0 seconds field and a positive nanos field. Must
        be from 0 to 999,999,999 inclusive.
    seconds : float, default is Undefined, optional
        Span of time at a resolution of a second.
        Must be from 0 to 315,576,000,000 inclusive.
    """


    nanos?: float

    seconds?: float


schema ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderSecuritySettings:
    r"""
    The security settings that apply to this backend service. This field is applicable to either
    a regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and
    load_balancing_scheme set to INTERNAL_MANAGED; or a global backend service with the
    load_balancing_scheme set to INTERNAL_SELF_MANAGED.
    Structure is documented below.

    Attributes
    ----------
    awsV4Authentication : ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderSecuritySettingsAwsV4Authentication, default is Undefined, optional
        aws v4 authentication
    clientTlsPolicy : str, default is Undefined, optional
        ClientTlsPolicy is a resource that specifies how a client should authenticate
        connections to backends of a service. This resource itself does not affect
        configuration unless it is attached to a backend service resource.
    subjectAltNames : [str], default is Undefined, optional
        A list of alternate names to verify the subject identity in the certificate.
        If specified, the client will verify that the server certificate's subject
        alt name matches one of the specified values.
    """


    awsV4Authentication?: ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderSecuritySettingsAwsV4Authentication

    clientTlsPolicy?: str

    subjectAltNames?: [str]


schema ComputeGcpUpboundIoV1beta2BackendServiceStatusAtProviderSecuritySettingsAwsV4Authentication:
    r"""
    The configuration needed to generate a signature for access to private storage buckets that support AWS's Signature Version 4 for authentication.
    Allowed only for INTERNET_IP_PORT and INTERNET_FQDN_PORT NEG backends.
    Structure is documented below.

    Attributes
    ----------
    accessKeyId : str, default is Undefined, optional
        The identifier of an access key used for s3 bucket authentication.
    accessKeyVersion : str, default is Undefined, optional
        The optional version identifier for the access key. You can use this to keep track of different iterations of your access key.
    originRegion : str, default is Undefined, optional
        The name of the cloud region of your origin. This is a free-form field with the name of the region your cloud uses to host your origin.
        For example, "us-east-1" for AWS or "us-ashburn-1" for OCI.
    """


    accessKeyId?: str

    accessKeyVersion?: str

    originRegion?: str


schema ComputeGcpUpboundIoV1beta2BackendServiceStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


