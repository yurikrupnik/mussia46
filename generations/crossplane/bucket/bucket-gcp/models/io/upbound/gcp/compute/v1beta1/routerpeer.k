"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema RouterPeer:
    r"""
    RouterPeer is the Schema for the RouterPeers API. BGP information that must be configured into the routing stack to establish BGP peering.

    Attributes
    ----------
    apiVersion : str, default is "compute.gcp.upbound.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "RouterPeer", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : ComputeGcpUpboundIoV1beta1RouterPeerSpec, default is Undefined, required
        spec
    status : ComputeGcpUpboundIoV1beta1RouterPeerStatus, default is Undefined, optional
        status
    """


    apiVersion: "compute.gcp.upbound.io/v1beta1" = "compute.gcp.upbound.io/v1beta1"

    kind: "RouterPeer" = "RouterPeer"

    metadata?: v1.ObjectMeta

    spec: ComputeGcpUpboundIoV1beta1RouterPeerSpec

    status?: ComputeGcpUpboundIoV1beta1RouterPeerStatus


schema ComputeGcpUpboundIoV1beta1RouterPeerSpec:
    r"""
    RouterPeerSpec defines the desired state of RouterPeer

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : ComputeGcpUpboundIoV1beta1RouterPeerSpecForProvider, default is Undefined, required
        for provider
    initProvider : ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : ComputeGcpUpboundIoV1beta1RouterPeerSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : ComputeGcpUpboundIoV1beta1RouterPeerSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : ComputeGcpUpboundIoV1beta1RouterPeerSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: ComputeGcpUpboundIoV1beta1RouterPeerSpecForProvider

    initProvider?: ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: ComputeGcpUpboundIoV1beta1RouterPeerSpecProviderConfigRef

    publishConnectionDetailsTo?: ComputeGcpUpboundIoV1beta1RouterPeerSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: ComputeGcpUpboundIoV1beta1RouterPeerSpecWriteConnectionSecretToRef


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecForProvider:
    r"""
    compute gcp upbound io v1beta1 router peer spec for provider

    Attributes
    ----------
    advertiseMode : str, default is Undefined, optional
        User-specified flag to indicate which mode to use for advertisement.
        Valid values of this enum field are: DEFAULT, CUSTOM
        Default value is DEFAULT.
        Possible values are: DEFAULT, CUSTOM.
    advertisedGroups : [str], default is Undefined, optional
        User-specified list of prefix groups to advertise in custom
        mode, which currently supports the following option:
    advertisedIpRanges : [ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderAdvertisedIPRangesItems0], default is Undefined, optional
        User-specified list of individual IP ranges to advertise in
        custom mode. This field can only be populated if advertiseMode
        is CUSTOM and is advertised to all peers of the router. These IP
        ranges will be advertised in addition to any specified groups.
        Leave this field blank to advertise no custom IP ranges.
        Structure is documented below.
    advertisedRoutePriority : float, default is Undefined, optional
        The priority of routes advertised to this BGP peer.
        Where there is more than one matching route of maximum
        length, the routes with the lowest priority value win.
    bfd : [ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderBfdItems0], default is Undefined, optional
        BFD configuration for the BGP peering.
        Structure is documented below.
    customLearnedIpRanges : [ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderCustomLearnedIPRangesItems0], default is Undefined, optional
        custom learned Ip ranges
    customLearnedRoutePriority : float, default is Undefined, optional
        custom learned route priority
    enable : bool, default is Undefined, optional
        The status of the BGP peer connection. If set to false, any active session
        with the peer is terminated and all associated routing information is removed.
        If set to true, the peer connection can be established with routing information.
        The default is true.
    enableIpv4 : bool, default is Undefined, optional
        Enable IPv4 traffic over BGP Peer. It is enabled by default if the peerIpAddress is version 4.
    enableIpv6 : bool, default is Undefined, optional
        Enable IPv6 traffic over BGP Peer. If not specified, it is disabled by default.
    interface : str, default is Undefined, optional
        Name of the interface the BGP peer is associated with.
    interfaceRef : ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderInterfaceRef, default is Undefined, optional
        interface ref
    interfaceSelector : ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderInterfaceSelector, default is Undefined, optional
        interface selector
    ipAddress : str, default is Undefined, optional
        IP address of the interface inside Google Cloud Platform.
        Only IPv4 is supported.
    ipv4NexthopAddress : str, default is Undefined, optional
        IPv4 address of the interface inside Google Cloud Platform.
    ipv6NexthopAddress : str, default is Undefined, optional
        IPv6 address of the interface inside Google Cloud Platform.
        The address must be in the range 2600:2d00:0:2::/64 or 2600:2d00:0:3::/64.
        If you do not specify the next hop addresses, Google Cloud automatically
        assigns unused addresses from the 2600:2d00:0:2::/64 or 2600:2d00:0:3::/64 range for you.
    md5AuthenticationKey : [ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderMd5AuthenticationKeyItems0], default is Undefined, optional
        md5 authentication key
    peerAsn : float, default is Undefined, optional
        Peer BGP Autonomous System Number (ASN).
        Each BGP interface may use a different value.
    peerIpAddress : str, default is Undefined, optional
        IP address of the BGP interface outside Google Cloud Platform.
        Only IPv4 is supported. Required if ip_address is set.
    peerIpAddressRef : ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderPeerIPAddressRef, default is Undefined, optional
        peer Ip address ref
    peerIpAddressSelector : ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderPeerIPAddressSelector, default is Undefined, optional
        peer Ip address selector
    peerIpv4NexthopAddress : str, default is Undefined, optional
        IPv4 address of the BGP interface outside Google Cloud Platform.
    peerIpv6NexthopAddress : str, default is Undefined, optional
        IPv6 address of the BGP interface outside Google Cloud Platform.
        The address must be in the range 2600:2d00:0:2::/64 or 2600:2d00:0:3::/64.
        If you do not specify the next hop addresses, Google Cloud automatically
        assigns unused addresses from the 2600:2d00:0:2::/64 or 2600:2d00:0:3::/64 range for you.
    project : str, default is Undefined, optional
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
    region : str, default is Undefined, optional
        Region where the router and BgpPeer reside.
        If it is not provided, the provider region is used.
    regionRef : ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderRegionRef, default is Undefined, optional
        region ref
    regionSelector : ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderRegionSelector, default is Undefined, optional
        region selector
    router : str, default is Undefined, optional
        The name of the Cloud Router in which this BgpPeer will be configured.
    routerApplianceInstance : str, default is Undefined, optional
        The URI of the VM instance that is used as third-party router appliances
        such as Next Gen Firewalls, Virtual Routers, or Router Appliances.
        The VM instance must be located in zones contained in the same region as
        this Cloud Router. The VM instance is the peer side of the BGP session.
    routerApplianceInstanceRef : ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderRouterApplianceInstanceRef, default is Undefined, optional
        router appliance instance ref
    routerApplianceInstanceSelector : ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderRouterApplianceInstanceSelector, default is Undefined, optional
        router appliance instance selector
    routerRef : ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderRouterRef, default is Undefined, optional
        router ref
    routerSelector : ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderRouterSelector, default is Undefined, optional
        router selector
    """


    advertiseMode?: str

    advertisedGroups?: [str]

    advertisedIpRanges?: [ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderAdvertisedIPRangesItems0]

    advertisedRoutePriority?: float

    bfd?: [ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderBfdItems0]

    customLearnedIpRanges?: [ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderCustomLearnedIPRangesItems0]

    customLearnedRoutePriority?: float

    enable?: bool

    enableIpv4?: bool

    enableIpv6?: bool

    interface?: str

    interfaceRef?: ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderInterfaceRef

    interfaceSelector?: ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderInterfaceSelector

    ipAddress?: str

    ipv4NexthopAddress?: str

    ipv6NexthopAddress?: str

    md5AuthenticationKey?: [ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderMd5AuthenticationKeyItems0]

    peerAsn?: float

    peerIpAddress?: str

    peerIpAddressRef?: ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderPeerIPAddressRef

    peerIpAddressSelector?: ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderPeerIPAddressSelector

    peerIpv4NexthopAddress?: str

    peerIpv6NexthopAddress?: str

    project?: str

    region?: str

    regionRef?: ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderRegionRef

    regionSelector?: ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderRegionSelector

    router?: str

    routerApplianceInstance?: str

    routerApplianceInstanceRef?: ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderRouterApplianceInstanceRef

    routerApplianceInstanceSelector?: ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderRouterApplianceInstanceSelector

    routerRef?: ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderRouterRef

    routerSelector?: ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderRouterSelector


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderAdvertisedIPRangesItems0:
    r"""
    compute gcp upbound io v1beta1 router peer spec for provider advertised IP ranges items0

    Attributes
    ----------
    description : str, default is Undefined, optional
        User-specified description for the IP range.
    range : str, default is Undefined, optional
        The IP range to advertise. The value must be a
        CIDR-formatted string.
    """


    description?: str

    range?: str


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderBfdItems0:
    r"""
    compute gcp upbound io v1beta1 router peer spec for provider bfd items0

    Attributes
    ----------
    minReceiveInterval : float, default is Undefined, optional
        The minimum interval, in milliseconds, between BFD control packets
        received from the peer router. The actual value is negotiated
        between the two routers and is equal to the greater of this value
        and the transmit interval of the other router. If set, this value
        must be between 1000 and 30000.
    minTransmitInterval : float, default is Undefined, optional
        The minimum interval, in milliseconds, between BFD control packets
        transmitted to the peer router. The actual value is negotiated
        between the two routers and is equal to the greater of this value
        and the corresponding receive interval of the other router. If set,
        this value must be between 1000 and 30000.
    multiplier : float, default is Undefined, optional
        The number of consecutive BFD packets that must be missed before
        BFD declares that a peer is unavailable. If set, the value must
        be a value between 5 and 16.
    sessionInitializationMode : str, default is Undefined, optional
        The BFD session initialization mode for this BGP peer.
        If set to ACTIVE, the Cloud Router will initiate the BFD session
        for this BGP peer. If set to PASSIVE, the Cloud Router will wait
        for the peer router to initiate the BFD session for this BGP peer.
        If set to DISABLED, BFD is disabled for this BGP peer.
        Possible values are: ACTIVE, DISABLED, PASSIVE.
    """


    minReceiveInterval?: float

    minTransmitInterval?: float

    multiplier?: float

    sessionInitializationMode?: str


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderCustomLearnedIPRangesItems0:
    r"""
    compute gcp upbound io v1beta1 router peer spec for provider custom learned IP ranges items0

    Attributes
    ----------
    range : str, default is Undefined, optional
        The IP range to advertise. The value must be a
        CIDR-formatted string.
    """


    range?: str


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderInterfaceRef:
    r"""
    Reference to a RouterInterface in compute to populate interface.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderInterfaceRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderInterfaceRefPolicy


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderInterfaceRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderInterfaceSelector:
    r"""
    Selector for a RouterInterface in compute to populate interface.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderInterfaceSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderInterfaceSelectorPolicy


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderInterfaceSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderMd5AuthenticationKeyItems0:
    r"""
    compute gcp upbound io v1beta1 router peer spec for provider md5 authentication key items0

    Attributes
    ----------
    keySecretRef : ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderMd5AuthenticationKeyItems0KeySecretRef, default is Undefined, required
        key secret ref
    name : str, default is Undefined, optional
        Name of this BGP peer. The name must be 1-63 characters long,
        and comply with RFC1035. Specifically, the name must be 1-63 characters
        long and match the regular expression [a-z]([-a-z0-9]*[a-z0-9])? which
        means the first character must be a lowercase letter, and all
        following characters must be a dash, lowercase letter, or digit,
        except the last character, which cannot be a dash.
    """


    keySecretRef: ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderMd5AuthenticationKeyItems0KeySecretRef

    name?: str


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderMd5AuthenticationKeyItems0KeySecretRef:
    r"""
    A SecretKeySelector is a reference to a secret key in an arbitrary namespace.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    key: str

    name: str

    namespace: str


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderPeerIPAddressRef:
    r"""
    Reference to a Address in compute to populate peerIpAddress.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderPeerIPAddressRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderPeerIPAddressRefPolicy


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderPeerIPAddressRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderPeerIPAddressSelector:
    r"""
    Selector for a Address in compute to populate peerIpAddress.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderPeerIPAddressSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderPeerIPAddressSelectorPolicy


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderPeerIPAddressSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderRegionRef:
    r"""
    Reference to a Router in compute to populate region.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderRegionRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderRegionRefPolicy


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderRegionRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderRegionSelector:
    r"""
    Selector for a Router in compute to populate region.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderRegionSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderRegionSelectorPolicy


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderRegionSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderRouterApplianceInstanceRef:
    r"""
    Reference to a Instance in compute to populate routerApplianceInstance.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderRouterApplianceInstanceRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderRouterApplianceInstanceRefPolicy


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderRouterApplianceInstanceRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderRouterApplianceInstanceSelector:
    r"""
    Selector for a Instance in compute to populate routerApplianceInstance.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderRouterApplianceInstanceSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderRouterApplianceInstanceSelectorPolicy


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderRouterApplianceInstanceSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderRouterRef:
    r"""
    Reference to a Router in compute to populate router.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderRouterRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderRouterRefPolicy


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderRouterRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderRouterSelector:
    r"""
    Selector for a Router in compute to populate router.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderRouterSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderRouterSelectorPolicy


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecForProviderRouterSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    advertiseMode : str, default is Undefined, optional
        User-specified flag to indicate which mode to use for advertisement.
        Valid values of this enum field are: DEFAULT, CUSTOM
        Default value is DEFAULT.
        Possible values are: DEFAULT, CUSTOM.
    advertisedGroups : [str], default is Undefined, optional
        User-specified list of prefix groups to advertise in custom
        mode, which currently supports the following option:
    advertisedIpRanges : [ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderAdvertisedIPRangesItems0], default is Undefined, optional
        User-specified list of individual IP ranges to advertise in
        custom mode. This field can only be populated if advertiseMode
        is CUSTOM and is advertised to all peers of the router. These IP
        ranges will be advertised in addition to any specified groups.
        Leave this field blank to advertise no custom IP ranges.
        Structure is documented below.
    advertisedRoutePriority : float, default is Undefined, optional
        The priority of routes advertised to this BGP peer.
        Where there is more than one matching route of maximum
        length, the routes with the lowest priority value win.
    bfd : [ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderBfdItems0], default is Undefined, optional
        BFD configuration for the BGP peering.
        Structure is documented below.
    customLearnedIpRanges : [ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderCustomLearnedIPRangesItems0], default is Undefined, optional
        custom learned Ip ranges
    customLearnedRoutePriority : float, default is Undefined, optional
        custom learned route priority
    enable : bool, default is Undefined, optional
        The status of the BGP peer connection. If set to false, any active session
        with the peer is terminated and all associated routing information is removed.
        If set to true, the peer connection can be established with routing information.
        The default is true.
    enableIpv4 : bool, default is Undefined, optional
        Enable IPv4 traffic over BGP Peer. It is enabled by default if the peerIpAddress is version 4.
    enableIpv6 : bool, default is Undefined, optional
        Enable IPv6 traffic over BGP Peer. If not specified, it is disabled by default.
    interface : str, default is Undefined, optional
        Name of the interface the BGP peer is associated with.
    interfaceRef : ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderInterfaceRef, default is Undefined, optional
        interface ref
    interfaceSelector : ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderInterfaceSelector, default is Undefined, optional
        interface selector
    ipAddress : str, default is Undefined, optional
        IP address of the interface inside Google Cloud Platform.
        Only IPv4 is supported.
    ipv4NexthopAddress : str, default is Undefined, optional
        IPv4 address of the interface inside Google Cloud Platform.
    ipv6NexthopAddress : str, default is Undefined, optional
        IPv6 address of the interface inside Google Cloud Platform.
        The address must be in the range 2600:2d00:0:2::/64 or 2600:2d00:0:3::/64.
        If you do not specify the next hop addresses, Google Cloud automatically
        assigns unused addresses from the 2600:2d00:0:2::/64 or 2600:2d00:0:3::/64 range for you.
    md5AuthenticationKey : [ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderMd5AuthenticationKeyItems0], default is Undefined, optional
        md5 authentication key
    peerAsn : float, default is Undefined, optional
        Peer BGP Autonomous System Number (ASN).
        Each BGP interface may use a different value.
    peerIpAddress : str, default is Undefined, optional
        IP address of the BGP interface outside Google Cloud Platform.
        Only IPv4 is supported. Required if ip_address is set.
    peerIpAddressRef : ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderPeerIPAddressRef, default is Undefined, optional
        peer Ip address ref
    peerIpAddressSelector : ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderPeerIPAddressSelector, default is Undefined, optional
        peer Ip address selector
    peerIpv4NexthopAddress : str, default is Undefined, optional
        IPv4 address of the BGP interface outside Google Cloud Platform.
    peerIpv6NexthopAddress : str, default is Undefined, optional
        IPv6 address of the BGP interface outside Google Cloud Platform.
        The address must be in the range 2600:2d00:0:2::/64 or 2600:2d00:0:3::/64.
        If you do not specify the next hop addresses, Google Cloud automatically
        assigns unused addresses from the 2600:2d00:0:2::/64 or 2600:2d00:0:3::/64 range for you.
    project : str, default is Undefined, optional
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
    region : str, default is Undefined, optional
        Region where the router and BgpPeer reside.
        If it is not provided, the provider region is used.
    regionRef : ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderRegionRef, default is Undefined, optional
        region ref
    regionSelector : ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderRegionSelector, default is Undefined, optional
        region selector
    routerApplianceInstance : str, default is Undefined, optional
        The URI of the VM instance that is used as third-party router appliances
        such as Next Gen Firewalls, Virtual Routers, or Router Appliances.
        The VM instance must be located in zones contained in the same region as
        this Cloud Router. The VM instance is the peer side of the BGP session.
    routerApplianceInstanceRef : ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderRouterApplianceInstanceRef, default is Undefined, optional
        router appliance instance ref
    routerApplianceInstanceSelector : ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderRouterApplianceInstanceSelector, default is Undefined, optional
        router appliance instance selector
    """


    advertiseMode?: str

    advertisedGroups?: [str]

    advertisedIpRanges?: [ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderAdvertisedIPRangesItems0]

    advertisedRoutePriority?: float

    bfd?: [ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderBfdItems0]

    customLearnedIpRanges?: [ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderCustomLearnedIPRangesItems0]

    customLearnedRoutePriority?: float

    enable?: bool

    enableIpv4?: bool

    enableIpv6?: bool

    interface?: str

    interfaceRef?: ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderInterfaceRef

    interfaceSelector?: ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderInterfaceSelector

    ipAddress?: str

    ipv4NexthopAddress?: str

    ipv6NexthopAddress?: str

    md5AuthenticationKey?: [ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderMd5AuthenticationKeyItems0]

    peerAsn?: float

    peerIpAddress?: str

    peerIpAddressRef?: ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderPeerIPAddressRef

    peerIpAddressSelector?: ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderPeerIPAddressSelector

    peerIpv4NexthopAddress?: str

    peerIpv6NexthopAddress?: str

    project?: str

    region?: str

    regionRef?: ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderRegionRef

    regionSelector?: ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderRegionSelector

    routerApplianceInstance?: str

    routerApplianceInstanceRef?: ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderRouterApplianceInstanceRef

    routerApplianceInstanceSelector?: ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderRouterApplianceInstanceSelector


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderAdvertisedIPRangesItems0:
    r"""
    compute gcp upbound io v1beta1 router peer spec init provider advertised IP ranges items0

    Attributes
    ----------
    description : str, default is Undefined, optional
        User-specified description for the IP range.
    range : str, default is Undefined, optional
        The IP range to advertise. The value must be a
        CIDR-formatted string.
    """


    description?: str

    range?: str


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderBfdItems0:
    r"""
    compute gcp upbound io v1beta1 router peer spec init provider bfd items0

    Attributes
    ----------
    minReceiveInterval : float, default is Undefined, optional
        The minimum interval, in milliseconds, between BFD control packets
        received from the peer router. The actual value is negotiated
        between the two routers and is equal to the greater of this value
        and the transmit interval of the other router. If set, this value
        must be between 1000 and 30000.
    minTransmitInterval : float, default is Undefined, optional
        The minimum interval, in milliseconds, between BFD control packets
        transmitted to the peer router. The actual value is negotiated
        between the two routers and is equal to the greater of this value
        and the corresponding receive interval of the other router. If set,
        this value must be between 1000 and 30000.
    multiplier : float, default is Undefined, optional
        The number of consecutive BFD packets that must be missed before
        BFD declares that a peer is unavailable. If set, the value must
        be a value between 5 and 16.
    sessionInitializationMode : str, default is Undefined, optional
        The BFD session initialization mode for this BGP peer.
        If set to ACTIVE, the Cloud Router will initiate the BFD session
        for this BGP peer. If set to PASSIVE, the Cloud Router will wait
        for the peer router to initiate the BFD session for this BGP peer.
        If set to DISABLED, BFD is disabled for this BGP peer.
        Possible values are: ACTIVE, DISABLED, PASSIVE.
    """


    minReceiveInterval?: float

    minTransmitInterval?: float

    multiplier?: float

    sessionInitializationMode?: str


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderCustomLearnedIPRangesItems0:
    r"""
    compute gcp upbound io v1beta1 router peer spec init provider custom learned IP ranges items0

    Attributes
    ----------
    range : str, default is Undefined, optional
        The IP range to advertise. The value must be a
        CIDR-formatted string.
    """


    range?: str


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderInterfaceRef:
    r"""
    Reference to a RouterInterface in compute to populate interface.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderInterfaceRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderInterfaceRefPolicy


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderInterfaceRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderInterfaceSelector:
    r"""
    Selector for a RouterInterface in compute to populate interface.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderInterfaceSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderInterfaceSelectorPolicy


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderInterfaceSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderMd5AuthenticationKeyItems0:
    r"""
    compute gcp upbound io v1beta1 router peer spec init provider md5 authentication key items0

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of this BGP peer. The name must be 1-63 characters long,
        and comply with RFC1035. Specifically, the name must be 1-63 characters
        long and match the regular expression [a-z]([-a-z0-9]*[a-z0-9])? which
        means the first character must be a lowercase letter, and all
        following characters must be a dash, lowercase letter, or digit,
        except the last character, which cannot be a dash.
    """


    name?: str


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderPeerIPAddressRef:
    r"""
    Reference to a Address in compute to populate peerIpAddress.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderPeerIPAddressRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderPeerIPAddressRefPolicy


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderPeerIPAddressRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderPeerIPAddressSelector:
    r"""
    Selector for a Address in compute to populate peerIpAddress.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderPeerIPAddressSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderPeerIPAddressSelectorPolicy


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderPeerIPAddressSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderRegionRef:
    r"""
    Reference to a Router in compute to populate region.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderRegionRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderRegionRefPolicy


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderRegionRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderRegionSelector:
    r"""
    Selector for a Router in compute to populate region.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderRegionSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderRegionSelectorPolicy


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderRegionSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderRouterApplianceInstanceRef:
    r"""
    Reference to a Instance in compute to populate routerApplianceInstance.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderRouterApplianceInstanceRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderRouterApplianceInstanceRefPolicy


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderRouterApplianceInstanceRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderRouterApplianceInstanceSelector:
    r"""
    Selector for a Instance in compute to populate routerApplianceInstance.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderRouterApplianceInstanceSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderRouterApplianceInstanceSelectorPolicy


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecInitProviderRouterApplianceInstanceSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ComputeGcpUpboundIoV1beta1RouterPeerSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ComputeGcpUpboundIoV1beta1RouterPeerSpecProviderConfigRefPolicy


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : ComputeGcpUpboundIoV1beta1RouterPeerSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : ComputeGcpUpboundIoV1beta1RouterPeerSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: ComputeGcpUpboundIoV1beta1RouterPeerSpecPublishConnectionDetailsToConfigRef

    metadata?: ComputeGcpUpboundIoV1beta1RouterPeerSpecPublishConnectionDetailsToMetadata

    name: str


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ComputeGcpUpboundIoV1beta1RouterPeerSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ComputeGcpUpboundIoV1beta1RouterPeerSpecPublishConnectionDetailsToConfigRefPolicy


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema ComputeGcpUpboundIoV1beta1RouterPeerSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema ComputeGcpUpboundIoV1beta1RouterPeerStatus:
    r"""
    RouterPeerStatus defines the observed state of RouterPeer.

    Attributes
    ----------
    atProvider : ComputeGcpUpboundIoV1beta1RouterPeerStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [ComputeGcpUpboundIoV1beta1RouterPeerStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: ComputeGcpUpboundIoV1beta1RouterPeerStatusAtProvider

    conditions?: [ComputeGcpUpboundIoV1beta1RouterPeerStatusConditionsItems0]

    observedGeneration?: int


schema ComputeGcpUpboundIoV1beta1RouterPeerStatusAtProvider:
    r"""
    compute gcp upbound io v1beta1 router peer status at provider

    Attributes
    ----------
    advertiseMode : str, default is Undefined, optional
        User-specified flag to indicate which mode to use for advertisement.
        Valid values of this enum field are: DEFAULT, CUSTOM
        Default value is DEFAULT.
        Possible values are: DEFAULT, CUSTOM.
    advertisedGroups : [str], default is Undefined, optional
        User-specified list of prefix groups to advertise in custom
        mode, which currently supports the following option:
    advertisedIpRanges : [ComputeGcpUpboundIoV1beta1RouterPeerStatusAtProviderAdvertisedIPRangesItems0], default is Undefined, optional
        User-specified list of individual IP ranges to advertise in
        custom mode. This field can only be populated if advertiseMode
        is CUSTOM and is advertised to all peers of the router. These IP
        ranges will be advertised in addition to any specified groups.
        Leave this field blank to advertise no custom IP ranges.
        Structure is documented below.
    advertisedRoutePriority : float, default is Undefined, optional
        The priority of routes advertised to this BGP peer.
        Where there is more than one matching route of maximum
        length, the routes with the lowest priority value win.
    bfd : [ComputeGcpUpboundIoV1beta1RouterPeerStatusAtProviderBfdItems0], default is Undefined, optional
        BFD configuration for the BGP peering.
        Structure is documented below.
    customLearnedIpRanges : [ComputeGcpUpboundIoV1beta1RouterPeerStatusAtProviderCustomLearnedIPRangesItems0], default is Undefined, optional
        custom learned Ip ranges
    customLearnedRoutePriority : float, default is Undefined, optional
        custom learned route priority
    enable : bool, default is Undefined, optional
        The status of the BGP peer connection. If set to false, any active session
        with the peer is terminated and all associated routing information is removed.
        If set to true, the peer connection can be established with routing information.
        The default is true.
    enableIpv4 : bool, default is Undefined, optional
        Enable IPv4 traffic over BGP Peer. It is enabled by default if the peerIpAddress is version 4.
    enableIpv6 : bool, default is Undefined, optional
        Enable IPv6 traffic over BGP Peer. If not specified, it is disabled by default.
    id : str, default is Undefined, optional
        an identifier for the resource with format projects/{{project}}/regions/{{region}}/routers/{{router}}/{{name}}
    interface : str, default is Undefined, optional
        Name of the interface the BGP peer is associated with.
    ipAddress : str, default is Undefined, optional
        IP address of the interface inside Google Cloud Platform.
        Only IPv4 is supported.
    ipv4NexthopAddress : str, default is Undefined, optional
        IPv4 address of the interface inside Google Cloud Platform.
    ipv6NexthopAddress : str, default is Undefined, optional
        IPv6 address of the interface inside Google Cloud Platform.
        The address must be in the range 2600:2d00:0:2::/64 or 2600:2d00:0:3::/64.
        If you do not specify the next hop addresses, Google Cloud automatically
        assigns unused addresses from the 2600:2d00:0:2::/64 or 2600:2d00:0:3::/64 range for you.
    managementType : str, default is Undefined, optional
        The resource that configures and manages this BGP peer.
    md5AuthenticationKey : [ComputeGcpUpboundIoV1beta1RouterPeerStatusAtProviderMd5AuthenticationKeyItems0], default is Undefined, optional
        md5 authentication key
    peerAsn : float, default is Undefined, optional
        Peer BGP Autonomous System Number (ASN).
        Each BGP interface may use a different value.
    peerIpAddress : str, default is Undefined, optional
        IP address of the BGP interface outside Google Cloud Platform.
        Only IPv4 is supported. Required if ip_address is set.
    peerIpv4NexthopAddress : str, default is Undefined, optional
        IPv4 address of the BGP interface outside Google Cloud Platform.
    peerIpv6NexthopAddress : str, default is Undefined, optional
        IPv6 address of the BGP interface outside Google Cloud Platform.
        The address must be in the range 2600:2d00:0:2::/64 or 2600:2d00:0:3::/64.
        If you do not specify the next hop addresses, Google Cloud automatically
        assigns unused addresses from the 2600:2d00:0:2::/64 or 2600:2d00:0:3::/64 range for you.
    project : str, default is Undefined, optional
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
    region : str, default is Undefined, optional
        Region where the router and BgpPeer reside.
        If it is not provided, the provider region is used.
    router : str, default is Undefined, optional
        The name of the Cloud Router in which this BgpPeer will be configured.
    routerApplianceInstance : str, default is Undefined, optional
        The URI of the VM instance that is used as third-party router appliances
        such as Next Gen Firewalls, Virtual Routers, or Router Appliances.
        The VM instance must be located in zones contained in the same region as
        this Cloud Router. The VM instance is the peer side of the BGP session.
    """


    advertiseMode?: str

    advertisedGroups?: [str]

    advertisedIpRanges?: [ComputeGcpUpboundIoV1beta1RouterPeerStatusAtProviderAdvertisedIPRangesItems0]

    advertisedRoutePriority?: float

    bfd?: [ComputeGcpUpboundIoV1beta1RouterPeerStatusAtProviderBfdItems0]

    customLearnedIpRanges?: [ComputeGcpUpboundIoV1beta1RouterPeerStatusAtProviderCustomLearnedIPRangesItems0]

    customLearnedRoutePriority?: float

    enable?: bool

    enableIpv4?: bool

    enableIpv6?: bool

    id?: str

    interface?: str

    ipAddress?: str

    ipv4NexthopAddress?: str

    ipv6NexthopAddress?: str

    managementType?: str

    md5AuthenticationKey?: [ComputeGcpUpboundIoV1beta1RouterPeerStatusAtProviderMd5AuthenticationKeyItems0]

    peerAsn?: float

    peerIpAddress?: str

    peerIpv4NexthopAddress?: str

    peerIpv6NexthopAddress?: str

    project?: str

    region?: str

    router?: str

    routerApplianceInstance?: str


schema ComputeGcpUpboundIoV1beta1RouterPeerStatusAtProviderAdvertisedIPRangesItems0:
    r"""
    compute gcp upbound io v1beta1 router peer status at provider advertised IP ranges items0

    Attributes
    ----------
    description : str, default is Undefined, optional
        User-specified description for the IP range.
    range : str, default is Undefined, optional
        The IP range to advertise. The value must be a
        CIDR-formatted string.
    """


    description?: str

    range?: str


schema ComputeGcpUpboundIoV1beta1RouterPeerStatusAtProviderBfdItems0:
    r"""
    compute gcp upbound io v1beta1 router peer status at provider bfd items0

    Attributes
    ----------
    minReceiveInterval : float, default is Undefined, optional
        The minimum interval, in milliseconds, between BFD control packets
        received from the peer router. The actual value is negotiated
        between the two routers and is equal to the greater of this value
        and the transmit interval of the other router. If set, this value
        must be between 1000 and 30000.
    minTransmitInterval : float, default is Undefined, optional
        The minimum interval, in milliseconds, between BFD control packets
        transmitted to the peer router. The actual value is negotiated
        between the two routers and is equal to the greater of this value
        and the corresponding receive interval of the other router. If set,
        this value must be between 1000 and 30000.
    multiplier : float, default is Undefined, optional
        The number of consecutive BFD packets that must be missed before
        BFD declares that a peer is unavailable. If set, the value must
        be a value between 5 and 16.
    sessionInitializationMode : str, default is Undefined, optional
        The BFD session initialization mode for this BGP peer.
        If set to ACTIVE, the Cloud Router will initiate the BFD session
        for this BGP peer. If set to PASSIVE, the Cloud Router will wait
        for the peer router to initiate the BFD session for this BGP peer.
        If set to DISABLED, BFD is disabled for this BGP peer.
        Possible values are: ACTIVE, DISABLED, PASSIVE.
    """


    minReceiveInterval?: float

    minTransmitInterval?: float

    multiplier?: float

    sessionInitializationMode?: str


schema ComputeGcpUpboundIoV1beta1RouterPeerStatusAtProviderCustomLearnedIPRangesItems0:
    r"""
    compute gcp upbound io v1beta1 router peer status at provider custom learned IP ranges items0

    Attributes
    ----------
    range : str, default is Undefined, optional
        The IP range to advertise. The value must be a
        CIDR-formatted string.
    """


    range?: str


schema ComputeGcpUpboundIoV1beta1RouterPeerStatusAtProviderMd5AuthenticationKeyItems0:
    r"""
    compute gcp upbound io v1beta1 router peer status at provider md5 authentication key items0

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of this BGP peer. The name must be 1-63 characters long,
        and comply with RFC1035. Specifically, the name must be 1-63 characters
        long and match the regular expression [a-z]([-a-z0-9]*[a-z0-9])? which
        means the first character must be a lowercase letter, and all
        following characters must be a dash, lowercase letter, or digit,
        except the last character, which cannot be a dash.
    """


    name?: str


schema ComputeGcpUpboundIoV1beta1RouterPeerStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


