"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema Route:
    r"""
    Route is the Schema for the Routes API. Represents a Route resource.

    Attributes
    ----------
    apiVersion : str, default is "compute.gcp.upbound.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Route", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : ComputeGcpUpboundIoV1beta1RouteSpec, default is Undefined, required
        spec
    status : ComputeGcpUpboundIoV1beta1RouteStatus, default is Undefined, optional
        status
    """


    apiVersion: "compute.gcp.upbound.io/v1beta1" = "compute.gcp.upbound.io/v1beta1"

    kind: "Route" = "Route"

    metadata?: v1.ObjectMeta

    spec: ComputeGcpUpboundIoV1beta1RouteSpec

    status?: ComputeGcpUpboundIoV1beta1RouteStatus


schema ComputeGcpUpboundIoV1beta1RouteSpec:
    r"""
    RouteSpec defines the desired state of Route

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : ComputeGcpUpboundIoV1beta1RouteSpecForProvider, default is Undefined, required
        for provider
    initProvider : ComputeGcpUpboundIoV1beta1RouteSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : ComputeGcpUpboundIoV1beta1RouteSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : ComputeGcpUpboundIoV1beta1RouteSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : ComputeGcpUpboundIoV1beta1RouteSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: ComputeGcpUpboundIoV1beta1RouteSpecForProvider

    initProvider?: ComputeGcpUpboundIoV1beta1RouteSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: ComputeGcpUpboundIoV1beta1RouteSpecProviderConfigRef

    publishConnectionDetailsTo?: ComputeGcpUpboundIoV1beta1RouteSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: ComputeGcpUpboundIoV1beta1RouteSpecWriteConnectionSecretToRef


schema ComputeGcpUpboundIoV1beta1RouteSpecForProvider:
    r"""
    compute gcp upbound io v1beta1 route spec for provider

    Attributes
    ----------
    description : str, default is Undefined, optional
        An optional description of this resource. Provide this property
        when you create the resource.
    destRange : str, default is Undefined, optional
        The destination range of outgoing packets that this route applies to.
        Only IPv4 is supported.
    network : str, default is Undefined, optional
        The network that this route applies to.
    networkRef : ComputeGcpUpboundIoV1beta1RouteSpecForProviderNetworkRef, default is Undefined, optional
        network ref
    networkSelector : ComputeGcpUpboundIoV1beta1RouteSpecForProviderNetworkSelector, default is Undefined, optional
        network selector
    nextHopGateway : str, default is Undefined, optional
        URL to a gateway that should handle matching packets.
        Currently, you can only specify the internet gateway, using a full or
        partial valid URL:
    nextHopIlb : str, default is Undefined, optional
        The IP address or URL to a forwarding rule of type
        loadBalancingScheme=INTERNAL that should handle matching
        packets.
        With the GA provider you can only specify the forwarding
        rule as a partial or full URL. For example, the following
        are all valid values:
    nextHopIlbRef : ComputeGcpUpboundIoV1beta1RouteSpecForProviderNextHopIlbRef, default is Undefined, optional
        next hop ilb ref
    nextHopIlbSelector : ComputeGcpUpboundIoV1beta1RouteSpecForProviderNextHopIlbSelector, default is Undefined, optional
        next hop ilb selector
    nextHopInstance : str, default is Undefined, optional
        URL to an instance that should handle matching packets.
        You can specify this as a full or partial URL. For example:
    nextHopInstanceZone : str, default is Undefined, optional
        .
    nextHopIp : str, default is Undefined, optional
        Network IP address of an instance that should handle matching packets.
    nextHopVpnTunnel : str, default is Undefined, optional
        URL to a VpnTunnel that should handle matching packets.
    nextHopVpnTunnelRef : ComputeGcpUpboundIoV1beta1RouteSpecForProviderNextHopVpnTunnelRef, default is Undefined, optional
        next hop vpn tunnel ref
    nextHopVpnTunnelSelector : ComputeGcpUpboundIoV1beta1RouteSpecForProviderNextHopVpnTunnelSelector, default is Undefined, optional
        next hop vpn tunnel selector
    priority : float, default is Undefined, optional
        The priority of this route. Priority is used to break ties in cases
        where there is more than one matching route of equal prefix length.
        In the case of two routes with equal prefix length, the one with the
        lowest-numbered priority value wins.
        Default value is 1000. Valid range is 0 through 65535.
    project : str, default is Undefined, optional
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
    tags : [str], default is Undefined, optional
        A list of instance tags to which this route applies.
    """


    description?: str

    destRange?: str

    network?: str

    networkRef?: ComputeGcpUpboundIoV1beta1RouteSpecForProviderNetworkRef

    networkSelector?: ComputeGcpUpboundIoV1beta1RouteSpecForProviderNetworkSelector

    nextHopGateway?: str

    nextHopIlb?: str

    nextHopIlbRef?: ComputeGcpUpboundIoV1beta1RouteSpecForProviderNextHopIlbRef

    nextHopIlbSelector?: ComputeGcpUpboundIoV1beta1RouteSpecForProviderNextHopIlbSelector

    nextHopInstance?: str

    nextHopInstanceZone?: str

    nextHopIp?: str

    nextHopVpnTunnel?: str

    nextHopVpnTunnelRef?: ComputeGcpUpboundIoV1beta1RouteSpecForProviderNextHopVpnTunnelRef

    nextHopVpnTunnelSelector?: ComputeGcpUpboundIoV1beta1RouteSpecForProviderNextHopVpnTunnelSelector

    priority?: float

    project?: str

    tags?: [str]


schema ComputeGcpUpboundIoV1beta1RouteSpecForProviderNetworkRef:
    r"""
    Reference to a Network in compute to populate network.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ComputeGcpUpboundIoV1beta1RouteSpecForProviderNetworkRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ComputeGcpUpboundIoV1beta1RouteSpecForProviderNetworkRefPolicy


schema ComputeGcpUpboundIoV1beta1RouteSpecForProviderNetworkRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouteSpecForProviderNetworkSelector:
    r"""
    Selector for a Network in compute to populate network.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ComputeGcpUpboundIoV1beta1RouteSpecForProviderNetworkSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ComputeGcpUpboundIoV1beta1RouteSpecForProviderNetworkSelectorPolicy


schema ComputeGcpUpboundIoV1beta1RouteSpecForProviderNetworkSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouteSpecForProviderNextHopIlbRef:
    r"""
    Reference to a ForwardingRule in compute to populate nextHopIlb.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ComputeGcpUpboundIoV1beta1RouteSpecForProviderNextHopIlbRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ComputeGcpUpboundIoV1beta1RouteSpecForProviderNextHopIlbRefPolicy


schema ComputeGcpUpboundIoV1beta1RouteSpecForProviderNextHopIlbRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouteSpecForProviderNextHopIlbSelector:
    r"""
    Selector for a ForwardingRule in compute to populate nextHopIlb.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ComputeGcpUpboundIoV1beta1RouteSpecForProviderNextHopIlbSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ComputeGcpUpboundIoV1beta1RouteSpecForProviderNextHopIlbSelectorPolicy


schema ComputeGcpUpboundIoV1beta1RouteSpecForProviderNextHopIlbSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouteSpecForProviderNextHopVpnTunnelRef:
    r"""
    Reference to a VPNTunnel in compute to populate nextHopVpnTunnel.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ComputeGcpUpboundIoV1beta1RouteSpecForProviderNextHopVpnTunnelRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ComputeGcpUpboundIoV1beta1RouteSpecForProviderNextHopVpnTunnelRefPolicy


schema ComputeGcpUpboundIoV1beta1RouteSpecForProviderNextHopVpnTunnelRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouteSpecForProviderNextHopVpnTunnelSelector:
    r"""
    Selector for a VPNTunnel in compute to populate nextHopVpnTunnel.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ComputeGcpUpboundIoV1beta1RouteSpecForProviderNextHopVpnTunnelSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ComputeGcpUpboundIoV1beta1RouteSpecForProviderNextHopVpnTunnelSelectorPolicy


schema ComputeGcpUpboundIoV1beta1RouteSpecForProviderNextHopVpnTunnelSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouteSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    description : str, default is Undefined, optional
        An optional description of this resource. Provide this property
        when you create the resource.
    destRange : str, default is Undefined, optional
        The destination range of outgoing packets that this route applies to.
        Only IPv4 is supported.
    network : str, default is Undefined, optional
        The network that this route applies to.
    networkRef : ComputeGcpUpboundIoV1beta1RouteSpecInitProviderNetworkRef, default is Undefined, optional
        network ref
    networkSelector : ComputeGcpUpboundIoV1beta1RouteSpecInitProviderNetworkSelector, default is Undefined, optional
        network selector
    nextHopGateway : str, default is Undefined, optional
        URL to a gateway that should handle matching packets.
        Currently, you can only specify the internet gateway, using a full or
        partial valid URL:
    nextHopIlb : str, default is Undefined, optional
        The IP address or URL to a forwarding rule of type
        loadBalancingScheme=INTERNAL that should handle matching
        packets.
        With the GA provider you can only specify the forwarding
        rule as a partial or full URL. For example, the following
        are all valid values:
    nextHopIlbRef : ComputeGcpUpboundIoV1beta1RouteSpecInitProviderNextHopIlbRef, default is Undefined, optional
        next hop ilb ref
    nextHopIlbSelector : ComputeGcpUpboundIoV1beta1RouteSpecInitProviderNextHopIlbSelector, default is Undefined, optional
        next hop ilb selector
    nextHopInstance : str, default is Undefined, optional
        URL to an instance that should handle matching packets.
        You can specify this as a full or partial URL. For example:
    nextHopInstanceZone : str, default is Undefined, optional
        .
    nextHopIp : str, default is Undefined, optional
        Network IP address of an instance that should handle matching packets.
    nextHopVpnTunnel : str, default is Undefined, optional
        URL to a VpnTunnel that should handle matching packets.
    nextHopVpnTunnelRef : ComputeGcpUpboundIoV1beta1RouteSpecInitProviderNextHopVpnTunnelRef, default is Undefined, optional
        next hop vpn tunnel ref
    nextHopVpnTunnelSelector : ComputeGcpUpboundIoV1beta1RouteSpecInitProviderNextHopVpnTunnelSelector, default is Undefined, optional
        next hop vpn tunnel selector
    priority : float, default is Undefined, optional
        The priority of this route. Priority is used to break ties in cases
        where there is more than one matching route of equal prefix length.
        In the case of two routes with equal prefix length, the one with the
        lowest-numbered priority value wins.
        Default value is 1000. Valid range is 0 through 65535.
    project : str, default is Undefined, optional
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
    tags : [str], default is Undefined, optional
        A list of instance tags to which this route applies.
    """


    description?: str

    destRange?: str

    network?: str

    networkRef?: ComputeGcpUpboundIoV1beta1RouteSpecInitProviderNetworkRef

    networkSelector?: ComputeGcpUpboundIoV1beta1RouteSpecInitProviderNetworkSelector

    nextHopGateway?: str

    nextHopIlb?: str

    nextHopIlbRef?: ComputeGcpUpboundIoV1beta1RouteSpecInitProviderNextHopIlbRef

    nextHopIlbSelector?: ComputeGcpUpboundIoV1beta1RouteSpecInitProviderNextHopIlbSelector

    nextHopInstance?: str

    nextHopInstanceZone?: str

    nextHopIp?: str

    nextHopVpnTunnel?: str

    nextHopVpnTunnelRef?: ComputeGcpUpboundIoV1beta1RouteSpecInitProviderNextHopVpnTunnelRef

    nextHopVpnTunnelSelector?: ComputeGcpUpboundIoV1beta1RouteSpecInitProviderNextHopVpnTunnelSelector

    priority?: float

    project?: str

    tags?: [str]


schema ComputeGcpUpboundIoV1beta1RouteSpecInitProviderNetworkRef:
    r"""
    Reference to a Network in compute to populate network.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ComputeGcpUpboundIoV1beta1RouteSpecInitProviderNetworkRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ComputeGcpUpboundIoV1beta1RouteSpecInitProviderNetworkRefPolicy


schema ComputeGcpUpboundIoV1beta1RouteSpecInitProviderNetworkRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouteSpecInitProviderNetworkSelector:
    r"""
    Selector for a Network in compute to populate network.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ComputeGcpUpboundIoV1beta1RouteSpecInitProviderNetworkSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ComputeGcpUpboundIoV1beta1RouteSpecInitProviderNetworkSelectorPolicy


schema ComputeGcpUpboundIoV1beta1RouteSpecInitProviderNetworkSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouteSpecInitProviderNextHopIlbRef:
    r"""
    Reference to a ForwardingRule in compute to populate nextHopIlb.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ComputeGcpUpboundIoV1beta1RouteSpecInitProviderNextHopIlbRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ComputeGcpUpboundIoV1beta1RouteSpecInitProviderNextHopIlbRefPolicy


schema ComputeGcpUpboundIoV1beta1RouteSpecInitProviderNextHopIlbRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouteSpecInitProviderNextHopIlbSelector:
    r"""
    Selector for a ForwardingRule in compute to populate nextHopIlb.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ComputeGcpUpboundIoV1beta1RouteSpecInitProviderNextHopIlbSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ComputeGcpUpboundIoV1beta1RouteSpecInitProviderNextHopIlbSelectorPolicy


schema ComputeGcpUpboundIoV1beta1RouteSpecInitProviderNextHopIlbSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouteSpecInitProviderNextHopVpnTunnelRef:
    r"""
    Reference to a VPNTunnel in compute to populate nextHopVpnTunnel.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ComputeGcpUpboundIoV1beta1RouteSpecInitProviderNextHopVpnTunnelRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ComputeGcpUpboundIoV1beta1RouteSpecInitProviderNextHopVpnTunnelRefPolicy


schema ComputeGcpUpboundIoV1beta1RouteSpecInitProviderNextHopVpnTunnelRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouteSpecInitProviderNextHopVpnTunnelSelector:
    r"""
    Selector for a VPNTunnel in compute to populate nextHopVpnTunnel.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ComputeGcpUpboundIoV1beta1RouteSpecInitProviderNextHopVpnTunnelSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ComputeGcpUpboundIoV1beta1RouteSpecInitProviderNextHopVpnTunnelSelectorPolicy


schema ComputeGcpUpboundIoV1beta1RouteSpecInitProviderNextHopVpnTunnelSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouteSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ComputeGcpUpboundIoV1beta1RouteSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ComputeGcpUpboundIoV1beta1RouteSpecProviderConfigRefPolicy


schema ComputeGcpUpboundIoV1beta1RouteSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouteSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : ComputeGcpUpboundIoV1beta1RouteSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : ComputeGcpUpboundIoV1beta1RouteSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: ComputeGcpUpboundIoV1beta1RouteSpecPublishConnectionDetailsToConfigRef

    metadata?: ComputeGcpUpboundIoV1beta1RouteSpecPublishConnectionDetailsToMetadata

    name: str


schema ComputeGcpUpboundIoV1beta1RouteSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ComputeGcpUpboundIoV1beta1RouteSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ComputeGcpUpboundIoV1beta1RouteSpecPublishConnectionDetailsToConfigRefPolicy


schema ComputeGcpUpboundIoV1beta1RouteSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouteSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema ComputeGcpUpboundIoV1beta1RouteSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema ComputeGcpUpboundIoV1beta1RouteStatus:
    r"""
    RouteStatus defines the observed state of Route.

    Attributes
    ----------
    atProvider : ComputeGcpUpboundIoV1beta1RouteStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [ComputeGcpUpboundIoV1beta1RouteStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: ComputeGcpUpboundIoV1beta1RouteStatusAtProvider

    conditions?: [ComputeGcpUpboundIoV1beta1RouteStatusConditionsItems0]

    observedGeneration?: int


schema ComputeGcpUpboundIoV1beta1RouteStatusAtProvider:
    r"""
    compute gcp upbound io v1beta1 route status at provider

    Attributes
    ----------
    description : str, default is Undefined, optional
        An optional description of this resource. Provide this property
        when you create the resource.
    destRange : str, default is Undefined, optional
        The destination range of outgoing packets that this route applies to.
        Only IPv4 is supported.
    id : str, default is Undefined, optional
        an identifier for the resource with format projects/{{project}}/global/routes/{{name}}
    network : str, default is Undefined, optional
        The network that this route applies to.
    nextHopGateway : str, default is Undefined, optional
        URL to a gateway that should handle matching packets.
        Currently, you can only specify the internet gateway, using a full or
        partial valid URL:
    nextHopIlb : str, default is Undefined, optional
        The IP address or URL to a forwarding rule of type
        loadBalancingScheme=INTERNAL that should handle matching
        packets.
        With the GA provider you can only specify the forwarding
        rule as a partial or full URL. For example, the following
        are all valid values:
    nextHopInstance : str, default is Undefined, optional
        URL to an instance that should handle matching packets.
        You can specify this as a full or partial URL. For example:
    nextHopInstanceZone : str, default is Undefined, optional
        .
    nextHopIp : str, default is Undefined, optional
        Network IP address of an instance that should handle matching packets.
    nextHopNetwork : str, default is Undefined, optional
        URL to a Network that should handle matching packets.
    nextHopVpnTunnel : str, default is Undefined, optional
        URL to a VpnTunnel that should handle matching packets.
    priority : float, default is Undefined, optional
        The priority of this route. Priority is used to break ties in cases
        where there is more than one matching route of equal prefix length.
        In the case of two routes with equal prefix length, the one with the
        lowest-numbered priority value wins.
        Default value is 1000. Valid range is 0 through 65535.
    project : str, default is Undefined, optional
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
    selfLink : str, default is Undefined, optional
        The URI of the created resource.
    tags : [str], default is Undefined, optional
        A list of instance tags to which this route applies.
    """


    description?: str

    destRange?: str

    id?: str

    network?: str

    nextHopGateway?: str

    nextHopIlb?: str

    nextHopInstance?: str

    nextHopInstanceZone?: str

    nextHopIp?: str

    nextHopNetwork?: str

    nextHopVpnTunnel?: str

    priority?: float

    project?: str

    selfLink?: str

    tags?: [str]


schema ComputeGcpUpboundIoV1beta1RouteStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


