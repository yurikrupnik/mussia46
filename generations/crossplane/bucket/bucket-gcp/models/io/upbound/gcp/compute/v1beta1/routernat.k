"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema RouterNAT:
    r"""
    RouterNAT is the Schema for the RouterNATs API. A NAT service created in a router.

    Attributes
    ----------
    apiVersion : str, default is "compute.gcp.upbound.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "RouterNAT", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : ComputeGcpUpboundIoV1beta1RouterNATSpec, default is Undefined, required
        spec
    status : ComputeGcpUpboundIoV1beta1RouterNATStatus, default is Undefined, optional
        status
    """


    apiVersion: "compute.gcp.upbound.io/v1beta1" = "compute.gcp.upbound.io/v1beta1"

    kind: "RouterNAT" = "RouterNAT"

    metadata?: v1.ObjectMeta

    spec: ComputeGcpUpboundIoV1beta1RouterNATSpec

    status?: ComputeGcpUpboundIoV1beta1RouterNATStatus


schema ComputeGcpUpboundIoV1beta1RouterNATSpec:
    r"""
    RouterNATSpec defines the desired state of RouterNAT

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : ComputeGcpUpboundIoV1beta1RouterNATSpecForProvider, default is Undefined, required
        for provider
    initProvider : ComputeGcpUpboundIoV1beta1RouterNATSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : ComputeGcpUpboundIoV1beta1RouterNATSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : ComputeGcpUpboundIoV1beta1RouterNATSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : ComputeGcpUpboundIoV1beta1RouterNATSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: ComputeGcpUpboundIoV1beta1RouterNATSpecForProvider

    initProvider?: ComputeGcpUpboundIoV1beta1RouterNATSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: ComputeGcpUpboundIoV1beta1RouterNATSpecProviderConfigRef

    publishConnectionDetailsTo?: ComputeGcpUpboundIoV1beta1RouterNATSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: ComputeGcpUpboundIoV1beta1RouterNATSpecWriteConnectionSecretToRef


schema ComputeGcpUpboundIoV1beta1RouterNATSpecForProvider:
    r"""
    compute gcp upbound io v1beta1 router n a t spec for provider

    Attributes
    ----------
    autoNetworkTier : str, default is Undefined, optional
        The network tier to use when automatically reserving NAT IP addresses.
        Must be one of: PREMIUM, STANDARD. If not specified, then the current
        project-level default tier is used.
        Possible values are: PREMIUM, STANDARD.
    drainNatIps : [str], default is Undefined, optional
        A list of URLs of the IP resources to be drained. These IPs must be
        valid static external IPs that have been assigned to the NAT.
    enableDynamicPortAllocation : bool, default is Undefined, optional
        Enable Dynamic Port Allocation.
        If minPortsPerVm is set, minPortsPerVm must be set to a power of two greater than or equal to 32.
        If minPortsPerVm is not set, a minimum of 32 ports will be allocated to a VM from this NAT config.
        If maxPortsPerVm is set, maxPortsPerVm must be set to a power of two greater than minPortsPerVm.
        If maxPortsPerVm is not set, a maximum of 65536 ports will be allocated to a VM from this NAT config.
        Mutually exclusive with enableEndpointIndependentMapping.
    enableEndpointIndependentMapping : bool, default is Undefined, optional
        Enable endpoint independent mapping.
        For more information see the official documentation.
    endpointTypes : [str], default is Undefined, optional
        Specifies the endpoint Types supported by the NAT Gateway.
        Supported values include:
        ENDPOINT_TYPE_VM, ENDPOINT_TYPE_SWG,
        ENDPOINT_TYPE_MANAGED_PROXY_LB.
    icmpIdleTimeoutSec : float, default is Undefined, optional
        Timeout (in seconds) for ICMP connections. Defaults to 30s if not set.
    logConfig : [ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderLogConfigItems0], default is Undefined, optional
        Configuration for logging on NAT
        Structure is documented below.
    maxPortsPerVm : float, default is Undefined, optional
        Maximum number of ports allocated to a VM from this NAT.
        This field can only be set when enableDynamicPortAllocation is enabled.
    minPortsPerVm : float, default is Undefined, optional
        Minimum number of ports allocated to a VM from this NAT. Defaults to 64 for static port allocation and 32 dynamic port allocation if not set.
    natIpAllocateOption : str, default is Undefined, optional
        How external IPs should be allocated for this NAT. Valid values are
        AUTO_ONLY for only allowing NAT IPs allocated by Google Cloud
        Platform, or MANUAL_ONLY for only user-allocated NAT IP addresses.
        Possible values are: MANUAL_ONLY, AUTO_ONLY.
    natIps : [str], default is Undefined, optional
        Self-links of NAT IPs. Only valid if natIpAllocateOption
        is set to MANUAL_ONLY.
    natIpsRefs : [ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderNatIpsRefsItems0], default is Undefined, optional
        References to Address in compute to populate natIps.
    natIpsSelector : ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderNatIpsSelector, default is Undefined, optional
        nat ips selector
    project : str, default is Undefined, optional
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
    region : str, default is Undefined, required
        Region where the router and NAT reside.
    router : str, default is Undefined, optional
        The name of the Cloud Router in which this NAT will be configured.
    routerRef : ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderRouterRef, default is Undefined, optional
        router ref
    routerSelector : ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderRouterSelector, default is Undefined, optional
        router selector
    rules : [ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderRulesItems0], default is Undefined, optional
        A list of rules associated with this NAT.
        Structure is documented below.
    sourceSubnetworkIpRangesToNat : str, default is Undefined, optional
        How NAT should be configured per Subnetwork.
        If ALL_SUBNETWORKS_ALL_IP_RANGES, all of the
        IP ranges in every Subnetwork are allowed to Nat.
        If ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, all of the primary IP
        ranges in every Subnetwork are allowed to Nat.
        LIST_OF_SUBNETWORKS: A list of Subnetworks are allowed to Nat
        (specified in the field subnetwork below). Note that if this field
        contains ALL_SUBNETWORKS_ALL_IP_RANGES or
        ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, then there should not be any
        other RouterNat section in any Router for this network in this region.
        Possible values are: ALL_SUBNETWORKS_ALL_IP_RANGES, ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, LIST_OF_SUBNETWORKS.
    subnetwork : [ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderSubnetworkItems0], default is Undefined, optional
        One or more subnetwork NAT configurations. Only used if
        source_subnetwork_ip_ranges_to_nat is set to LIST_OF_SUBNETWORKS
        Structure is documented below.
    tcpEstablishedIdleTimeoutSec : float, default is Undefined, optional
        Timeout (in seconds) for TCP established connections.
        Defaults to 1200s if not set.
    tcpTimeWaitTimeoutSec : float, default is Undefined, optional
        Timeout (in seconds) for TCP connections that are in TIME_WAIT state.
        Defaults to 120s if not set.
    tcpTransitoryIdleTimeoutSec : float, default is Undefined, optional
        Timeout (in seconds) for TCP transitory connections.
        Defaults to 30s if not set.
    udpIdleTimeoutSec : float, default is Undefined, optional
        Timeout (in seconds) for UDP connections. Defaults to 30s if not set.
    """


    autoNetworkTier?: str

    drainNatIps?: [str]

    enableDynamicPortAllocation?: bool

    enableEndpointIndependentMapping?: bool

    endpointTypes?: [str]

    icmpIdleTimeoutSec?: float

    logConfig?: [ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderLogConfigItems0]

    maxPortsPerVm?: float

    minPortsPerVm?: float

    natIpAllocateOption?: str

    natIps?: [str]

    natIpsRefs?: [ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderNatIpsRefsItems0]

    natIpsSelector?: ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderNatIpsSelector

    project?: str

    region: str

    router?: str

    routerRef?: ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderRouterRef

    routerSelector?: ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderRouterSelector

    rules?: [ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderRulesItems0]

    sourceSubnetworkIpRangesToNat?: str

    subnetwork?: [ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderSubnetworkItems0]

    tcpEstablishedIdleTimeoutSec?: float

    tcpTimeWaitTimeoutSec?: float

    tcpTransitoryIdleTimeoutSec?: float

    udpIdleTimeoutSec?: float


schema ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderLogConfigItems0:
    r"""
    compute gcp upbound io v1beta1 router n a t spec for provider log config items0

    Attributes
    ----------
    enable : bool, default is Undefined, optional
        Indicates whether or not to export logs.
    $filter : str, default is Undefined, optional
        Specifies the desired filtering of logs on this NAT.
        Possible values are: ERRORS_ONLY, TRANSLATIONS_ONLY, ALL.
    """


    enable?: bool

    $filter?: str


schema ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderNatIpsRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderNatIpsRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderNatIpsRefsItems0Policy


schema ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderNatIpsRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderNatIpsSelector:
    r"""
    Selector for a list of Address in compute to populate natIps.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderNatIpsSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderNatIpsSelectorPolicy


schema ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderNatIpsSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderRouterRef:
    r"""
    Reference to a Router in compute to populate router.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderRouterRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderRouterRefPolicy


schema ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderRouterRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderRouterSelector:
    r"""
    Selector for a Router in compute to populate router.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderRouterSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderRouterSelectorPolicy


schema ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderRouterSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderRulesItems0:
    r"""
    compute gcp upbound io v1beta1 router n a t spec for provider rules items0

    Attributes
    ----------
    action : [ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderRulesItems0ActionItems0], default is Undefined, optional
        The action to be enforced for traffic that matches this rule.
        Structure is documented below.
    description : str, default is Undefined, optional
        An optional description of this rule.
    match : str, default is Undefined, optional
        CEL expression that specifies the match condition that egress traffic from a VM is evaluated against.
        If it evaluates to true, the corresponding action is enforced.
        The following examples are valid match expressions for public NAT:
        "inIpRange(destination.ip, '1.1.0.0/16') || inIpRange(destination.ip, '2.2.0.0/16')"
        "destination.ip == '1.1.0.1' || destination.ip == '8.8.8.8'"
        The following example is a valid match expression for private NAT:
        "nexthop.hub == 'https://networkconnectivity.googleapis.com/v1alpha1/projects/my-project/global/hub/hub-1'"
    ruleNumber : float, default is Undefined, optional
        An integer uniquely identifying a rule in the list.
        The rule number must be a positive value between 0 and 65000, and must be unique among rules within a NAT.
    """


    action?: [ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderRulesItems0ActionItems0]

    description?: str

    match?: str

    ruleNumber?: float


schema ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderRulesItems0ActionItems0:
    r"""
    compute gcp upbound io v1beta1 router n a t spec for provider rules items0 action items0

    Attributes
    ----------
    sourceNatActiveIps : [str], default is Undefined, optional
        A list of URLs of the IP resources used for this NAT rule.
        These IP addresses must be valid static external IP addresses assigned to the project.
        This field is used for public NAT.
    sourceNatActiveIpsRefs : [ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderRulesItems0ActionItems0SourceNatActiveIpsRefsItems0], default is Undefined, optional
        References to Address in compute to populate sourceNatActiveIps.
    sourceNatActiveIpsSelector : ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderRulesItems0ActionItems0SourceNatActiveIpsSelector, default is Undefined, optional
        source nat active ips selector
    sourceNatDrainIps : [str], default is Undefined, optional
        A list of URLs of the IP resources to be drained.
        These IPs must be valid static external IPs that have been assigned to the NAT.
        These IPs should be used for updating/patching a NAT rule only.
        This field is used for public NAT.
    """


    sourceNatActiveIps?: [str]

    sourceNatActiveIpsRefs?: [ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderRulesItems0ActionItems0SourceNatActiveIpsRefsItems0]

    sourceNatActiveIpsSelector?: ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderRulesItems0ActionItems0SourceNatActiveIpsSelector

    sourceNatDrainIps?: [str]


schema ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderRulesItems0ActionItems0SourceNatActiveIpsRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderRulesItems0ActionItems0SourceNatActiveIpsRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderRulesItems0ActionItems0SourceNatActiveIpsRefsItems0Policy


schema ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderRulesItems0ActionItems0SourceNatActiveIpsRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderRulesItems0ActionItems0SourceNatActiveIpsSelector:
    r"""
    Selector for a list of Address in compute to populate sourceNatActiveIps.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderRulesItems0ActionItems0SourceNatActiveIpsSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderRulesItems0ActionItems0SourceNatActiveIpsSelectorPolicy


schema ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderRulesItems0ActionItems0SourceNatActiveIpsSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderSubnetworkItems0:
    r"""
    compute gcp upbound io v1beta1 router n a t spec for provider subnetwork items0

    Attributes
    ----------
    name : str, default is Undefined, optional
        Self-link of subnetwork to NAT
    nameRef : ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderSubnetworkItems0NameRef, default is Undefined, optional
        name ref
    nameSelector : ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderSubnetworkItems0NameSelector, default is Undefined, optional
        name selector
    secondaryIpRangeNames : [str], default is Undefined, optional
        List of the secondary ranges of the subnetwork that are allowed
        to use NAT. This can be populated only if
        LIST_OF_SECONDARY_IP_RANGES is one of the values in
        sourceIpRangesToNat
    sourceIpRangesToNat : [str], default is Undefined, optional
        List of options for which source IPs in the subnetwork
        should have NAT enabled. Supported values include:
        ALL_IP_RANGES, LIST_OF_SECONDARY_IP_RANGES,
        PRIMARY_IP_RANGE.
    """


    name?: str

    nameRef?: ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderSubnetworkItems0NameRef

    nameSelector?: ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderSubnetworkItems0NameSelector

    secondaryIpRangeNames?: [str]

    sourceIpRangesToNat?: [str]


schema ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderSubnetworkItems0NameRef:
    r"""
    Reference to a Subnetwork in compute to populate name.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderSubnetworkItems0NameRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderSubnetworkItems0NameRefPolicy


schema ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderSubnetworkItems0NameRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderSubnetworkItems0NameSelector:
    r"""
    Selector for a Subnetwork in compute to populate name.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderSubnetworkItems0NameSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderSubnetworkItems0NameSelectorPolicy


schema ComputeGcpUpboundIoV1beta1RouterNATSpecForProviderSubnetworkItems0NameSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouterNATSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    autoNetworkTier : str, default is Undefined, optional
        The network tier to use when automatically reserving NAT IP addresses.
        Must be one of: PREMIUM, STANDARD. If not specified, then the current
        project-level default tier is used.
        Possible values are: PREMIUM, STANDARD.
    drainNatIps : [str], default is Undefined, optional
        A list of URLs of the IP resources to be drained. These IPs must be
        valid static external IPs that have been assigned to the NAT.
    enableDynamicPortAllocation : bool, default is Undefined, optional
        Enable Dynamic Port Allocation.
        If minPortsPerVm is set, minPortsPerVm must be set to a power of two greater than or equal to 32.
        If minPortsPerVm is not set, a minimum of 32 ports will be allocated to a VM from this NAT config.
        If maxPortsPerVm is set, maxPortsPerVm must be set to a power of two greater than minPortsPerVm.
        If maxPortsPerVm is not set, a maximum of 65536 ports will be allocated to a VM from this NAT config.
        Mutually exclusive with enableEndpointIndependentMapping.
    enableEndpointIndependentMapping : bool, default is Undefined, optional
        Enable endpoint independent mapping.
        For more information see the official documentation.
    endpointTypes : [str], default is Undefined, optional
        Specifies the endpoint Types supported by the NAT Gateway.
        Supported values include:
        ENDPOINT_TYPE_VM, ENDPOINT_TYPE_SWG,
        ENDPOINT_TYPE_MANAGED_PROXY_LB.
    icmpIdleTimeoutSec : float, default is Undefined, optional
        Timeout (in seconds) for ICMP connections. Defaults to 30s if not set.
    logConfig : [ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderLogConfigItems0], default is Undefined, optional
        Configuration for logging on NAT
        Structure is documented below.
    maxPortsPerVm : float, default is Undefined, optional
        Maximum number of ports allocated to a VM from this NAT.
        This field can only be set when enableDynamicPortAllocation is enabled.
    minPortsPerVm : float, default is Undefined, optional
        Minimum number of ports allocated to a VM from this NAT. Defaults to 64 for static port allocation and 32 dynamic port allocation if not set.
    natIpAllocateOption : str, default is Undefined, optional
        How external IPs should be allocated for this NAT. Valid values are
        AUTO_ONLY for only allowing NAT IPs allocated by Google Cloud
        Platform, or MANUAL_ONLY for only user-allocated NAT IP addresses.
        Possible values are: MANUAL_ONLY, AUTO_ONLY.
    natIps : [str], default is Undefined, optional
        Self-links of NAT IPs. Only valid if natIpAllocateOption
        is set to MANUAL_ONLY.
    natIpsRefs : [ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderNatIpsRefsItems0], default is Undefined, optional
        References to Address in compute to populate natIps.
    natIpsSelector : ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderNatIpsSelector, default is Undefined, optional
        nat ips selector
    project : str, default is Undefined, optional
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
    rules : [ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderRulesItems0], default is Undefined, optional
        A list of rules associated with this NAT.
        Structure is documented below.
    sourceSubnetworkIpRangesToNat : str, default is Undefined, optional
        How NAT should be configured per Subnetwork.
        If ALL_SUBNETWORKS_ALL_IP_RANGES, all of the
        IP ranges in every Subnetwork are allowed to Nat.
        If ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, all of the primary IP
        ranges in every Subnetwork are allowed to Nat.
        LIST_OF_SUBNETWORKS: A list of Subnetworks are allowed to Nat
        (specified in the field subnetwork below). Note that if this field
        contains ALL_SUBNETWORKS_ALL_IP_RANGES or
        ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, then there should not be any
        other RouterNat section in any Router for this network in this region.
        Possible values are: ALL_SUBNETWORKS_ALL_IP_RANGES, ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, LIST_OF_SUBNETWORKS.
    subnetwork : [ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderSubnetworkItems0], default is Undefined, optional
        One or more subnetwork NAT configurations. Only used if
        source_subnetwork_ip_ranges_to_nat is set to LIST_OF_SUBNETWORKS
        Structure is documented below.
    tcpEstablishedIdleTimeoutSec : float, default is Undefined, optional
        Timeout (in seconds) for TCP established connections.
        Defaults to 1200s if not set.
    tcpTimeWaitTimeoutSec : float, default is Undefined, optional
        Timeout (in seconds) for TCP connections that are in TIME_WAIT state.
        Defaults to 120s if not set.
    tcpTransitoryIdleTimeoutSec : float, default is Undefined, optional
        Timeout (in seconds) for TCP transitory connections.
        Defaults to 30s if not set.
    udpIdleTimeoutSec : float, default is Undefined, optional
        Timeout (in seconds) for UDP connections. Defaults to 30s if not set.
    """


    autoNetworkTier?: str

    drainNatIps?: [str]

    enableDynamicPortAllocation?: bool

    enableEndpointIndependentMapping?: bool

    endpointTypes?: [str]

    icmpIdleTimeoutSec?: float

    logConfig?: [ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderLogConfigItems0]

    maxPortsPerVm?: float

    minPortsPerVm?: float

    natIpAllocateOption?: str

    natIps?: [str]

    natIpsRefs?: [ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderNatIpsRefsItems0]

    natIpsSelector?: ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderNatIpsSelector

    project?: str

    rules?: [ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderRulesItems0]

    sourceSubnetworkIpRangesToNat?: str

    subnetwork?: [ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderSubnetworkItems0]

    tcpEstablishedIdleTimeoutSec?: float

    tcpTimeWaitTimeoutSec?: float

    tcpTransitoryIdleTimeoutSec?: float

    udpIdleTimeoutSec?: float


schema ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderLogConfigItems0:
    r"""
    compute gcp upbound io v1beta1 router n a t spec init provider log config items0

    Attributes
    ----------
    enable : bool, default is Undefined, optional
        Indicates whether or not to export logs.
    $filter : str, default is Undefined, optional
        Specifies the desired filtering of logs on this NAT.
        Possible values are: ERRORS_ONLY, TRANSLATIONS_ONLY, ALL.
    """


    enable?: bool

    $filter?: str


schema ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderNatIpsRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderNatIpsRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderNatIpsRefsItems0Policy


schema ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderNatIpsRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderNatIpsSelector:
    r"""
    Selector for a list of Address in compute to populate natIps.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderNatIpsSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderNatIpsSelectorPolicy


schema ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderNatIpsSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderRulesItems0:
    r"""
    compute gcp upbound io v1beta1 router n a t spec init provider rules items0

    Attributes
    ----------
    action : [ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderRulesItems0ActionItems0], default is Undefined, optional
        The action to be enforced for traffic that matches this rule.
        Structure is documented below.
    description : str, default is Undefined, optional
        An optional description of this rule.
    match : str, default is Undefined, optional
        CEL expression that specifies the match condition that egress traffic from a VM is evaluated against.
        If it evaluates to true, the corresponding action is enforced.
        The following examples are valid match expressions for public NAT:
        "inIpRange(destination.ip, '1.1.0.0/16') || inIpRange(destination.ip, '2.2.0.0/16')"
        "destination.ip == '1.1.0.1' || destination.ip == '8.8.8.8'"
        The following example is a valid match expression for private NAT:
        "nexthop.hub == 'https://networkconnectivity.googleapis.com/v1alpha1/projects/my-project/global/hub/hub-1'"
    ruleNumber : float, default is Undefined, optional
        An integer uniquely identifying a rule in the list.
        The rule number must be a positive value between 0 and 65000, and must be unique among rules within a NAT.
    """


    action?: [ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderRulesItems0ActionItems0]

    description?: str

    match?: str

    ruleNumber?: float


schema ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderRulesItems0ActionItems0:
    r"""
    compute gcp upbound io v1beta1 router n a t spec init provider rules items0 action items0

    Attributes
    ----------
    sourceNatActiveIps : [str], default is Undefined, optional
        A list of URLs of the IP resources used for this NAT rule.
        These IP addresses must be valid static external IP addresses assigned to the project.
        This field is used for public NAT.
    sourceNatActiveIpsRefs : [ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderRulesItems0ActionItems0SourceNatActiveIpsRefsItems0], default is Undefined, optional
        References to Address in compute to populate sourceNatActiveIps.
    sourceNatActiveIpsSelector : ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderRulesItems0ActionItems0SourceNatActiveIpsSelector, default is Undefined, optional
        source nat active ips selector
    sourceNatDrainIps : [str], default is Undefined, optional
        A list of URLs of the IP resources to be drained.
        These IPs must be valid static external IPs that have been assigned to the NAT.
        These IPs should be used for updating/patching a NAT rule only.
        This field is used for public NAT.
    """


    sourceNatActiveIps?: [str]

    sourceNatActiveIpsRefs?: [ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderRulesItems0ActionItems0SourceNatActiveIpsRefsItems0]

    sourceNatActiveIpsSelector?: ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderRulesItems0ActionItems0SourceNatActiveIpsSelector

    sourceNatDrainIps?: [str]


schema ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderRulesItems0ActionItems0SourceNatActiveIpsRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderRulesItems0ActionItems0SourceNatActiveIpsRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderRulesItems0ActionItems0SourceNatActiveIpsRefsItems0Policy


schema ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderRulesItems0ActionItems0SourceNatActiveIpsRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderRulesItems0ActionItems0SourceNatActiveIpsSelector:
    r"""
    Selector for a list of Address in compute to populate sourceNatActiveIps.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderRulesItems0ActionItems0SourceNatActiveIpsSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderRulesItems0ActionItems0SourceNatActiveIpsSelectorPolicy


schema ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderRulesItems0ActionItems0SourceNatActiveIpsSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderSubnetworkItems0:
    r"""
    compute gcp upbound io v1beta1 router n a t spec init provider subnetwork items0

    Attributes
    ----------
    name : str, default is Undefined, optional
        Self-link of subnetwork to NAT
    nameRef : ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderSubnetworkItems0NameRef, default is Undefined, optional
        name ref
    nameSelector : ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderSubnetworkItems0NameSelector, default is Undefined, optional
        name selector
    secondaryIpRangeNames : [str], default is Undefined, optional
        List of the secondary ranges of the subnetwork that are allowed
        to use NAT. This can be populated only if
        LIST_OF_SECONDARY_IP_RANGES is one of the values in
        sourceIpRangesToNat
    sourceIpRangesToNat : [str], default is Undefined, optional
        List of options for which source IPs in the subnetwork
        should have NAT enabled. Supported values include:
        ALL_IP_RANGES, LIST_OF_SECONDARY_IP_RANGES,
        PRIMARY_IP_RANGE.
    """


    name?: str

    nameRef?: ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderSubnetworkItems0NameRef

    nameSelector?: ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderSubnetworkItems0NameSelector

    secondaryIpRangeNames?: [str]

    sourceIpRangesToNat?: [str]


schema ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderSubnetworkItems0NameRef:
    r"""
    Reference to a Subnetwork in compute to populate name.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderSubnetworkItems0NameRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderSubnetworkItems0NameRefPolicy


schema ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderSubnetworkItems0NameRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderSubnetworkItems0NameSelector:
    r"""
    Selector for a Subnetwork in compute to populate name.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderSubnetworkItems0NameSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderSubnetworkItems0NameSelectorPolicy


schema ComputeGcpUpboundIoV1beta1RouterNATSpecInitProviderSubnetworkItems0NameSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouterNATSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ComputeGcpUpboundIoV1beta1RouterNATSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ComputeGcpUpboundIoV1beta1RouterNATSpecProviderConfigRefPolicy


schema ComputeGcpUpboundIoV1beta1RouterNATSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouterNATSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : ComputeGcpUpboundIoV1beta1RouterNATSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : ComputeGcpUpboundIoV1beta1RouterNATSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: ComputeGcpUpboundIoV1beta1RouterNATSpecPublishConnectionDetailsToConfigRef

    metadata?: ComputeGcpUpboundIoV1beta1RouterNATSpecPublishConnectionDetailsToMetadata

    name: str


schema ComputeGcpUpboundIoV1beta1RouterNATSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ComputeGcpUpboundIoV1beta1RouterNATSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ComputeGcpUpboundIoV1beta1RouterNATSpecPublishConnectionDetailsToConfigRefPolicy


schema ComputeGcpUpboundIoV1beta1RouterNATSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta1RouterNATSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema ComputeGcpUpboundIoV1beta1RouterNATSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema ComputeGcpUpboundIoV1beta1RouterNATStatus:
    r"""
    RouterNATStatus defines the observed state of RouterNAT.

    Attributes
    ----------
    atProvider : ComputeGcpUpboundIoV1beta1RouterNATStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [ComputeGcpUpboundIoV1beta1RouterNATStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: ComputeGcpUpboundIoV1beta1RouterNATStatusAtProvider

    conditions?: [ComputeGcpUpboundIoV1beta1RouterNATStatusConditionsItems0]

    observedGeneration?: int


schema ComputeGcpUpboundIoV1beta1RouterNATStatusAtProvider:
    r"""
    compute gcp upbound io v1beta1 router n a t status at provider

    Attributes
    ----------
    autoNetworkTier : str, default is Undefined, optional
        The network tier to use when automatically reserving NAT IP addresses.
        Must be one of: PREMIUM, STANDARD. If not specified, then the current
        project-level default tier is used.
        Possible values are: PREMIUM, STANDARD.
    drainNatIps : [str], default is Undefined, optional
        A list of URLs of the IP resources to be drained. These IPs must be
        valid static external IPs that have been assigned to the NAT.
    enableDynamicPortAllocation : bool, default is Undefined, optional
        Enable Dynamic Port Allocation.
        If minPortsPerVm is set, minPortsPerVm must be set to a power of two greater than or equal to 32.
        If minPortsPerVm is not set, a minimum of 32 ports will be allocated to a VM from this NAT config.
        If maxPortsPerVm is set, maxPortsPerVm must be set to a power of two greater than minPortsPerVm.
        If maxPortsPerVm is not set, a maximum of 65536 ports will be allocated to a VM from this NAT config.
        Mutually exclusive with enableEndpointIndependentMapping.
    enableEndpointIndependentMapping : bool, default is Undefined, optional
        Enable endpoint independent mapping.
        For more information see the official documentation.
    endpointTypes : [str], default is Undefined, optional
        Specifies the endpoint Types supported by the NAT Gateway.
        Supported values include:
        ENDPOINT_TYPE_VM, ENDPOINT_TYPE_SWG,
        ENDPOINT_TYPE_MANAGED_PROXY_LB.
    icmpIdleTimeoutSec : float, default is Undefined, optional
        Timeout (in seconds) for ICMP connections. Defaults to 30s if not set.
    id : str, default is Undefined, optional
        an identifier for the resource with format {{project}}/{{region}}/{{router}}/{{name}}
    logConfig : [ComputeGcpUpboundIoV1beta1RouterNATStatusAtProviderLogConfigItems0], default is Undefined, optional
        Configuration for logging on NAT
        Structure is documented below.
    maxPortsPerVm : float, default is Undefined, optional
        Maximum number of ports allocated to a VM from this NAT.
        This field can only be set when enableDynamicPortAllocation is enabled.
    minPortsPerVm : float, default is Undefined, optional
        Minimum number of ports allocated to a VM from this NAT. Defaults to 64 for static port allocation and 32 dynamic port allocation if not set.
    natIpAllocateOption : str, default is Undefined, optional
        How external IPs should be allocated for this NAT. Valid values are
        AUTO_ONLY for only allowing NAT IPs allocated by Google Cloud
        Platform, or MANUAL_ONLY for only user-allocated NAT IP addresses.
        Possible values are: MANUAL_ONLY, AUTO_ONLY.
    natIps : [str], default is Undefined, optional
        Self-links of NAT IPs. Only valid if natIpAllocateOption
        is set to MANUAL_ONLY.
    project : str, default is Undefined, optional
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
    region : str, default is Undefined, optional
        Region where the router and NAT reside.
    router : str, default is Undefined, optional
        The name of the Cloud Router in which this NAT will be configured.
    rules : [ComputeGcpUpboundIoV1beta1RouterNATStatusAtProviderRulesItems0], default is Undefined, optional
        A list of rules associated with this NAT.
        Structure is documented below.
    sourceSubnetworkIpRangesToNat : str, default is Undefined, optional
        How NAT should be configured per Subnetwork.
        If ALL_SUBNETWORKS_ALL_IP_RANGES, all of the
        IP ranges in every Subnetwork are allowed to Nat.
        If ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, all of the primary IP
        ranges in every Subnetwork are allowed to Nat.
        LIST_OF_SUBNETWORKS: A list of Subnetworks are allowed to Nat
        (specified in the field subnetwork below). Note that if this field
        contains ALL_SUBNETWORKS_ALL_IP_RANGES or
        ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, then there should not be any
        other RouterNat section in any Router for this network in this region.
        Possible values are: ALL_SUBNETWORKS_ALL_IP_RANGES, ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, LIST_OF_SUBNETWORKS.
    subnetwork : [ComputeGcpUpboundIoV1beta1RouterNATStatusAtProviderSubnetworkItems0], default is Undefined, optional
        One or more subnetwork NAT configurations. Only used if
        source_subnetwork_ip_ranges_to_nat is set to LIST_OF_SUBNETWORKS
        Structure is documented below.
    tcpEstablishedIdleTimeoutSec : float, default is Undefined, optional
        Timeout (in seconds) for TCP established connections.
        Defaults to 1200s if not set.
    tcpTimeWaitTimeoutSec : float, default is Undefined, optional
        Timeout (in seconds) for TCP connections that are in TIME_WAIT state.
        Defaults to 120s if not set.
    tcpTransitoryIdleTimeoutSec : float, default is Undefined, optional
        Timeout (in seconds) for TCP transitory connections.
        Defaults to 30s if not set.
    udpIdleTimeoutSec : float, default is Undefined, optional
        Timeout (in seconds) for UDP connections. Defaults to 30s if not set.
    """


    autoNetworkTier?: str

    drainNatIps?: [str]

    enableDynamicPortAllocation?: bool

    enableEndpointIndependentMapping?: bool

    endpointTypes?: [str]

    icmpIdleTimeoutSec?: float

    id?: str

    logConfig?: [ComputeGcpUpboundIoV1beta1RouterNATStatusAtProviderLogConfigItems0]

    maxPortsPerVm?: float

    minPortsPerVm?: float

    natIpAllocateOption?: str

    natIps?: [str]

    project?: str

    region?: str

    router?: str

    rules?: [ComputeGcpUpboundIoV1beta1RouterNATStatusAtProviderRulesItems0]

    sourceSubnetworkIpRangesToNat?: str

    subnetwork?: [ComputeGcpUpboundIoV1beta1RouterNATStatusAtProviderSubnetworkItems0]

    tcpEstablishedIdleTimeoutSec?: float

    tcpTimeWaitTimeoutSec?: float

    tcpTransitoryIdleTimeoutSec?: float

    udpIdleTimeoutSec?: float


schema ComputeGcpUpboundIoV1beta1RouterNATStatusAtProviderLogConfigItems0:
    r"""
    compute gcp upbound io v1beta1 router n a t status at provider log config items0

    Attributes
    ----------
    enable : bool, default is Undefined, optional
        Indicates whether or not to export logs.
    $filter : str, default is Undefined, optional
        Specifies the desired filtering of logs on this NAT.
        Possible values are: ERRORS_ONLY, TRANSLATIONS_ONLY, ALL.
    """


    enable?: bool

    $filter?: str


schema ComputeGcpUpboundIoV1beta1RouterNATStatusAtProviderRulesItems0:
    r"""
    compute gcp upbound io v1beta1 router n a t status at provider rules items0

    Attributes
    ----------
    action : [ComputeGcpUpboundIoV1beta1RouterNATStatusAtProviderRulesItems0ActionItems0], default is Undefined, optional
        The action to be enforced for traffic that matches this rule.
        Structure is documented below.
    description : str, default is Undefined, optional
        An optional description of this rule.
    match : str, default is Undefined, optional
        CEL expression that specifies the match condition that egress traffic from a VM is evaluated against.
        If it evaluates to true, the corresponding action is enforced.
        The following examples are valid match expressions for public NAT:
        "inIpRange(destination.ip, '1.1.0.0/16') || inIpRange(destination.ip, '2.2.0.0/16')"
        "destination.ip == '1.1.0.1' || destination.ip == '8.8.8.8'"
        The following example is a valid match expression for private NAT:
        "nexthop.hub == 'https://networkconnectivity.googleapis.com/v1alpha1/projects/my-project/global/hub/hub-1'"
    ruleNumber : float, default is Undefined, optional
        An integer uniquely identifying a rule in the list.
        The rule number must be a positive value between 0 and 65000, and must be unique among rules within a NAT.
    """


    action?: [ComputeGcpUpboundIoV1beta1RouterNATStatusAtProviderRulesItems0ActionItems0]

    description?: str

    match?: str

    ruleNumber?: float


schema ComputeGcpUpboundIoV1beta1RouterNATStatusAtProviderRulesItems0ActionItems0:
    r"""
    compute gcp upbound io v1beta1 router n a t status at provider rules items0 action items0

    Attributes
    ----------
    sourceNatActiveIps : [str], default is Undefined, optional
        A list of URLs of the IP resources used for this NAT rule.
        These IP addresses must be valid static external IP addresses assigned to the project.
        This field is used for public NAT.
    sourceNatDrainIps : [str], default is Undefined, optional
        A list of URLs of the IP resources to be drained.
        These IPs must be valid static external IPs that have been assigned to the NAT.
        These IPs should be used for updating/patching a NAT rule only.
        This field is used for public NAT.
    """


    sourceNatActiveIps?: [str]

    sourceNatDrainIps?: [str]


schema ComputeGcpUpboundIoV1beta1RouterNATStatusAtProviderSubnetworkItems0:
    r"""
    compute gcp upbound io v1beta1 router n a t status at provider subnetwork items0

    Attributes
    ----------
    name : str, default is Undefined, optional
        Self-link of subnetwork to NAT
    secondaryIpRangeNames : [str], default is Undefined, optional
        List of the secondary ranges of the subnetwork that are allowed
        to use NAT. This can be populated only if
        LIST_OF_SECONDARY_IP_RANGES is one of the values in
        sourceIpRangesToNat
    sourceIpRangesToNat : [str], default is Undefined, optional
        List of options for which source IPs in the subnetwork
        should have NAT enabled. Supported values include:
        ALL_IP_RANGES, LIST_OF_SECONDARY_IP_RANGES,
        PRIMARY_IP_RANGE.
    """


    name?: str

    secondaryIpRangeNames?: [str]

    sourceIpRangesToNat?: [str]


schema ComputeGcpUpboundIoV1beta1RouterNATStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


