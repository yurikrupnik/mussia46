"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema BackendBucket:
    r"""
    BackendBucket is the Schema for the BackendBuckets API. Backend buckets allow you to use Google Cloud Storage buckets with HTTP(S) load balancing.

    Attributes
    ----------
    apiVersion : str, default is "compute.gcp.upbound.io/v1beta2", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "BackendBucket", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : ComputeGcpUpboundIoV1beta2BackendBucketSpec, default is Undefined, required
        spec
    status : ComputeGcpUpboundIoV1beta2BackendBucketStatus, default is Undefined, optional
        status
    """


    apiVersion: "compute.gcp.upbound.io/v1beta2" = "compute.gcp.upbound.io/v1beta2"

    kind: "BackendBucket" = "BackendBucket"

    metadata?: v1.ObjectMeta

    spec: ComputeGcpUpboundIoV1beta2BackendBucketSpec

    status?: ComputeGcpUpboundIoV1beta2BackendBucketStatus


schema ComputeGcpUpboundIoV1beta2BackendBucketSpec:
    r"""
    BackendBucketSpec defines the desired state of BackendBucket

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : ComputeGcpUpboundIoV1beta2BackendBucketSpecForProvider, default is Undefined, required
        for provider
    initProvider : ComputeGcpUpboundIoV1beta2BackendBucketSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : ComputeGcpUpboundIoV1beta2BackendBucketSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : ComputeGcpUpboundIoV1beta2BackendBucketSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : ComputeGcpUpboundIoV1beta2BackendBucketSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: ComputeGcpUpboundIoV1beta2BackendBucketSpecForProvider

    initProvider?: ComputeGcpUpboundIoV1beta2BackendBucketSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: ComputeGcpUpboundIoV1beta2BackendBucketSpecProviderConfigRef

    publishConnectionDetailsTo?: ComputeGcpUpboundIoV1beta2BackendBucketSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: ComputeGcpUpboundIoV1beta2BackendBucketSpecWriteConnectionSecretToRef


schema ComputeGcpUpboundIoV1beta2BackendBucketSpecForProvider:
    r"""
    compute gcp upbound io v1beta2 backend bucket spec for provider

    Attributes
    ----------
    bucketName : str, default is Undefined, optional
        Cloud Storage bucket name.
    bucketNameRef : ComputeGcpUpboundIoV1beta2BackendBucketSpecForProviderBucketNameRef, default is Undefined, optional
        bucket name ref
    bucketNameSelector : ComputeGcpUpboundIoV1beta2BackendBucketSpecForProviderBucketNameSelector, default is Undefined, optional
        bucket name selector
    cdnPolicy : ComputeGcpUpboundIoV1beta2BackendBucketSpecForProviderCdnPolicy, default is Undefined, optional
        cdn policy
    compressionMode : str, default is Undefined, optional
        Compress text responses using Brotli or gzip compression, based on the client's Accept-Encoding header.
        Possible values are: AUTOMATIC, DISABLED.
    customResponseHeaders : [str], default is Undefined, optional
        Headers that the HTTP/S load balancer should add to proxied responses.
    description : str, default is Undefined, optional
        An optional textual description of the resource; provided by the
        client when the resource is created.
    edgeSecurityPolicy : str, default is Undefined, optional
        The security policy associated with this backend bucket.
    edgeSecurityPolicyRef : ComputeGcpUpboundIoV1beta2BackendBucketSpecForProviderEdgeSecurityPolicyRef, default is Undefined, optional
        edge security policy ref
    edgeSecurityPolicySelector : ComputeGcpUpboundIoV1beta2BackendBucketSpecForProviderEdgeSecurityPolicySelector, default is Undefined, optional
        edge security policy selector
    enableCdn : bool, default is Undefined, optional
        If true, enable Cloud CDN for this BackendBucket.
    project : str, default is Undefined, optional
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
    """


    bucketName?: str

    bucketNameRef?: ComputeGcpUpboundIoV1beta2BackendBucketSpecForProviderBucketNameRef

    bucketNameSelector?: ComputeGcpUpboundIoV1beta2BackendBucketSpecForProviderBucketNameSelector

    cdnPolicy?: ComputeGcpUpboundIoV1beta2BackendBucketSpecForProviderCdnPolicy

    compressionMode?: str

    customResponseHeaders?: [str]

    description?: str

    edgeSecurityPolicy?: str

    edgeSecurityPolicyRef?: ComputeGcpUpboundIoV1beta2BackendBucketSpecForProviderEdgeSecurityPolicyRef

    edgeSecurityPolicySelector?: ComputeGcpUpboundIoV1beta2BackendBucketSpecForProviderEdgeSecurityPolicySelector

    enableCdn?: bool

    project?: str


schema ComputeGcpUpboundIoV1beta2BackendBucketSpecForProviderBucketNameRef:
    r"""
    Reference to a Bucket in storage to populate bucketName.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ComputeGcpUpboundIoV1beta2BackendBucketSpecForProviderBucketNameRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ComputeGcpUpboundIoV1beta2BackendBucketSpecForProviderBucketNameRefPolicy


schema ComputeGcpUpboundIoV1beta2BackendBucketSpecForProviderBucketNameRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta2BackendBucketSpecForProviderBucketNameSelector:
    r"""
    Selector for a Bucket in storage to populate bucketName.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ComputeGcpUpboundIoV1beta2BackendBucketSpecForProviderBucketNameSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ComputeGcpUpboundIoV1beta2BackendBucketSpecForProviderBucketNameSelectorPolicy


schema ComputeGcpUpboundIoV1beta2BackendBucketSpecForProviderBucketNameSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta2BackendBucketSpecForProviderCdnPolicy:
    r"""
    Cloud CDN configuration for this Backend Bucket.
    Structure is documented below.

    Attributes
    ----------
    bypassCacheOnRequestHeaders : [ComputeGcpUpboundIoV1beta2BackendBucketSpecForProviderCdnPolicyBypassCacheOnRequestHeadersItems0], default is Undefined, optional
        Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified. The cache is bypassed for all cdnPolicy.cacheMode settings.
        Structure is documented below.
    cacheKeyPolicy : ComputeGcpUpboundIoV1beta2BackendBucketSpecForProviderCdnPolicyCacheKeyPolicy, default is Undefined, optional
        cache key policy
    cacheMode : str, default is Undefined, optional
        Specifies the cache setting for all responses from this backend.
        The possible values are: USE_ORIGIN_HEADERS, FORCE_CACHE_ALL and CACHE_ALL_STATIC
        Possible values are: USE_ORIGIN_HEADERS, FORCE_CACHE_ALL, CACHE_ALL_STATIC.
    clientTtl : float, default is Undefined, optional
        Specifies the maximum allowed TTL for cached content served by this origin.
    defaultTtl : float, default is Undefined, optional
        Specifies the default TTL for cached content served by this origin for responses
        that do not have an existing valid TTL (max-age or s-max-age).
    maxTtl : float, default is Undefined, optional
        Specifies the maximum allowed TTL for cached content served by this origin.
    negativeCaching : bool, default is Undefined, optional
        Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects.
    negativeCachingPolicy : [ComputeGcpUpboundIoV1beta2BackendBucketSpecForProviderCdnPolicyNegativeCachingPolicyItems0], default is Undefined, optional
        Sets a cache TTL for the specified HTTP status code. negativeCaching must be enabled to configure negativeCachingPolicy.
        Omitting the policy and leaving negativeCaching enabled will use Cloud CDN's default cache TTLs.
        Structure is documented below.
    requestCoalescing : bool, default is Undefined, optional
        If true then Cloud CDN will combine multiple concurrent cache fill requests into a small number of requests to the origin.
    serveWhileStale : float, default is Undefined, optional
        Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache.
    signedUrlCacheMaxAgeSec : float, default is Undefined, optional
        Maximum number of seconds the response to a signed URL request will
        be considered fresh. After this time period,
        the response will be revalidated before being served.
        When serving responses to signed URL requests,
        Cloud CDN will internally behave as though
        all responses from this backend had a "Cache-Control: public,
        max-age=[TTL]" header, regardless of any existing Cache-Control
        header. The actual headers served in responses will not be altered.
    """


    bypassCacheOnRequestHeaders?: [ComputeGcpUpboundIoV1beta2BackendBucketSpecForProviderCdnPolicyBypassCacheOnRequestHeadersItems0]

    cacheKeyPolicy?: ComputeGcpUpboundIoV1beta2BackendBucketSpecForProviderCdnPolicyCacheKeyPolicy

    cacheMode?: str

    clientTtl?: float

    defaultTtl?: float

    maxTtl?: float

    negativeCaching?: bool

    negativeCachingPolicy?: [ComputeGcpUpboundIoV1beta2BackendBucketSpecForProviderCdnPolicyNegativeCachingPolicyItems0]

    requestCoalescing?: bool

    serveWhileStale?: float

    signedUrlCacheMaxAgeSec?: float


schema ComputeGcpUpboundIoV1beta2BackendBucketSpecForProviderCdnPolicyBypassCacheOnRequestHeadersItems0:
    r"""
    compute gcp upbound io v1beta2 backend bucket spec for provider cdn policy bypass cache on request headers items0

    Attributes
    ----------
    headerName : str, default is Undefined, optional
        The header field name to match on when bypassing cache. Values are case-insensitive.
    """


    headerName?: str


schema ComputeGcpUpboundIoV1beta2BackendBucketSpecForProviderCdnPolicyCacheKeyPolicy:
    r"""
    The CacheKeyPolicy for this CdnPolicy.
    Structure is documented below.

    Attributes
    ----------
    includeHttpHeaders : [str], default is Undefined, optional
        Allows HTTP request headers (by name) to be used in the
        cache key.
    queryStringWhitelist : [str], default is Undefined, optional
        Names of query string parameters to include in cache keys.
        Default parameters are always included. '&' and '=' will
        be percent encoded and not treated as delimiters.
    """


    includeHttpHeaders?: [str]

    queryStringWhitelist?: [str]


schema ComputeGcpUpboundIoV1beta2BackendBucketSpecForProviderCdnPolicyNegativeCachingPolicyItems0:
    r"""
    compute gcp upbound io v1beta2 backend bucket spec for provider cdn policy negative caching policy items0

    Attributes
    ----------
    code : float, default is Undefined, optional
        The HTTP status code to define a TTL against. Only HTTP status codes 300, 301, 308, 404, 405, 410, 421, 451 and 501
        can be specified as values, and you cannot specify a status code more than once.
    ttl : float, default is Undefined, optional
        The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s
        (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
    """


    code?: float

    ttl?: float


schema ComputeGcpUpboundIoV1beta2BackendBucketSpecForProviderEdgeSecurityPolicyRef:
    r"""
    Reference to a SecurityPolicy in compute to populate edgeSecurityPolicy.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ComputeGcpUpboundIoV1beta2BackendBucketSpecForProviderEdgeSecurityPolicyRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ComputeGcpUpboundIoV1beta2BackendBucketSpecForProviderEdgeSecurityPolicyRefPolicy


schema ComputeGcpUpboundIoV1beta2BackendBucketSpecForProviderEdgeSecurityPolicyRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta2BackendBucketSpecForProviderEdgeSecurityPolicySelector:
    r"""
    Selector for a SecurityPolicy in compute to populate edgeSecurityPolicy.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ComputeGcpUpboundIoV1beta2BackendBucketSpecForProviderEdgeSecurityPolicySelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ComputeGcpUpboundIoV1beta2BackendBucketSpecForProviderEdgeSecurityPolicySelectorPolicy


schema ComputeGcpUpboundIoV1beta2BackendBucketSpecForProviderEdgeSecurityPolicySelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta2BackendBucketSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    bucketName : str, default is Undefined, optional
        Cloud Storage bucket name.
    bucketNameRef : ComputeGcpUpboundIoV1beta2BackendBucketSpecInitProviderBucketNameRef, default is Undefined, optional
        bucket name ref
    bucketNameSelector : ComputeGcpUpboundIoV1beta2BackendBucketSpecInitProviderBucketNameSelector, default is Undefined, optional
        bucket name selector
    cdnPolicy : ComputeGcpUpboundIoV1beta2BackendBucketSpecInitProviderCdnPolicy, default is Undefined, optional
        cdn policy
    compressionMode : str, default is Undefined, optional
        Compress text responses using Brotli or gzip compression, based on the client's Accept-Encoding header.
        Possible values are: AUTOMATIC, DISABLED.
    customResponseHeaders : [str], default is Undefined, optional
        Headers that the HTTP/S load balancer should add to proxied responses.
    description : str, default is Undefined, optional
        An optional textual description of the resource; provided by the
        client when the resource is created.
    edgeSecurityPolicy : str, default is Undefined, optional
        The security policy associated with this backend bucket.
    edgeSecurityPolicyRef : ComputeGcpUpboundIoV1beta2BackendBucketSpecInitProviderEdgeSecurityPolicyRef, default is Undefined, optional
        edge security policy ref
    edgeSecurityPolicySelector : ComputeGcpUpboundIoV1beta2BackendBucketSpecInitProviderEdgeSecurityPolicySelector, default is Undefined, optional
        edge security policy selector
    enableCdn : bool, default is Undefined, optional
        If true, enable Cloud CDN for this BackendBucket.
    project : str, default is Undefined, optional
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
    """


    bucketName?: str

    bucketNameRef?: ComputeGcpUpboundIoV1beta2BackendBucketSpecInitProviderBucketNameRef

    bucketNameSelector?: ComputeGcpUpboundIoV1beta2BackendBucketSpecInitProviderBucketNameSelector

    cdnPolicy?: ComputeGcpUpboundIoV1beta2BackendBucketSpecInitProviderCdnPolicy

    compressionMode?: str

    customResponseHeaders?: [str]

    description?: str

    edgeSecurityPolicy?: str

    edgeSecurityPolicyRef?: ComputeGcpUpboundIoV1beta2BackendBucketSpecInitProviderEdgeSecurityPolicyRef

    edgeSecurityPolicySelector?: ComputeGcpUpboundIoV1beta2BackendBucketSpecInitProviderEdgeSecurityPolicySelector

    enableCdn?: bool

    project?: str


schema ComputeGcpUpboundIoV1beta2BackendBucketSpecInitProviderBucketNameRef:
    r"""
    Reference to a Bucket in storage to populate bucketName.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ComputeGcpUpboundIoV1beta2BackendBucketSpecInitProviderBucketNameRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ComputeGcpUpboundIoV1beta2BackendBucketSpecInitProviderBucketNameRefPolicy


schema ComputeGcpUpboundIoV1beta2BackendBucketSpecInitProviderBucketNameRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta2BackendBucketSpecInitProviderBucketNameSelector:
    r"""
    Selector for a Bucket in storage to populate bucketName.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ComputeGcpUpboundIoV1beta2BackendBucketSpecInitProviderBucketNameSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ComputeGcpUpboundIoV1beta2BackendBucketSpecInitProviderBucketNameSelectorPolicy


schema ComputeGcpUpboundIoV1beta2BackendBucketSpecInitProviderBucketNameSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta2BackendBucketSpecInitProviderCdnPolicy:
    r"""
    Cloud CDN configuration for this Backend Bucket.
    Structure is documented below.

    Attributes
    ----------
    bypassCacheOnRequestHeaders : [ComputeGcpUpboundIoV1beta2BackendBucketSpecInitProviderCdnPolicyBypassCacheOnRequestHeadersItems0], default is Undefined, optional
        Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified. The cache is bypassed for all cdnPolicy.cacheMode settings.
        Structure is documented below.
    cacheKeyPolicy : ComputeGcpUpboundIoV1beta2BackendBucketSpecInitProviderCdnPolicyCacheKeyPolicy, default is Undefined, optional
        cache key policy
    cacheMode : str, default is Undefined, optional
        Specifies the cache setting for all responses from this backend.
        The possible values are: USE_ORIGIN_HEADERS, FORCE_CACHE_ALL and CACHE_ALL_STATIC
        Possible values are: USE_ORIGIN_HEADERS, FORCE_CACHE_ALL, CACHE_ALL_STATIC.
    clientTtl : float, default is Undefined, optional
        Specifies the maximum allowed TTL for cached content served by this origin.
    defaultTtl : float, default is Undefined, optional
        Specifies the default TTL for cached content served by this origin for responses
        that do not have an existing valid TTL (max-age or s-max-age).
    maxTtl : float, default is Undefined, optional
        Specifies the maximum allowed TTL for cached content served by this origin.
    negativeCaching : bool, default is Undefined, optional
        Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects.
    negativeCachingPolicy : [ComputeGcpUpboundIoV1beta2BackendBucketSpecInitProviderCdnPolicyNegativeCachingPolicyItems0], default is Undefined, optional
        Sets a cache TTL for the specified HTTP status code. negativeCaching must be enabled to configure negativeCachingPolicy.
        Omitting the policy and leaving negativeCaching enabled will use Cloud CDN's default cache TTLs.
        Structure is documented below.
    requestCoalescing : bool, default is Undefined, optional
        If true then Cloud CDN will combine multiple concurrent cache fill requests into a small number of requests to the origin.
    serveWhileStale : float, default is Undefined, optional
        Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache.
    signedUrlCacheMaxAgeSec : float, default is Undefined, optional
        Maximum number of seconds the response to a signed URL request will
        be considered fresh. After this time period,
        the response will be revalidated before being served.
        When serving responses to signed URL requests,
        Cloud CDN will internally behave as though
        all responses from this backend had a "Cache-Control: public,
        max-age=[TTL]" header, regardless of any existing Cache-Control
        header. The actual headers served in responses will not be altered.
    """


    bypassCacheOnRequestHeaders?: [ComputeGcpUpboundIoV1beta2BackendBucketSpecInitProviderCdnPolicyBypassCacheOnRequestHeadersItems0]

    cacheKeyPolicy?: ComputeGcpUpboundIoV1beta2BackendBucketSpecInitProviderCdnPolicyCacheKeyPolicy

    cacheMode?: str

    clientTtl?: float

    defaultTtl?: float

    maxTtl?: float

    negativeCaching?: bool

    negativeCachingPolicy?: [ComputeGcpUpboundIoV1beta2BackendBucketSpecInitProviderCdnPolicyNegativeCachingPolicyItems0]

    requestCoalescing?: bool

    serveWhileStale?: float

    signedUrlCacheMaxAgeSec?: float


schema ComputeGcpUpboundIoV1beta2BackendBucketSpecInitProviderCdnPolicyBypassCacheOnRequestHeadersItems0:
    r"""
    compute gcp upbound io v1beta2 backend bucket spec init provider cdn policy bypass cache on request headers items0

    Attributes
    ----------
    headerName : str, default is Undefined, optional
        The header field name to match on when bypassing cache. Values are case-insensitive.
    """


    headerName?: str


schema ComputeGcpUpboundIoV1beta2BackendBucketSpecInitProviderCdnPolicyCacheKeyPolicy:
    r"""
    The CacheKeyPolicy for this CdnPolicy.
    Structure is documented below.

    Attributes
    ----------
    includeHttpHeaders : [str], default is Undefined, optional
        Allows HTTP request headers (by name) to be used in the
        cache key.
    queryStringWhitelist : [str], default is Undefined, optional
        Names of query string parameters to include in cache keys.
        Default parameters are always included. '&' and '=' will
        be percent encoded and not treated as delimiters.
    """


    includeHttpHeaders?: [str]

    queryStringWhitelist?: [str]


schema ComputeGcpUpboundIoV1beta2BackendBucketSpecInitProviderCdnPolicyNegativeCachingPolicyItems0:
    r"""
    compute gcp upbound io v1beta2 backend bucket spec init provider cdn policy negative caching policy items0

    Attributes
    ----------
    code : float, default is Undefined, optional
        The HTTP status code to define a TTL against. Only HTTP status codes 300, 301, 308, 404, 405, 410, 421, 451 and 501
        can be specified as values, and you cannot specify a status code more than once.
    ttl : float, default is Undefined, optional
        The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s
        (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
    """


    code?: float

    ttl?: float


schema ComputeGcpUpboundIoV1beta2BackendBucketSpecInitProviderEdgeSecurityPolicyRef:
    r"""
    Reference to a SecurityPolicy in compute to populate edgeSecurityPolicy.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ComputeGcpUpboundIoV1beta2BackendBucketSpecInitProviderEdgeSecurityPolicyRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ComputeGcpUpboundIoV1beta2BackendBucketSpecInitProviderEdgeSecurityPolicyRefPolicy


schema ComputeGcpUpboundIoV1beta2BackendBucketSpecInitProviderEdgeSecurityPolicyRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta2BackendBucketSpecInitProviderEdgeSecurityPolicySelector:
    r"""
    Selector for a SecurityPolicy in compute to populate edgeSecurityPolicy.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ComputeGcpUpboundIoV1beta2BackendBucketSpecInitProviderEdgeSecurityPolicySelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ComputeGcpUpboundIoV1beta2BackendBucketSpecInitProviderEdgeSecurityPolicySelectorPolicy


schema ComputeGcpUpboundIoV1beta2BackendBucketSpecInitProviderEdgeSecurityPolicySelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta2BackendBucketSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ComputeGcpUpboundIoV1beta2BackendBucketSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ComputeGcpUpboundIoV1beta2BackendBucketSpecProviderConfigRefPolicy


schema ComputeGcpUpboundIoV1beta2BackendBucketSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta2BackendBucketSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : ComputeGcpUpboundIoV1beta2BackendBucketSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : ComputeGcpUpboundIoV1beta2BackendBucketSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: ComputeGcpUpboundIoV1beta2BackendBucketSpecPublishConnectionDetailsToConfigRef

    metadata?: ComputeGcpUpboundIoV1beta2BackendBucketSpecPublishConnectionDetailsToMetadata

    name: str


schema ComputeGcpUpboundIoV1beta2BackendBucketSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ComputeGcpUpboundIoV1beta2BackendBucketSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ComputeGcpUpboundIoV1beta2BackendBucketSpecPublishConnectionDetailsToConfigRefPolicy


schema ComputeGcpUpboundIoV1beta2BackendBucketSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta2BackendBucketSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema ComputeGcpUpboundIoV1beta2BackendBucketSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema ComputeGcpUpboundIoV1beta2BackendBucketStatus:
    r"""
    BackendBucketStatus defines the observed state of BackendBucket.

    Attributes
    ----------
    atProvider : ComputeGcpUpboundIoV1beta2BackendBucketStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [ComputeGcpUpboundIoV1beta2BackendBucketStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: ComputeGcpUpboundIoV1beta2BackendBucketStatusAtProvider

    conditions?: [ComputeGcpUpboundIoV1beta2BackendBucketStatusConditionsItems0]

    observedGeneration?: int


schema ComputeGcpUpboundIoV1beta2BackendBucketStatusAtProvider:
    r"""
    compute gcp upbound io v1beta2 backend bucket status at provider

    Attributes
    ----------
    bucketName : str, default is Undefined, optional
        Cloud Storage bucket name.
    cdnPolicy : ComputeGcpUpboundIoV1beta2BackendBucketStatusAtProviderCdnPolicy, default is Undefined, optional
        cdn policy
    compressionMode : str, default is Undefined, optional
        Compress text responses using Brotli or gzip compression, based on the client's Accept-Encoding header.
        Possible values are: AUTOMATIC, DISABLED.
    creationTimestamp : str, default is Undefined, optional
        Creation timestamp in RFC3339 text format.
    customResponseHeaders : [str], default is Undefined, optional
        Headers that the HTTP/S load balancer should add to proxied responses.
    description : str, default is Undefined, optional
        An optional textual description of the resource; provided by the
        client when the resource is created.
    edgeSecurityPolicy : str, default is Undefined, optional
        The security policy associated with this backend bucket.
    enableCdn : bool, default is Undefined, optional
        If true, enable Cloud CDN for this BackendBucket.
    id : str, default is Undefined, optional
        an identifier for the resource with format projects/{{project}}/global/backendBuckets/{{name}}
    project : str, default is Undefined, optional
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
    selfLink : str, default is Undefined, optional
        The URI of the created resource.
    """


    bucketName?: str

    cdnPolicy?: ComputeGcpUpboundIoV1beta2BackendBucketStatusAtProviderCdnPolicy

    compressionMode?: str

    creationTimestamp?: str

    customResponseHeaders?: [str]

    description?: str

    edgeSecurityPolicy?: str

    enableCdn?: bool

    id?: str

    project?: str

    selfLink?: str


schema ComputeGcpUpboundIoV1beta2BackendBucketStatusAtProviderCdnPolicy:
    r"""
    Cloud CDN configuration for this Backend Bucket.
    Structure is documented below.

    Attributes
    ----------
    bypassCacheOnRequestHeaders : [ComputeGcpUpboundIoV1beta2BackendBucketStatusAtProviderCdnPolicyBypassCacheOnRequestHeadersItems0], default is Undefined, optional
        Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified. The cache is bypassed for all cdnPolicy.cacheMode settings.
        Structure is documented below.
    cacheKeyPolicy : ComputeGcpUpboundIoV1beta2BackendBucketStatusAtProviderCdnPolicyCacheKeyPolicy, default is Undefined, optional
        cache key policy
    cacheMode : str, default is Undefined, optional
        Specifies the cache setting for all responses from this backend.
        The possible values are: USE_ORIGIN_HEADERS, FORCE_CACHE_ALL and CACHE_ALL_STATIC
        Possible values are: USE_ORIGIN_HEADERS, FORCE_CACHE_ALL, CACHE_ALL_STATIC.
    clientTtl : float, default is Undefined, optional
        Specifies the maximum allowed TTL for cached content served by this origin.
    defaultTtl : float, default is Undefined, optional
        Specifies the default TTL for cached content served by this origin for responses
        that do not have an existing valid TTL (max-age or s-max-age).
    maxTtl : float, default is Undefined, optional
        Specifies the maximum allowed TTL for cached content served by this origin.
    negativeCaching : bool, default is Undefined, optional
        Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects.
    negativeCachingPolicy : [ComputeGcpUpboundIoV1beta2BackendBucketStatusAtProviderCdnPolicyNegativeCachingPolicyItems0], default is Undefined, optional
        Sets a cache TTL for the specified HTTP status code. negativeCaching must be enabled to configure negativeCachingPolicy.
        Omitting the policy and leaving negativeCaching enabled will use Cloud CDN's default cache TTLs.
        Structure is documented below.
    requestCoalescing : bool, default is Undefined, optional
        If true then Cloud CDN will combine multiple concurrent cache fill requests into a small number of requests to the origin.
    serveWhileStale : float, default is Undefined, optional
        Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache.
    signedUrlCacheMaxAgeSec : float, default is Undefined, optional
        Maximum number of seconds the response to a signed URL request will
        be considered fresh. After this time period,
        the response will be revalidated before being served.
        When serving responses to signed URL requests,
        Cloud CDN will internally behave as though
        all responses from this backend had a "Cache-Control: public,
        max-age=[TTL]" header, regardless of any existing Cache-Control
        header. The actual headers served in responses will not be altered.
    """


    bypassCacheOnRequestHeaders?: [ComputeGcpUpboundIoV1beta2BackendBucketStatusAtProviderCdnPolicyBypassCacheOnRequestHeadersItems0]

    cacheKeyPolicy?: ComputeGcpUpboundIoV1beta2BackendBucketStatusAtProviderCdnPolicyCacheKeyPolicy

    cacheMode?: str

    clientTtl?: float

    defaultTtl?: float

    maxTtl?: float

    negativeCaching?: bool

    negativeCachingPolicy?: [ComputeGcpUpboundIoV1beta2BackendBucketStatusAtProviderCdnPolicyNegativeCachingPolicyItems0]

    requestCoalescing?: bool

    serveWhileStale?: float

    signedUrlCacheMaxAgeSec?: float


schema ComputeGcpUpboundIoV1beta2BackendBucketStatusAtProviderCdnPolicyBypassCacheOnRequestHeadersItems0:
    r"""
    compute gcp upbound io v1beta2 backend bucket status at provider cdn policy bypass cache on request headers items0

    Attributes
    ----------
    headerName : str, default is Undefined, optional
        The header field name to match on when bypassing cache. Values are case-insensitive.
    """


    headerName?: str


schema ComputeGcpUpboundIoV1beta2BackendBucketStatusAtProviderCdnPolicyCacheKeyPolicy:
    r"""
    The CacheKeyPolicy for this CdnPolicy.
    Structure is documented below.

    Attributes
    ----------
    includeHttpHeaders : [str], default is Undefined, optional
        Allows HTTP request headers (by name) to be used in the
        cache key.
    queryStringWhitelist : [str], default is Undefined, optional
        Names of query string parameters to include in cache keys.
        Default parameters are always included. '&' and '=' will
        be percent encoded and not treated as delimiters.
    """


    includeHttpHeaders?: [str]

    queryStringWhitelist?: [str]


schema ComputeGcpUpboundIoV1beta2BackendBucketStatusAtProviderCdnPolicyNegativeCachingPolicyItems0:
    r"""
    compute gcp upbound io v1beta2 backend bucket status at provider cdn policy negative caching policy items0

    Attributes
    ----------
    code : float, default is Undefined, optional
        The HTTP status code to define a TTL against. Only HTTP status codes 300, 301, 308, 404, 405, 410, 421, 451 and 501
        can be specified as values, and you cannot specify a status code more than once.
    ttl : float, default is Undefined, optional
        The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s
        (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
    """


    code?: float

    ttl?: float


schema ComputeGcpUpboundIoV1beta2BackendBucketStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


