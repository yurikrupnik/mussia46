"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema Snapshot:
    r"""
    Snapshot is the Schema for the Snapshots API. Represents a Persistent Disk Snapshot resource.

    Attributes
    ----------
    apiVersion : str, default is "compute.gcp.upbound.io/v1beta2", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Snapshot", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : ComputeGcpUpboundIoV1beta2SnapshotSpec, default is Undefined, required
        spec
    status : ComputeGcpUpboundIoV1beta2SnapshotStatus, default is Undefined, optional
        status
    """


    apiVersion: "compute.gcp.upbound.io/v1beta2" = "compute.gcp.upbound.io/v1beta2"

    kind: "Snapshot" = "Snapshot"

    metadata?: v1.ObjectMeta

    spec: ComputeGcpUpboundIoV1beta2SnapshotSpec

    status?: ComputeGcpUpboundIoV1beta2SnapshotStatus


schema ComputeGcpUpboundIoV1beta2SnapshotSpec:
    r"""
    SnapshotSpec defines the desired state of Snapshot

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : ComputeGcpUpboundIoV1beta2SnapshotSpecForProvider, default is Undefined, required
        for provider
    initProvider : ComputeGcpUpboundIoV1beta2SnapshotSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : ComputeGcpUpboundIoV1beta2SnapshotSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : ComputeGcpUpboundIoV1beta2SnapshotSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : ComputeGcpUpboundIoV1beta2SnapshotSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: ComputeGcpUpboundIoV1beta2SnapshotSpecForProvider

    initProvider?: ComputeGcpUpboundIoV1beta2SnapshotSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: ComputeGcpUpboundIoV1beta2SnapshotSpecProviderConfigRef

    publishConnectionDetailsTo?: ComputeGcpUpboundIoV1beta2SnapshotSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: ComputeGcpUpboundIoV1beta2SnapshotSpecWriteConnectionSecretToRef


schema ComputeGcpUpboundIoV1beta2SnapshotSpecForProvider:
    r"""
    compute gcp upbound io v1beta2 snapshot spec for provider

    Attributes
    ----------
    chainName : str, default is Undefined, optional
        Creates the new snapshot in the snapshot chain labeled with the
        specified name. The chain name must be 1-63 characters long and
        comply with RFC1035. This is an uncommon option only for advanced
        service owners who needs to create separate snapshot chains, for
        example, for chargeback tracking.  When you describe your snapshot
        resource, this field is visible only if it has a non-empty value.
    description : str, default is Undefined, optional
        An optional description of this resource.
    labels : {str:str}, default is Undefined, optional
        Labels to apply to this Snapshot.
        Note: This field is non-authoritative, and will only manage the labels present in your configuration.
        Please refer to the field effective_labels for all of the labels present on the resource.
    project : str, default is Undefined, optional
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
    snapshotEncryptionKey : ComputeGcpUpboundIoV1beta2SnapshotSpecForProviderSnapshotEncryptionKey, default is Undefined, optional
        snapshot encryption key
    sourceDisk : str, default is Undefined, optional
        A reference to the disk used to create this snapshot.
    sourceDiskEncryptionKey : ComputeGcpUpboundIoV1beta2SnapshotSpecForProviderSourceDiskEncryptionKey, default is Undefined, optional
        source disk encryption key
    sourceDiskRef : ComputeGcpUpboundIoV1beta2SnapshotSpecForProviderSourceDiskRef, default is Undefined, optional
        source disk ref
    sourceDiskSelector : ComputeGcpUpboundIoV1beta2SnapshotSpecForProviderSourceDiskSelector, default is Undefined, optional
        source disk selector
    storageLocations : [str], default is Undefined, optional
        Cloud Storage bucket storage location of the snapshot (regional or multi-regional).
    zone : str, default is Undefined, optional
        A reference to the zone where the disk is hosted.
    """


    chainName?: str

    description?: str

    labels?: {str:str}

    project?: str

    snapshotEncryptionKey?: ComputeGcpUpboundIoV1beta2SnapshotSpecForProviderSnapshotEncryptionKey

    sourceDisk?: str

    sourceDiskEncryptionKey?: ComputeGcpUpboundIoV1beta2SnapshotSpecForProviderSourceDiskEncryptionKey

    sourceDiskRef?: ComputeGcpUpboundIoV1beta2SnapshotSpecForProviderSourceDiskRef

    sourceDiskSelector?: ComputeGcpUpboundIoV1beta2SnapshotSpecForProviderSourceDiskSelector

    storageLocations?: [str]

    zone?: str


schema ComputeGcpUpboundIoV1beta2SnapshotSpecForProviderSnapshotEncryptionKey:
    r"""
    Encrypts the snapshot using a customer-supplied encryption key.
    After you encrypt a snapshot using a customer-supplied key, you must
    provide the same key if you use the snapshot later. For example, you
    must provide the encryption key when you create a disk from the
    encrypted snapshot in a future request.
    Customer-supplied encryption keys do not protect access to metadata of
    the snapshot.
    If you do not provide an encryption key when creating the snapshot,
    then the snapshot will be encrypted using an automatically generated
    key and you do not need to provide a key to use the snapshot later.
    Structure is documented below.

    Attributes
    ----------
    kmsKeySelfLink : str, default is Undefined, optional
        The name of the encryption key that is stored in Google Cloud KMS.
    kmsKeyServiceAccount : str, default is Undefined, optional
        The service account used for the encryption request for the given KMS key.
        If absent, the Compute Engine Service Agent service account is used.
    rawKeySecretRef : ComputeGcpUpboundIoV1beta2SnapshotSpecForProviderSnapshotEncryptionKeyRawKeySecretRef, default is Undefined, optional
        raw key secret ref
    """


    kmsKeySelfLink?: str

    kmsKeyServiceAccount?: str

    rawKeySecretRef?: ComputeGcpUpboundIoV1beta2SnapshotSpecForProviderSnapshotEncryptionKeyRawKeySecretRef


schema ComputeGcpUpboundIoV1beta2SnapshotSpecForProviderSnapshotEncryptionKeyRawKeySecretRef:
    r"""
    Specifies a 256-bit customer-supplied encryption key, encoded in
    RFC 4648 base64 to either encrypt or decrypt this resource.
    Note: This property is sensitive and will not be displayed in the plan.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    key: str

    name: str

    namespace: str


schema ComputeGcpUpboundIoV1beta2SnapshotSpecForProviderSourceDiskEncryptionKey:
    r"""
    The customer-supplied encryption key of the source snapshot. Required
    if the source snapshot is protected by a customer-supplied encryption
    key.
    Structure is documented below.

    Attributes
    ----------
    kmsKeyServiceAccount : str, default is Undefined, optional
        The service account used for the encryption request for the given KMS key.
        If absent, the Compute Engine Service Agent service account is used.
    rawKeySecretRef : ComputeGcpUpboundIoV1beta2SnapshotSpecForProviderSourceDiskEncryptionKeyRawKeySecretRef, default is Undefined, optional
        raw key secret ref
    """


    kmsKeyServiceAccount?: str

    rawKeySecretRef?: ComputeGcpUpboundIoV1beta2SnapshotSpecForProviderSourceDiskEncryptionKeyRawKeySecretRef


schema ComputeGcpUpboundIoV1beta2SnapshotSpecForProviderSourceDiskEncryptionKeyRawKeySecretRef:
    r"""
    Specifies a 256-bit customer-supplied encryption key, encoded in
    RFC 4648 base64 to either encrypt or decrypt this resource.
    Note: This property is sensitive and will not be displayed in the plan.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    key: str

    name: str

    namespace: str


schema ComputeGcpUpboundIoV1beta2SnapshotSpecForProviderSourceDiskRef:
    r"""
    Reference to a Disk in compute to populate sourceDisk.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ComputeGcpUpboundIoV1beta2SnapshotSpecForProviderSourceDiskRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ComputeGcpUpboundIoV1beta2SnapshotSpecForProviderSourceDiskRefPolicy


schema ComputeGcpUpboundIoV1beta2SnapshotSpecForProviderSourceDiskRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta2SnapshotSpecForProviderSourceDiskSelector:
    r"""
    Selector for a Disk in compute to populate sourceDisk.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ComputeGcpUpboundIoV1beta2SnapshotSpecForProviderSourceDiskSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ComputeGcpUpboundIoV1beta2SnapshotSpecForProviderSourceDiskSelectorPolicy


schema ComputeGcpUpboundIoV1beta2SnapshotSpecForProviderSourceDiskSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta2SnapshotSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    chainName : str, default is Undefined, optional
        Creates the new snapshot in the snapshot chain labeled with the
        specified name. The chain name must be 1-63 characters long and
        comply with RFC1035. This is an uncommon option only for advanced
        service owners who needs to create separate snapshot chains, for
        example, for chargeback tracking.  When you describe your snapshot
        resource, this field is visible only if it has a non-empty value.
    description : str, default is Undefined, optional
        An optional description of this resource.
    labels : {str:str}, default is Undefined, optional
        Labels to apply to this Snapshot.
        Note: This field is non-authoritative, and will only manage the labels present in your configuration.
        Please refer to the field effective_labels for all of the labels present on the resource.
    project : str, default is Undefined, optional
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
    snapshotEncryptionKey : ComputeGcpUpboundIoV1beta2SnapshotSpecInitProviderSnapshotEncryptionKey, default is Undefined, optional
        snapshot encryption key
    sourceDisk : str, default is Undefined, optional
        A reference to the disk used to create this snapshot.
    sourceDiskEncryptionKey : ComputeGcpUpboundIoV1beta2SnapshotSpecInitProviderSourceDiskEncryptionKey, default is Undefined, optional
        source disk encryption key
    sourceDiskRef : ComputeGcpUpboundIoV1beta2SnapshotSpecInitProviderSourceDiskRef, default is Undefined, optional
        source disk ref
    sourceDiskSelector : ComputeGcpUpboundIoV1beta2SnapshotSpecInitProviderSourceDiskSelector, default is Undefined, optional
        source disk selector
    storageLocations : [str], default is Undefined, optional
        Cloud Storage bucket storage location of the snapshot (regional or multi-regional).
    zone : str, default is Undefined, optional
        A reference to the zone where the disk is hosted.
    """


    chainName?: str

    description?: str

    labels?: {str:str}

    project?: str

    snapshotEncryptionKey?: ComputeGcpUpboundIoV1beta2SnapshotSpecInitProviderSnapshotEncryptionKey

    sourceDisk?: str

    sourceDiskEncryptionKey?: ComputeGcpUpboundIoV1beta2SnapshotSpecInitProviderSourceDiskEncryptionKey

    sourceDiskRef?: ComputeGcpUpboundIoV1beta2SnapshotSpecInitProviderSourceDiskRef

    sourceDiskSelector?: ComputeGcpUpboundIoV1beta2SnapshotSpecInitProviderSourceDiskSelector

    storageLocations?: [str]

    zone?: str


schema ComputeGcpUpboundIoV1beta2SnapshotSpecInitProviderSnapshotEncryptionKey:
    r"""
    Encrypts the snapshot using a customer-supplied encryption key.
    After you encrypt a snapshot using a customer-supplied key, you must
    provide the same key if you use the snapshot later. For example, you
    must provide the encryption key when you create a disk from the
    encrypted snapshot in a future request.
    Customer-supplied encryption keys do not protect access to metadata of
    the snapshot.
    If you do not provide an encryption key when creating the snapshot,
    then the snapshot will be encrypted using an automatically generated
    key and you do not need to provide a key to use the snapshot later.
    Structure is documented below.

    Attributes
    ----------
    kmsKeySelfLink : str, default is Undefined, optional
        The name of the encryption key that is stored in Google Cloud KMS.
    kmsKeyServiceAccount : str, default is Undefined, optional
        The service account used for the encryption request for the given KMS key.
        If absent, the Compute Engine Service Agent service account is used.
    rawKeySecretRef : ComputeGcpUpboundIoV1beta2SnapshotSpecInitProviderSnapshotEncryptionKeyRawKeySecretRef, default is Undefined, optional
        raw key secret ref
    """


    kmsKeySelfLink?: str

    kmsKeyServiceAccount?: str

    rawKeySecretRef?: ComputeGcpUpboundIoV1beta2SnapshotSpecInitProviderSnapshotEncryptionKeyRawKeySecretRef


schema ComputeGcpUpboundIoV1beta2SnapshotSpecInitProviderSnapshotEncryptionKeyRawKeySecretRef:
    r"""
    Specifies a 256-bit customer-supplied encryption key, encoded in
    RFC 4648 base64 to either encrypt or decrypt this resource.
    Note: This property is sensitive and will not be displayed in the plan.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    key: str

    name: str

    namespace: str


schema ComputeGcpUpboundIoV1beta2SnapshotSpecInitProviderSourceDiskEncryptionKey:
    r"""
    The customer-supplied encryption key of the source snapshot. Required
    if the source snapshot is protected by a customer-supplied encryption
    key.
    Structure is documented below.

    Attributes
    ----------
    kmsKeyServiceAccount : str, default is Undefined, optional
        The service account used for the encryption request for the given KMS key.
        If absent, the Compute Engine Service Agent service account is used.
    rawKeySecretRef : ComputeGcpUpboundIoV1beta2SnapshotSpecInitProviderSourceDiskEncryptionKeyRawKeySecretRef, default is Undefined, optional
        raw key secret ref
    """


    kmsKeyServiceAccount?: str

    rawKeySecretRef?: ComputeGcpUpboundIoV1beta2SnapshotSpecInitProviderSourceDiskEncryptionKeyRawKeySecretRef


schema ComputeGcpUpboundIoV1beta2SnapshotSpecInitProviderSourceDiskEncryptionKeyRawKeySecretRef:
    r"""
    Specifies a 256-bit customer-supplied encryption key, encoded in
    RFC 4648 base64 to either encrypt or decrypt this resource.
    Note: This property is sensitive and will not be displayed in the plan.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    key: str

    name: str

    namespace: str


schema ComputeGcpUpboundIoV1beta2SnapshotSpecInitProviderSourceDiskRef:
    r"""
    Reference to a Disk in compute to populate sourceDisk.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ComputeGcpUpboundIoV1beta2SnapshotSpecInitProviderSourceDiskRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ComputeGcpUpboundIoV1beta2SnapshotSpecInitProviderSourceDiskRefPolicy


schema ComputeGcpUpboundIoV1beta2SnapshotSpecInitProviderSourceDiskRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta2SnapshotSpecInitProviderSourceDiskSelector:
    r"""
    Selector for a Disk in compute to populate sourceDisk.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ComputeGcpUpboundIoV1beta2SnapshotSpecInitProviderSourceDiskSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ComputeGcpUpboundIoV1beta2SnapshotSpecInitProviderSourceDiskSelectorPolicy


schema ComputeGcpUpboundIoV1beta2SnapshotSpecInitProviderSourceDiskSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta2SnapshotSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ComputeGcpUpboundIoV1beta2SnapshotSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ComputeGcpUpboundIoV1beta2SnapshotSpecProviderConfigRefPolicy


schema ComputeGcpUpboundIoV1beta2SnapshotSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta2SnapshotSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : ComputeGcpUpboundIoV1beta2SnapshotSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : ComputeGcpUpboundIoV1beta2SnapshotSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: ComputeGcpUpboundIoV1beta2SnapshotSpecPublishConnectionDetailsToConfigRef

    metadata?: ComputeGcpUpboundIoV1beta2SnapshotSpecPublishConnectionDetailsToMetadata

    name: str


schema ComputeGcpUpboundIoV1beta2SnapshotSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ComputeGcpUpboundIoV1beta2SnapshotSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ComputeGcpUpboundIoV1beta2SnapshotSpecPublishConnectionDetailsToConfigRefPolicy


schema ComputeGcpUpboundIoV1beta2SnapshotSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ComputeGcpUpboundIoV1beta2SnapshotSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema ComputeGcpUpboundIoV1beta2SnapshotSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema ComputeGcpUpboundIoV1beta2SnapshotStatus:
    r"""
    SnapshotStatus defines the observed state of Snapshot.

    Attributes
    ----------
    atProvider : ComputeGcpUpboundIoV1beta2SnapshotStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [ComputeGcpUpboundIoV1beta2SnapshotStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: ComputeGcpUpboundIoV1beta2SnapshotStatusAtProvider

    conditions?: [ComputeGcpUpboundIoV1beta2SnapshotStatusConditionsItems0]

    observedGeneration?: int


schema ComputeGcpUpboundIoV1beta2SnapshotStatusAtProvider:
    r"""
    compute gcp upbound io v1beta2 snapshot status at provider

    Attributes
    ----------
    chainName : str, default is Undefined, optional
        Creates the new snapshot in the snapshot chain labeled with the
        specified name. The chain name must be 1-63 characters long and
        comply with RFC1035. This is an uncommon option only for advanced
        service owners who needs to create separate snapshot chains, for
        example, for chargeback tracking.  When you describe your snapshot
        resource, this field is visible only if it has a non-empty value.
    creationTimestamp : str, default is Undefined, optional
        Creation timestamp in RFC3339 text format.
    description : str, default is Undefined, optional
        An optional description of this resource.
    diskSizeGb : float, default is Undefined, optional
        Size of the snapshot, specified in GB.
    effectiveLabels : {str:str}, default is Undefined, optional
        effective labels
    id : str, default is Undefined, optional
        an identifier for the resource with format projects/{{project}}/global/snapshots/{{name}}
    labelFingerprint : str, default is Undefined, optional
        The fingerprint used for optimistic locking of this resource. Used
        internally during updates.
    labels : {str:str}, default is Undefined, optional
        Labels to apply to this Snapshot.
        Note: This field is non-authoritative, and will only manage the labels present in your configuration.
        Please refer to the field effective_labels for all of the labels present on the resource.
    licenses : [str], default is Undefined, optional
        A list of public visible licenses that apply to this snapshot. This
        can be because the original image had licenses attached (such as a
        Windows image).  snapshotEncryptionKey nested object Encrypts the
        snapshot using a customer-supplied encryption key.
    project : str, default is Undefined, optional
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
    selfLink : str, default is Undefined, optional
        The URI of the created resource.
    snapshotEncryptionKey : ComputeGcpUpboundIoV1beta2SnapshotStatusAtProviderSnapshotEncryptionKey, default is Undefined, optional
        snapshot encryption key
    snapshotId : float, default is Undefined, optional
        The unique identifier for the resource.
    sourceDisk : str, default is Undefined, optional
        A reference to the disk used to create this snapshot.
    sourceDiskEncryptionKey : ComputeGcpUpboundIoV1beta2SnapshotStatusAtProviderSourceDiskEncryptionKey, default is Undefined, optional
        source disk encryption key
    storageBytes : float, default is Undefined, optional
        A size of the storage used by the snapshot. As snapshots share
        storage, this number is expected to change with snapshot
        creation/deletion.
    storageLocations : [str], default is Undefined, optional
        Cloud Storage bucket storage location of the snapshot (regional or multi-regional).
    terraformLabels : {str:str}, default is Undefined, optional
        The combination of labels configured directly on the resource
        and default labels configured on the provider.
    zone : str, default is Undefined, optional
        A reference to the zone where the disk is hosted.
    """


    chainName?: str

    creationTimestamp?: str

    description?: str

    diskSizeGb?: float

    effectiveLabels?: {str:str}

    id?: str

    labelFingerprint?: str

    labels?: {str:str}

    licenses?: [str]

    project?: str

    selfLink?: str

    snapshotEncryptionKey?: ComputeGcpUpboundIoV1beta2SnapshotStatusAtProviderSnapshotEncryptionKey

    snapshotId?: float

    sourceDisk?: str

    sourceDiskEncryptionKey?: ComputeGcpUpboundIoV1beta2SnapshotStatusAtProviderSourceDiskEncryptionKey

    storageBytes?: float

    storageLocations?: [str]

    terraformLabels?: {str:str}

    zone?: str


schema ComputeGcpUpboundIoV1beta2SnapshotStatusAtProviderSnapshotEncryptionKey:
    r"""
    Encrypts the snapshot using a customer-supplied encryption key.
    After you encrypt a snapshot using a customer-supplied key, you must
    provide the same key if you use the snapshot later. For example, you
    must provide the encryption key when you create a disk from the
    encrypted snapshot in a future request.
    Customer-supplied encryption keys do not protect access to metadata of
    the snapshot.
    If you do not provide an encryption key when creating the snapshot,
    then the snapshot will be encrypted using an automatically generated
    key and you do not need to provide a key to use the snapshot later.
    Structure is documented below.

    Attributes
    ----------
    kmsKeySelfLink : str, default is Undefined, optional
        The name of the encryption key that is stored in Google Cloud KMS.
    kmsKeyServiceAccount : str, default is Undefined, optional
        The service account used for the encryption request for the given KMS key.
        If absent, the Compute Engine Service Agent service account is used.
    sha256 : str, default is Undefined, optional
        (Output)
        The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
        encryption key that protects this resource.
    """


    kmsKeySelfLink?: str

    kmsKeyServiceAccount?: str

    sha256?: str


schema ComputeGcpUpboundIoV1beta2SnapshotStatusAtProviderSourceDiskEncryptionKey:
    r"""
    The customer-supplied encryption key of the source snapshot. Required
    if the source snapshot is protected by a customer-supplied encryption
    key.
    Structure is documented below.

    Attributes
    ----------
    kmsKeyServiceAccount : str, default is Undefined, optional
        The service account used for the encryption request for the given KMS key.
        If absent, the Compute Engine Service Agent service account is used.
    """


    kmsKeyServiceAccount?: str


schema ComputeGcpUpboundIoV1beta2SnapshotStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


