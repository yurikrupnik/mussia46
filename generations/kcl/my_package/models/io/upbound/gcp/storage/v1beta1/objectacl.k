"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1

schema ObjectACL:
    r"""
    ObjectACL is the Schema for the ObjectACLs API. Creates a new object ACL in Google Cloud Storage.

    Attributes
    ----------
    apiVersion : str, default is "storage.gcp.upbound.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "ObjectACL", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : StorageGcpUpboundIoV1beta1ObjectACLSpec, default is Undefined, required
        spec
    status : StorageGcpUpboundIoV1beta1ObjectACLStatus, default is Undefined, optional
        status
    """
    apiVersion: "storage.gcp.upbound.io/v1beta1" = "storage.gcp.upbound.io/v1beta1"

    kind: "ObjectACL" = "ObjectACL"

    metadata?: v1.ObjectMeta
    spec: StorageGcpUpboundIoV1beta1ObjectACLSpec

    status?: StorageGcpUpboundIoV1beta1ObjectACLStatus

schema StorageGcpUpboundIoV1beta1ObjectACLSpec:
    r"""
    ObjectACLSpec defines the desired state of ObjectACL

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : StorageGcpUpboundIoV1beta1ObjectACLSpecForProvider, default is Undefined, required
        for provider
    initProvider : StorageGcpUpboundIoV1beta1ObjectACLSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : StorageGcpUpboundIoV1beta1ObjectACLSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : StorageGcpUpboundIoV1beta1ObjectACLSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : StorageGcpUpboundIoV1beta1ObjectACLSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """
    deletionPolicy?: "Orphan" | "Delete" = "Delete"
    forProvider: StorageGcpUpboundIoV1beta1ObjectACLSpecForProvider

    initProvider?: StorageGcpUpboundIoV1beta1ObjectACLSpecInitProvider
    managementPolicies?: [str] = ["*"]
    providerConfigRef?: StorageGcpUpboundIoV1beta1ObjectACLSpecProviderConfigRef
    publishConnectionDetailsTo?: StorageGcpUpboundIoV1beta1ObjectACLSpecPublishConnectionDetailsTo
    writeConnectionSecretToRef?: StorageGcpUpboundIoV1beta1ObjectACLSpecWriteConnectionSecretToRef

schema StorageGcpUpboundIoV1beta1ObjectACLSpecForProvider:
    r"""
    storage gcp upbound io v1beta1 object ACL spec for provider

    Attributes
    ----------
    bucket : str, default is Undefined, optional
        The name of the bucket the object is stored in.
    bucketRef : StorageGcpUpboundIoV1beta1ObjectACLSpecForProviderBucketRef, default is Undefined, optional
        bucket ref
    bucketSelector : StorageGcpUpboundIoV1beta1ObjectACLSpecForProviderBucketSelector, default is Undefined, optional
        bucket selector
    object : str, default is Undefined, optional
        The name of the object to apply the acl to.
    objectRef : StorageGcpUpboundIoV1beta1ObjectACLSpecForProviderObjectRef, default is Undefined, optional
        object ref
    objectSelector : StorageGcpUpboundIoV1beta1ObjectACLSpecForProviderObjectSelector, default is Undefined, optional
        object selector
    predefinedAcl : str, default is Undefined, optional
        The "canned" predefined ACL to apply. Must be set if role_entity is not.
    roleEntity : [str], default is Undefined, optional
        List of role/entity pairs in the form ROLE:entity. See GCS Object ACL documentation for more details.
        Must be set if predefined_acl is not.
    """
    bucket?: str
    bucketRef?: StorageGcpUpboundIoV1beta1ObjectACLSpecForProviderBucketRef
    bucketSelector?: StorageGcpUpboundIoV1beta1ObjectACLSpecForProviderBucketSelector
    object?: str
    objectRef?: StorageGcpUpboundIoV1beta1ObjectACLSpecForProviderObjectRef
    objectSelector?: StorageGcpUpboundIoV1beta1ObjectACLSpecForProviderObjectSelector
    predefinedAcl?: str
    roleEntity?: [str]

schema StorageGcpUpboundIoV1beta1ObjectACLSpecForProviderBucketRef:
    r"""
    Reference to a Bucket in storage to populate bucket.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : StorageGcpUpboundIoV1beta1ObjectACLSpecForProviderBucketRefPolicy, default is Undefined, optional
        policy
    """
    name: str

    policy?: StorageGcpUpboundIoV1beta1ObjectACLSpecForProviderBucketRefPolicy

schema StorageGcpUpboundIoV1beta1ObjectACLSpecForProviderBucketRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """
    resolution?: "Required" | "Optional" = "Required"
    resolve?: "Always" | "IfNotPresent"

schema StorageGcpUpboundIoV1beta1ObjectACLSpecForProviderBucketSelector:
    r"""
    Selector for a Bucket in storage to populate bucket.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : StorageGcpUpboundIoV1beta1ObjectACLSpecForProviderBucketSelectorPolicy, default is Undefined, optional
        policy
    """
    matchControllerRef?: bool
    matchLabels?: {str:str}
    policy?: StorageGcpUpboundIoV1beta1ObjectACLSpecForProviderBucketSelectorPolicy

schema StorageGcpUpboundIoV1beta1ObjectACLSpecForProviderBucketSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """
    resolution?: "Required" | "Optional" = "Required"
    resolve?: "Always" | "IfNotPresent"

schema StorageGcpUpboundIoV1beta1ObjectACLSpecForProviderObjectRef:
    r"""
    Reference to a BucketObject in storage to populate object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : StorageGcpUpboundIoV1beta1ObjectACLSpecForProviderObjectRefPolicy, default is Undefined, optional
        policy
    """
    name: str

    policy?: StorageGcpUpboundIoV1beta1ObjectACLSpecForProviderObjectRefPolicy

schema StorageGcpUpboundIoV1beta1ObjectACLSpecForProviderObjectRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """
    resolution?: "Required" | "Optional" = "Required"
    resolve?: "Always" | "IfNotPresent"

schema StorageGcpUpboundIoV1beta1ObjectACLSpecForProviderObjectSelector:
    r"""
    Selector for a BucketObject in storage to populate object.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : StorageGcpUpboundIoV1beta1ObjectACLSpecForProviderObjectSelectorPolicy, default is Undefined, optional
        policy
    """
    matchControllerRef?: bool
    matchLabels?: {str:str}
    policy?: StorageGcpUpboundIoV1beta1ObjectACLSpecForProviderObjectSelectorPolicy

schema StorageGcpUpboundIoV1beta1ObjectACLSpecForProviderObjectSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """
    resolution?: "Required" | "Optional" = "Required"
    resolve?: "Always" | "IfNotPresent"

schema StorageGcpUpboundIoV1beta1ObjectACLSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    bucket : str, default is Undefined, optional
        The name of the bucket the object is stored in.
    bucketRef : StorageGcpUpboundIoV1beta1ObjectACLSpecInitProviderBucketRef, default is Undefined, optional
        bucket ref
    bucketSelector : StorageGcpUpboundIoV1beta1ObjectACLSpecInitProviderBucketSelector, default is Undefined, optional
        bucket selector
    object : str, default is Undefined, optional
        The name of the object to apply the acl to.
    objectRef : StorageGcpUpboundIoV1beta1ObjectACLSpecInitProviderObjectRef, default is Undefined, optional
        object ref
    objectSelector : StorageGcpUpboundIoV1beta1ObjectACLSpecInitProviderObjectSelector, default is Undefined, optional
        object selector
    predefinedAcl : str, default is Undefined, optional
        The "canned" predefined ACL to apply. Must be set if role_entity is not.
    roleEntity : [str], default is Undefined, optional
        List of role/entity pairs in the form ROLE:entity. See GCS Object ACL documentation for more details.
        Must be set if predefined_acl is not.
    """
    bucket?: str
    bucketRef?: StorageGcpUpboundIoV1beta1ObjectACLSpecInitProviderBucketRef
    bucketSelector?: StorageGcpUpboundIoV1beta1ObjectACLSpecInitProviderBucketSelector
    object?: str
    objectRef?: StorageGcpUpboundIoV1beta1ObjectACLSpecInitProviderObjectRef
    objectSelector?: StorageGcpUpboundIoV1beta1ObjectACLSpecInitProviderObjectSelector
    predefinedAcl?: str
    roleEntity?: [str]

schema StorageGcpUpboundIoV1beta1ObjectACLSpecInitProviderBucketRef:
    r"""
    Reference to a Bucket in storage to populate bucket.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : StorageGcpUpboundIoV1beta1ObjectACLSpecInitProviderBucketRefPolicy, default is Undefined, optional
        policy
    """
    name: str

    policy?: StorageGcpUpboundIoV1beta1ObjectACLSpecInitProviderBucketRefPolicy

schema StorageGcpUpboundIoV1beta1ObjectACLSpecInitProviderBucketRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """
    resolution?: "Required" | "Optional" = "Required"
    resolve?: "Always" | "IfNotPresent"

schema StorageGcpUpboundIoV1beta1ObjectACLSpecInitProviderBucketSelector:
    r"""
    Selector for a Bucket in storage to populate bucket.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : StorageGcpUpboundIoV1beta1ObjectACLSpecInitProviderBucketSelectorPolicy, default is Undefined, optional
        policy
    """
    matchControllerRef?: bool
    matchLabels?: {str:str}
    policy?: StorageGcpUpboundIoV1beta1ObjectACLSpecInitProviderBucketSelectorPolicy

schema StorageGcpUpboundIoV1beta1ObjectACLSpecInitProviderBucketSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """
    resolution?: "Required" | "Optional" = "Required"
    resolve?: "Always" | "IfNotPresent"

schema StorageGcpUpboundIoV1beta1ObjectACLSpecInitProviderObjectRef:
    r"""
    Reference to a BucketObject in storage to populate object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : StorageGcpUpboundIoV1beta1ObjectACLSpecInitProviderObjectRefPolicy, default is Undefined, optional
        policy
    """
    name: str

    policy?: StorageGcpUpboundIoV1beta1ObjectACLSpecInitProviderObjectRefPolicy

schema StorageGcpUpboundIoV1beta1ObjectACLSpecInitProviderObjectRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """
    resolution?: "Required" | "Optional" = "Required"
    resolve?: "Always" | "IfNotPresent"

schema StorageGcpUpboundIoV1beta1ObjectACLSpecInitProviderObjectSelector:
    r"""
    Selector for a BucketObject in storage to populate object.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : StorageGcpUpboundIoV1beta1ObjectACLSpecInitProviderObjectSelectorPolicy, default is Undefined, optional
        policy
    """
    matchControllerRef?: bool
    matchLabels?: {str:str}
    policy?: StorageGcpUpboundIoV1beta1ObjectACLSpecInitProviderObjectSelectorPolicy

schema StorageGcpUpboundIoV1beta1ObjectACLSpecInitProviderObjectSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """
    resolution?: "Required" | "Optional" = "Required"
    resolve?: "Always" | "IfNotPresent"

schema StorageGcpUpboundIoV1beta1ObjectACLSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : StorageGcpUpboundIoV1beta1ObjectACLSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """
    name: str

    policy?: StorageGcpUpboundIoV1beta1ObjectACLSpecProviderConfigRefPolicy

schema StorageGcpUpboundIoV1beta1ObjectACLSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """
    resolution?: "Required" | "Optional" = "Required"
    resolve?: "Always" | "IfNotPresent"

schema StorageGcpUpboundIoV1beta1ObjectACLSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : StorageGcpUpboundIoV1beta1ObjectACLSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : StorageGcpUpboundIoV1beta1ObjectACLSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """
    configRef?: StorageGcpUpboundIoV1beta1ObjectACLSpecPublishConnectionDetailsToConfigRef
    metadata?: StorageGcpUpboundIoV1beta1ObjectACLSpecPublishConnectionDetailsToMetadata
    name: str

schema StorageGcpUpboundIoV1beta1ObjectACLSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : StorageGcpUpboundIoV1beta1ObjectACLSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """
    name: str

    policy?: StorageGcpUpboundIoV1beta1ObjectACLSpecPublishConnectionDetailsToConfigRefPolicy

schema StorageGcpUpboundIoV1beta1ObjectACLSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """
    resolution?: "Required" | "Optional" = "Required"
    resolve?: "Always" | "IfNotPresent"

schema StorageGcpUpboundIoV1beta1ObjectACLSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """
    annotations?: {str:str}
    labels?: {str:str}
    $type?: str

schema StorageGcpUpboundIoV1beta1ObjectACLSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """
    name: str

    namespace: str

schema StorageGcpUpboundIoV1beta1ObjectACLStatus:
    r"""
    ObjectACLStatus defines the observed state of ObjectACL.

    Attributes
    ----------
    atProvider : StorageGcpUpboundIoV1beta1ObjectACLStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [StorageGcpUpboundIoV1beta1ObjectACLStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """
    atProvider?: StorageGcpUpboundIoV1beta1ObjectACLStatusAtProvider
    conditions?: [StorageGcpUpboundIoV1beta1ObjectACLStatusConditionsItems0]
    observedGeneration?: int

schema StorageGcpUpboundIoV1beta1ObjectACLStatusAtProvider:
    r"""
    storage gcp upbound io v1beta1 object ACL status at provider

    Attributes
    ----------
    bucket : str, default is Undefined, optional
        The name of the bucket the object is stored in.
    id : str, default is Undefined, optional
        id
    object : str, default is Undefined, optional
        The name of the object to apply the acl to.
    predefinedAcl : str, default is Undefined, optional
        The "canned" predefined ACL to apply. Must be set if role_entity is not.
    roleEntity : [str], default is Undefined, optional
        List of role/entity pairs in the form ROLE:entity. See GCS Object ACL documentation for more details.
        Must be set if predefined_acl is not.
    """
    bucket?: str
    id?: str
    object?: str
    predefinedAcl?: str
    roleEntity?: [str]

schema StorageGcpUpboundIoV1beta1ObjectACLStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """
    lastTransitionTime: str

    message?: str
    observedGeneration?: int
    reason: str

    status: str

    $type: str

